[
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/a11y/src/VisuallyHidden.tsx",
    "description": "",
    "displayName": "VisuallyHidden",
    "methods": [],
    "props": {
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/a11y/src/index.ts",
    "description": "",
    "displayName": "VisuallyHidden",
    "methods": [],
    "props": {
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": { "param": "id Describes the input element" },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/a11y/src/index.ts",
    "description": "Hook that returns two sets of props that accessibly associate a label and its respective input element",
    "displayName": "useAccessibleForm",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/a11y/src/index.ts",
    "description": "",
    "displayName": "validateAriaLabelProps",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "param": "styles String of styles to render within media query."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/a11y/src/index.ts",
    "description": "Returns an emotion CSS instance for rendering styles that respect\nOS-level preferences for reduced motion.\n\nUse this function to remove scale, size, and positional transitions\nfor users with that preference set.",
    "displayName": "src",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "param": "styles String of styles to render within media query."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/a11y/src/prefersReducedMotion.tsx",
    "description": "Returns an emotion CSS instance for rendering styles that respect\nOS-level preferences for reduced motion.\n\nUse this function to remove scale, size, and positional transitions\nfor users with that preference set.",
    "displayName": "prefersReducedMotion",
    "methods": [],
    "props": {}
  },
  {
    "tags": { "param": "id Describes the input element" },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/a11y/src/useAccessibleForm.ts",
    "description": "Hook that returns two sets of props that accessibly associate a label and its respective input element",
    "displayName": "useAccessibleForm",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/a11y/src/validateAriaLabelProps.tsx",
    "description": "",
    "displayName": "validateAriaLabelProps",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/badge/src/Badge.tsx",
    "description": "Badge component for status indication.",
    "displayName": "Badge",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "An additional className to add to the component's classList",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/badge/src/Badge.tsx",
          "name": "BadgeProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/badge/src/Badge.tsx",
            "name": "BadgeProps"
          },
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "children": {
        "defaultValue": null,
        "description": "The content to render within the badge",
        "name": "children",
        "parent": {
          "fileName": "leafygreen-ui/packages/badge/src/Badge.tsx",
          "name": "BadgeProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/badge/src/Badge.tsx",
            "name": "BadgeProps"
          },
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": { "name": "any" }
      },
      "variant": {
        "defaultValue": { "value": "lightgray" },
        "description": "The Badge's style variant\n\nDefault: `'lightgray'`",
        "name": "variant",
        "parent": {
          "fileName": "leafygreen-ui/packages/badge/src/Badge.tsx",
          "name": "BadgeProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/badge/src/Badge.tsx",
            "name": "BadgeProps"
          }
        ],
        "required": false,
        "type": { "name": "Variant" }
      },
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/badge/src/index.ts",
    "description": "Badge component for status indication.",
    "displayName": "Badge",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "An additional className to add to the component's classList",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/badge/src/Badge.tsx",
          "name": "BadgeProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/badge/src/Badge.tsx",
            "name": "BadgeProps"
          },
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "children": {
        "defaultValue": null,
        "description": "The content to render within the badge",
        "name": "children",
        "parent": {
          "fileName": "leafygreen-ui/packages/badge/src/Badge.tsx",
          "name": "BadgeProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/badge/src/Badge.tsx",
            "name": "BadgeProps"
          },
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": { "name": "any" }
      },
      "variant": {
        "defaultValue": { "value": "lightgray" },
        "description": "The Badge's style variant\n\nDefault: `'lightgray'`",
        "name": "variant",
        "parent": {
          "fileName": "leafygreen-ui/packages/badge/src/Badge.tsx",
          "name": "BadgeProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/badge/src/Badge.tsx",
            "name": "BadgeProps"
          }
        ],
        "required": false,
        "type": { "name": "Variant" }
      },
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {
      "param": "props.variant Sets the variant for the Banner.\nprops.image Illustration that will replace default Icon when the prop is supplied.\nprops.dismissible Determines whether or not the Banner is dismissible.\nprops.onClose Callback fired when dismiss button is clicked."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/banner/src/Banner.tsx",
    "description": "# Banner\n\nBanner component\n\n```\n<Banner>Banner content goes here.</Banner>\n```",
    "displayName": "Banner",
    "methods": [],
    "props": {
      "variant": {
        "defaultValue": { "value": "info" },
        "description": "Sets the variant for the Banner\n\nDefault: `'info'`",
        "name": "variant",
        "parent": {
          "fileName": "leafygreen-ui/packages/banner/src/Banner.tsx",
          "name": "BannerProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/banner/src/Banner.tsx",
            "name": "BannerProps"
          }
        ],
        "required": false,
        "type": { "name": "Variant" }
      },
      "image": {
        "defaultValue": null,
        "description": "Illustration that will replace default Icon when the prop is supplied",
        "name": "image",
        "parent": {
          "fileName": "leafygreen-ui/packages/banner/src/Banner.tsx",
          "name": "BannerProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/banner/src/Banner.tsx",
            "name": "BannerProps"
          }
        ],
        "required": false,
        "type": { "name": "React.ReactElement" }
      },
      "dismissible": {
        "defaultValue": { "value": false },
        "description": "Determines whether or not the Banner is dismissible\n\nDefault: `false`",
        "name": "dismissible",
        "parent": {
          "fileName": "leafygreen-ui/packages/banner/src/Banner.tsx",
          "name": "BannerProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/banner/src/Banner.tsx",
            "name": "BannerProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "onClose": {
        "defaultValue": { "value": "() => {}" },
        "description": "Callback fired when dismiss button is clicked\n\nDefault: `() => {}`",
        "name": "onClose",
        "parent": {
          "fileName": "leafygreen-ui/packages/banner/src/Banner.tsx",
          "name": "BannerProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/banner/src/Banner.tsx",
            "name": "BannerProps"
          }
        ],
        "required": false,
        "type": { "name": "React.MouseEventHandler" }
      },
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {
      "param": "props.variant Sets the variant for the Banner.\nprops.image Illustration that will replace default Icon when the prop is supplied.\nprops.dismissible Determines whether or not the Banner is dismissible.\nprops.onClose Callback fired when dismiss button is clicked."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/banner/src/index.ts",
    "description": "# Banner\n\nBanner component\n\n```\n<Banner>Banner content goes here.</Banner>\n```",
    "displayName": "src",
    "methods": [],
    "props": {
      "variant": {
        "defaultValue": { "value": "info" },
        "description": "Sets the variant for the Banner\n\nDefault: `'info'`",
        "name": "variant",
        "parent": {
          "fileName": "leafygreen-ui/packages/banner/src/Banner.tsx",
          "name": "BannerProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/banner/src/Banner.tsx",
            "name": "BannerProps"
          }
        ],
        "required": false,
        "type": { "name": "Variant" }
      },
      "image": {
        "defaultValue": null,
        "description": "Illustration that will replace default Icon when the prop is supplied",
        "name": "image",
        "parent": {
          "fileName": "leafygreen-ui/packages/banner/src/Banner.tsx",
          "name": "BannerProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/banner/src/Banner.tsx",
            "name": "BannerProps"
          }
        ],
        "required": false,
        "type": { "name": "React.ReactElement" }
      },
      "dismissible": {
        "defaultValue": { "value": false },
        "description": "Determines whether or not the Banner is dismissible\n\nDefault: `false`",
        "name": "dismissible",
        "parent": {
          "fileName": "leafygreen-ui/packages/banner/src/Banner.tsx",
          "name": "BannerProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/banner/src/Banner.tsx",
            "name": "BannerProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "onClose": {
        "defaultValue": { "value": "() => {}" },
        "description": "Callback fired when dismiss button is clicked\n\nDefault: `() => {}`",
        "name": "onClose",
        "parent": {
          "fileName": "leafygreen-ui/packages/banner/src/Banner.tsx",
          "name": "BannerProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/banner/src/Banner.tsx",
            "name": "BannerProps"
          }
        ],
        "required": false,
        "type": { "name": "React.MouseEventHandler" }
      },
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/box/src/Box.tsx",
    "description": "",
    "displayName": "InlineBox",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/box/src/index.ts",
    "description": "",
    "displayName": "InlineBox",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/button/src/ButtonIcon.tsx",
    "description": "",
    "displayName": "ButtonIcon",
    "methods": [],
    "props": {
      "variant": {
        "defaultValue": null,
        "description": "",
        "name": "variant",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/button/src/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Variant" }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/button/src/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "darkMode": {
        "defaultValue": null,
        "description": "",
        "name": "darkMode",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/button/src/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "isIconOnlyButton": {
        "defaultValue": null,
        "description": "",
        "name": "isIconOnlyButton",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/button/src/ButtonIcon.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": { "name": "boolean" }
      },
      "glyph": {
        "defaultValue": null,
        "description": "",
        "name": "glyph",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/button/src/ButtonIcon.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": { "name": "React.ReactElement" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/button/src/styles.ts",
    "description": "",
    "displayName": "getClassName",
    "methods": [],
    "props": {
      "variant": {
        "defaultValue": null,
        "description": "",
        "name": "variant",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/button/src/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Variant" }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/button/src/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "darkMode": {
        "defaultValue": null,
        "description": "",
        "name": "darkMode",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/button/src/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "baseFontSize": {
        "defaultValue": null,
        "description": "",
        "name": "baseFontSize",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/button/src/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "FontSize" }
      },
      "usingKeyboard": {
        "defaultValue": null,
        "description": "",
        "name": "usingKeyboard",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/button/src/styles.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": { "name": "boolean" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/callout/src/Callout.tsx",
    "description": "",
    "displayName": "Callout",
    "methods": [],
    "props": {
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/callout/src/Callout.tsx",
          "name": "CalloutProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/callout/src/Callout.tsx",
            "name": "CalloutProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/callout/src/Callout.tsx",
          "name": "CalloutProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/callout/src/Callout.tsx",
            "name": "CalloutProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "variant": {
        "defaultValue": null,
        "description": "",
        "name": "variant",
        "parent": {
          "fileName": "leafygreen-ui/packages/callout/src/Callout.tsx",
          "name": "CalloutProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/callout/src/Callout.tsx",
            "name": "CalloutProps"
          }
        ],
        "required": true,
        "type": { "name": "Variant" }
      },
      "baseFontSize": {
        "defaultValue": { "value": 13 },
        "description": "",
        "name": "baseFontSize",
        "parent": {
          "fileName": "leafygreen-ui/packages/callout/src/Callout.tsx",
          "name": "CalloutProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/callout/src/Callout.tsx",
            "name": "CalloutProps"
          }
        ],
        "required": false,
        "type": { "name": "13 | 16" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/callout/src/index.ts",
    "description": "",
    "displayName": "Callout",
    "methods": [],
    "props": {
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/callout/src/Callout.tsx",
          "name": "CalloutProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/callout/src/Callout.tsx",
            "name": "CalloutProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/callout/src/Callout.tsx",
          "name": "CalloutProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/callout/src/Callout.tsx",
            "name": "CalloutProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "variant": {
        "defaultValue": null,
        "description": "",
        "name": "variant",
        "parent": {
          "fileName": "leafygreen-ui/packages/callout/src/Callout.tsx",
          "name": "CalloutProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/callout/src/Callout.tsx",
            "name": "CalloutProps"
          }
        ],
        "required": true,
        "type": { "name": "Variant" }
      },
      "baseFontSize": {
        "defaultValue": { "value": 13 },
        "description": "",
        "name": "baseFontSize",
        "parent": {
          "fileName": "leafygreen-ui/packages/callout/src/Callout.tsx",
          "name": "CalloutProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/callout/src/Callout.tsx",
            "name": "CalloutProps"
          }
        ],
        "required": false,
        "type": { "name": "13 | 16" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/checkbox/src/Check.tsx",
    "description": "",
    "displayName": "Check",
    "methods": [],
    "props": {
      "isChecked": {
        "defaultValue": null,
        "description": "",
        "name": "isChecked",
        "parent": {
          "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
          "name": "CheckProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
            "name": "CheckProps"
          }
        ],
        "required": true,
        "type": { "name": "boolean" }
      },
      "disabled": {
        "defaultValue": null,
        "description": "",
        "name": "disabled",
        "parent": {
          "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
          "name": "CheckProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
            "name": "CheckProps"
          }
        ],
        "required": true,
        "type": { "name": "boolean" }
      },
      "animate": {
        "defaultValue": null,
        "description": "",
        "name": "animate",
        "parent": {
          "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
          "name": "CheckProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
            "name": "CheckProps"
          }
        ],
        "required": true,
        "type": { "name": "boolean" }
      },
      "selector": {
        "defaultValue": null,
        "description": "",
        "name": "selector",
        "parent": {
          "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
          "name": "CheckProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
            "name": "CheckProps"
          }
        ],
        "required": true,
        "type": { "name": "string" }
      },
      "indeterminate": {
        "defaultValue": null,
        "description": "",
        "name": "indeterminate",
        "parent": {
          "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
          "name": "CheckProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
            "name": "CheckProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/checkbox/src/Checkbox.tsx",
    "description": "",
    "displayName": "Checkbox",
    "methods": [],
    "props": {
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      },
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
          "name": "InternalCheckboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
            "name": "InternalCheckboxProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "onChange": {
        "defaultValue": null,
        "description": "",
        "name": "onChange",
        "parent": {
          "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
          "name": "InternalCheckboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
            "name": "InternalCheckboxProps"
          }
        ],
        "required": false,
        "type": { "name": "ChangeEventHandler<HTMLInputElement>" }
      },
      "disabled": {
        "defaultValue": { "value": false },
        "description": "",
        "name": "disabled",
        "parent": {
          "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
          "name": "InternalCheckboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
            "name": "InternalCheckboxProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "darkMode": {
        "defaultValue": { "value": false },
        "description": "",
        "name": "darkMode",
        "parent": {
          "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
          "name": "InternalCheckboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
            "name": "InternalCheckboxProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "animate": {
        "defaultValue": { "value": true },
        "description": "",
        "name": "animate",
        "parent": {
          "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
          "name": "InternalCheckboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
            "name": "InternalCheckboxProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "checked": {
        "defaultValue": null,
        "description": "",
        "name": "checked",
        "parent": {
          "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
          "name": "InternalCheckboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
            "name": "InternalCheckboxProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "description": {
        "defaultValue": null,
        "description": "",
        "name": "description",
        "parent": {
          "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
          "name": "InternalCheckboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
            "name": "InternalCheckboxProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "indeterminate": {
        "defaultValue": null,
        "description": "",
        "name": "indeterminate",
        "parent": {
          "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
          "name": "InternalCheckboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
            "name": "InternalCheckboxProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "bold": {
        "defaultValue": null,
        "description": "",
        "name": "bold",
        "parent": {
          "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
          "name": "InternalCheckboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
            "name": "InternalCheckboxProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "aria-label": {
        "defaultValue": null,
        "description": "Defines a string value that labels the current element.",
        "name": "aria-label",
        "parent": {
          "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
          "name": "InternalCheckboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
            "name": "InternalCheckboxProps"
          },
          {
            "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
            "name": "InternalCheckboxProps"
          },
          {
            "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
            "name": "InternalCheckboxProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "aria-labelledby": {
        "defaultValue": null,
        "description": "Identifies the element (or elements) that labels the current element.",
        "name": "aria-labelledby",
        "parent": {
          "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
          "name": "InternalCheckboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
            "name": "InternalCheckboxProps"
          },
          {
            "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
            "name": "InternalCheckboxProps"
          },
          {
            "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
            "name": "InternalCheckboxProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "label": {
        "defaultValue": { "value": "" },
        "description": "",
        "name": "label",
        "parent": {
          "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
          "name": "InternalCheckboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
            "name": "InternalCheckboxProps"
          },
          {
            "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
            "name": "InternalCheckboxProps"
          },
          {
            "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
            "name": "InternalCheckboxProps"
          }
        ],
        "required": false,
        "type": { "name": "ReactNode" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/checkbox/src/LegacyCheck.tsx",
    "description": "",
    "displayName": "LegacyCheck",
    "methods": [],
    "props": {
      "isChecked": {
        "defaultValue": null,
        "description": "",
        "name": "isChecked",
        "parent": {
          "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
          "name": "CheckProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
            "name": "CheckProps"
          }
        ],
        "required": true,
        "type": { "name": "boolean" }
      },
      "disabled": {
        "defaultValue": null,
        "description": "",
        "name": "disabled",
        "parent": {
          "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
          "name": "CheckProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
            "name": "CheckProps"
          }
        ],
        "required": true,
        "type": { "name": "boolean" }
      },
      "animate": {
        "defaultValue": null,
        "description": "",
        "name": "animate",
        "parent": {
          "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
          "name": "CheckProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
            "name": "CheckProps"
          }
        ],
        "required": true,
        "type": { "name": "boolean" }
      },
      "selector": {
        "defaultValue": null,
        "description": "",
        "name": "selector",
        "parent": {
          "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
          "name": "CheckProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
            "name": "CheckProps"
          }
        ],
        "required": true,
        "type": { "name": "string" }
      },
      "indeterminate": {
        "defaultValue": null,
        "description": "",
        "name": "indeterminate",
        "parent": {
          "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
          "name": "CheckProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
            "name": "CheckProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/checkbox/src/SvgCheck.tsx",
    "description": "",
    "displayName": "SvgCheck",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/checkbox/src/SvgIndeterminate.tsx",
    "description": "",
    "displayName": "SvgIndeterminate",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/checkbox/src/index.ts",
    "description": "",
    "displayName": "Checkbox",
    "methods": [],
    "props": {
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      },
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
          "name": "InternalCheckboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
            "name": "InternalCheckboxProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "onChange": {
        "defaultValue": null,
        "description": "",
        "name": "onChange",
        "parent": {
          "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
          "name": "InternalCheckboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
            "name": "InternalCheckboxProps"
          }
        ],
        "required": false,
        "type": { "name": "ChangeEventHandler<HTMLInputElement>" }
      },
      "disabled": {
        "defaultValue": { "value": false },
        "description": "",
        "name": "disabled",
        "parent": {
          "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
          "name": "InternalCheckboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
            "name": "InternalCheckboxProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "darkMode": {
        "defaultValue": { "value": false },
        "description": "",
        "name": "darkMode",
        "parent": {
          "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
          "name": "InternalCheckboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
            "name": "InternalCheckboxProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "animate": {
        "defaultValue": { "value": true },
        "description": "",
        "name": "animate",
        "parent": {
          "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
          "name": "InternalCheckboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
            "name": "InternalCheckboxProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "checked": {
        "defaultValue": null,
        "description": "",
        "name": "checked",
        "parent": {
          "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
          "name": "InternalCheckboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
            "name": "InternalCheckboxProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "description": {
        "defaultValue": null,
        "description": "",
        "name": "description",
        "parent": {
          "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
          "name": "InternalCheckboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
            "name": "InternalCheckboxProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "indeterminate": {
        "defaultValue": null,
        "description": "",
        "name": "indeterminate",
        "parent": {
          "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
          "name": "InternalCheckboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
            "name": "InternalCheckboxProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "bold": {
        "defaultValue": null,
        "description": "",
        "name": "bold",
        "parent": {
          "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
          "name": "InternalCheckboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
            "name": "InternalCheckboxProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "aria-label": {
        "defaultValue": null,
        "description": "Defines a string value that labels the current element.",
        "name": "aria-label",
        "parent": {
          "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
          "name": "InternalCheckboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
            "name": "InternalCheckboxProps"
          },
          {
            "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
            "name": "InternalCheckboxProps"
          },
          {
            "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
            "name": "InternalCheckboxProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "aria-labelledby": {
        "defaultValue": null,
        "description": "Identifies the element (or elements) that labels the current element.",
        "name": "aria-labelledby",
        "parent": {
          "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
          "name": "InternalCheckboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
            "name": "InternalCheckboxProps"
          },
          {
            "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
            "name": "InternalCheckboxProps"
          },
          {
            "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
            "name": "InternalCheckboxProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "label": {
        "defaultValue": { "value": "" },
        "description": "",
        "name": "label",
        "parent": {
          "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
          "name": "InternalCheckboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
            "name": "InternalCheckboxProps"
          },
          {
            "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
            "name": "InternalCheckboxProps"
          },
          {
            "fileName": "leafygreen-ui/packages/checkbox/src/types.ts",
            "name": "InternalCheckboxProps"
          }
        ],
        "required": false,
        "type": { "name": "ReactNode" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/code/src/Code.tsx",
    "description": "",
    "displayName": "Code",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/code/src/CopyButton.tsx",
    "description": "",
    "displayName": "CopyButton",
    "methods": [],
    "props": {
      "onCopy": {
        "defaultValue": null,
        "description": "",
        "name": "onCopy",
        "parent": {
          "fileName": "leafygreen-ui/packages/code/src/CopyButton.tsx",
          "name": "CopyProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/CopyButton.tsx",
            "name": "CopyProps"
          }
        ],
        "required": false,
        "type": { "name": "Function" }
      },
      "contents": {
        "defaultValue": null,
        "description": "",
        "name": "contents",
        "parent": {
          "fileName": "leafygreen-ui/packages/code/src/CopyButton.tsx",
          "name": "CopyProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/CopyButton.tsx",
            "name": "CopyProps"
          }
        ],
        "required": true,
        "type": { "name": "string" }
      },
      "darkMode": {
        "defaultValue": null,
        "description": "",
        "name": "darkMode",
        "parent": {
          "fileName": "leafygreen-ui/packages/code/src/CopyButton.tsx",
          "name": "CopyProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/CopyButton.tsx",
            "name": "CopyProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "withLanguageSwitcher": {
        "defaultValue": null,
        "description": "",
        "name": "withLanguageSwitcher",
        "parent": {
          "fileName": "leafygreen-ui/packages/code/src/CopyButton.tsx",
          "name": "CopyProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/CopyButton.tsx",
            "name": "CopyProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/code/src/LanguageSwitcher.tsx",
    "description": "",
    "displayName": "LanguageSwitcher",
    "methods": [],
    "props": {
      "language": {
        "defaultValue": null,
        "description": "",
        "name": "language",
        "parent": {
          "fileName": "leafygreen-ui/packages/code/src/LanguageSwitcher.tsx",
          "name": "Props"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/LanguageSwitcher.tsx",
            "name": "Props"
          }
        ],
        "required": true,
        "type": { "name": "LanguageOption" }
      },
      "languageOptions": {
        "defaultValue": null,
        "description": "",
        "name": "languageOptions",
        "parent": {
          "fileName": "leafygreen-ui/packages/code/src/LanguageSwitcher.tsx",
          "name": "Props"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/LanguageSwitcher.tsx",
            "name": "Props"
          }
        ],
        "required": true,
        "type": { "name": "LanguageOption[]" }
      },
      "onChange": {
        "defaultValue": null,
        "description": "",
        "name": "onChange",
        "parent": {
          "fileName": "leafygreen-ui/packages/code/src/LanguageSwitcher.tsx",
          "name": "Props"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/LanguageSwitcher.tsx",
            "name": "Props"
          }
        ],
        "required": true,
        "type": { "name": "(arg0: LanguageOption) => void" }
      },
      "darkMode": {
        "defaultValue": null,
        "description": "",
        "name": "darkMode",
        "parent": {
          "fileName": "leafygreen-ui/packages/code/src/LanguageSwitcher.tsx",
          "name": "Props"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/LanguageSwitcher.tsx",
            "name": "Props"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "usePortal": {
        "defaultValue": null,
        "description": "Specifies that the popover content should be rendered at the end of the DOM,\nrather than in the DOM tree.\n\ndefault: `true`",
        "name": "usePortal",
        "parent": {
          "fileName": "leafygreen-ui/packages/code/src/types.ts",
          "name": "PopoverProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/types.ts",
            "name": "PopoverProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "portalClassName": {
        "defaultValue": null,
        "description": "When usePortal is `true`, specifies a class name to apply to the root element of the portal.",
        "name": "portalClassName",
        "parent": {
          "fileName": "leafygreen-ui/packages/code/src/types.ts",
          "name": "PopoverProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/types.ts",
            "name": "PopoverProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "portalContainer": {
        "defaultValue": null,
        "description": "When usePortal is `true`, specifies an element to portal within. The default behavior is to generate a div at the end of the document to render within.",
        "name": "portalContainer",
        "parent": {
          "fileName": "leafygreen-ui/packages/code/src/types.ts",
          "name": "PopoverProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/types.ts",
            "name": "PopoverProps"
          }
        ],
        "required": false,
        "type": { "name": "HTMLElement" }
      },
      "scrollContainer": {
        "defaultValue": null,
        "description": "When usePortal is `true`, specifies the scrollable element to position relative to.",
        "name": "scrollContainer",
        "parent": {
          "fileName": "leafygreen-ui/packages/code/src/types.ts",
          "name": "PopoverProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/types.ts",
            "name": "PopoverProps"
          }
        ],
        "required": false,
        "type": { "name": "HTMLElement" }
      },
      "popoverZIndex": {
        "defaultValue": null,
        "description": "Number that controls the z-index of the popover element directly.",
        "name": "popoverZIndex",
        "parent": {
          "fileName": "leafygreen-ui/packages/code/src/types.ts",
          "name": "PopoverProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/types.ts",
            "name": "PopoverProps"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/code/src/LanguageSwitcherExample.tsx",
    "description": "",
    "displayName": "PythonLogo",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/LanguageSwitcherExample.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/code/src/LanguageSwitcherExample.tsx",
    "description": "",
    "displayName": "LanguageSwitcher",
    "methods": [],
    "props": {
      "darkMode": {
        "defaultValue": null,
        "description": "",
        "name": "darkMode",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/LanguageSwitcherExample.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "onChange": {
        "defaultValue": null,
        "description": "",
        "name": "onChange",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/LanguageSwitcherExample.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Function" }
      },
      "customActionButtons": {
        "defaultValue": { "value": "[]" },
        "description": "",
        "name": "customActionButtons",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/LanguageSwitcherExample.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "React.ReactNode[]" }
      },
      "showCustomActionButtons": {
        "defaultValue": { "value": false },
        "description": "",
        "name": "showCustomActionButtons",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/LanguageSwitcherExample.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/code/src/Panel.tsx",
    "description": "",
    "displayName": "Panel",
    "methods": [],
    "props": {
      "onChange": {
        "defaultValue": null,
        "description": "",
        "name": "onChange",
        "parent": {
          "fileName": "leafygreen-ui/packages/code/src/types.ts",
          "name": "LanguageSwitcher"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/types.ts",
            "name": "LanguageSwitcher"
          }
        ],
        "required": false,
        "type": { "name": "(arg0: LanguageOption) => void" }
      },
      "languageOptions": {
        "defaultValue": null,
        "description": "",
        "name": "languageOptions",
        "parent": {
          "fileName": "leafygreen-ui/packages/code/src/types.ts",
          "name": "LanguageSwitcher"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/types.ts",
            "name": "LanguageSwitcher"
          }
        ],
        "required": false,
        "type": { "name": "LanguageOption[]" }
      },
      "usePortal": {
        "defaultValue": null,
        "description": "Specifies that the popover content should be rendered at the end of the DOM,\nrather than in the DOM tree.\n\ndefault: `true`",
        "name": "usePortal",
        "parent": {
          "fileName": "leafygreen-ui/packages/code/src/types.ts",
          "name": "PopoverProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/types.ts",
            "name": "PopoverProps"
          },
          {
            "fileName": "leafygreen-ui/packages/code/src/types.ts",
            "name": "PopoverProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "portalClassName": {
        "defaultValue": null,
        "description": "When usePortal is `true`, specifies a class name to apply to the root element of the portal.",
        "name": "portalClassName",
        "parent": {
          "fileName": "leafygreen-ui/packages/code/src/types.ts",
          "name": "PopoverProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/types.ts",
            "name": "PopoverProps"
          },
          {
            "fileName": "leafygreen-ui/packages/code/src/types.ts",
            "name": "PopoverProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "portalContainer": {
        "defaultValue": null,
        "description": "When usePortal is `true`, specifies an element to portal within. The default behavior is to generate a div at the end of the document to render within.",
        "name": "portalContainer",
        "parent": {
          "fileName": "leafygreen-ui/packages/code/src/types.ts",
          "name": "PopoverProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/types.ts",
            "name": "PopoverProps"
          },
          {
            "fileName": "leafygreen-ui/packages/code/src/types.ts",
            "name": "PopoverProps"
          }
        ],
        "required": false,
        "type": { "name": "HTMLElement" }
      },
      "scrollContainer": {
        "defaultValue": null,
        "description": "When usePortal is `true`, specifies the scrollable element to position relative to.",
        "name": "scrollContainer",
        "parent": {
          "fileName": "leafygreen-ui/packages/code/src/types.ts",
          "name": "PopoverProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/types.ts",
            "name": "PopoverProps"
          },
          {
            "fileName": "leafygreen-ui/packages/code/src/types.ts",
            "name": "PopoverProps"
          }
        ],
        "required": false,
        "type": { "name": "HTMLElement" }
      },
      "popoverZIndex": {
        "defaultValue": null,
        "description": "Number that controls the z-index of the popover element directly.",
        "name": "popoverZIndex",
        "parent": {
          "fileName": "leafygreen-ui/packages/code/src/types.ts",
          "name": "PopoverProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/types.ts",
            "name": "PopoverProps"
          },
          {
            "fileName": "leafygreen-ui/packages/code/src/types.ts",
            "name": "PopoverProps"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "onCopy": {
        "defaultValue": null,
        "description": "",
        "name": "onCopy",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/Panel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Function" }
      },
      "contents": {
        "defaultValue": null,
        "description": "",
        "name": "contents",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/Panel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": { "name": "string" }
      },
      "darkMode": {
        "defaultValue": null,
        "description": "",
        "name": "darkMode",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/Panel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "showCopyButton": {
        "defaultValue": null,
        "description": "",
        "name": "showCopyButton",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/Panel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "language": {
        "defaultValue": null,
        "description": "",
        "name": "language",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/Panel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "LanguageOption" }
      },
      "isMultiline": {
        "defaultValue": null,
        "description": "",
        "name": "isMultiline",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/Panel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "customActionButtons": {
        "defaultValue": null,
        "description": "",
        "name": "customActionButtons",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/Panel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "React.ReactNode[]" }
      },
      "showCustomActionButtons": {
        "defaultValue": null,
        "description": "",
        "name": "showCustomActionButtons",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/Panel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/Panel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/code/src/Syntax.tsx",
    "description": "",
    "displayName": "Syntax",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "The children to render inside Code. This is usually going to be a formatted code block or line.",
        "name": "children",
        "parent": {
          "fileName": "leafygreen-ui/packages/code/src/types.ts",
          "name": "SyntaxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/types.ts",
            "name": "SyntaxProps"
          }
        ],
        "required": true,
        "type": { "name": "string" }
      },
      "className": {
        "defaultValue": null,
        "description": "An additional CSS class applied to the root element",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/code/src/types.ts",
          "name": "SyntaxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/types.ts",
            "name": "SyntaxProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "language": {
        "defaultValue": null,
        "description": "The language to highlight the syntax of.",
        "name": "language",
        "parent": {
          "fileName": "leafygreen-ui/packages/code/src/types.ts",
          "name": "SyntaxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/types.ts",
            "name": "SyntaxProps"
          }
        ],
        "required": true,
        "type": { "name": "Language" }
      },
      "darkMode": {
        "defaultValue": { "value": false },
        "description": "Determines whether or not the syntax will be rendered in dark mode.\n\ndefault: `false`",
        "name": "darkMode",
        "parent": {
          "fileName": "leafygreen-ui/packages/code/src/types.ts",
          "name": "SyntaxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/types.ts",
            "name": "SyntaxProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "showLineNumbers": {
        "defaultValue": { "value": false },
        "description": "Shows line numbers. This is specifically used for the Code component implementation.\n\ndefault: `false`",
        "name": "showLineNumbers",
        "parent": {
          "fileName": "leafygreen-ui/packages/code/src/types.ts",
          "name": "SyntaxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/types.ts",
            "name": "SyntaxProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "lineNumberStart": {
        "defaultValue": null,
        "description": "Specifies the number by which to start line numbering.\n\ndefault: `1`",
        "name": "lineNumberStart",
        "parent": {
          "fileName": "leafygreen-ui/packages/code/src/types.ts",
          "name": "SyntaxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/types.ts",
            "name": "SyntaxProps"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "highlightLines": {
        "defaultValue": { "value": "[]" },
        "description": "An array of lines to highlight. The array can only contain numbers corresponding to the line numbers to highlight, and / or tuples representing a range (e.g. `[6, 10]`);",
        "name": "highlightLines",
        "parent": {
          "fileName": "leafygreen-ui/packages/code/src/types.ts",
          "name": "SyntaxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/types.ts",
            "name": "SyntaxProps"
          }
        ],
        "required": false,
        "type": { "name": "LineHighlightingDefinition" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/code/src/WindowChrome.tsx",
    "description": "",
    "displayName": "WindowChrome",
    "methods": [],
    "props": {
      "darkMode": {
        "defaultValue": { "value": false },
        "description": "",
        "name": "darkMode",
        "parent": {
          "fileName": "leafygreen-ui/packages/code/src/WindowChrome.tsx",
          "name": "WindowChromeProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/WindowChrome.tsx",
            "name": "WindowChromeProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "chromeTitle": {
        "defaultValue": { "value": "" },
        "description": "",
        "name": "chromeTitle",
        "parent": {
          "fileName": "leafygreen-ui/packages/code/src/WindowChrome.tsx",
          "name": "WindowChromeProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/WindowChrome.tsx",
            "name": "WindowChromeProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {
      "param": "props.children The string to be formatted.\nprops.className An additional CSS class added to the root element of Code.\nprops.language The language used for syntax highlighing.\nprops.darkMode Determines if the code block will be rendered in dark mode. Default: `false`\nprops.showLineNumbers When true, shows line numbers in preformatted code blocks. Default: `false`\nprops.lineNumberStart Specifies the numbering of the first line in the block. Default: 1\nprops.copyable When true, allows the code block to be copied to the user's clipboard. Default: `true`\nprops.onCopy Callback fired when Code is copied"
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/code/src/index.ts",
    "description": "# Code\n\nReact Component that outputs single-line and multi-line code blocks.\n\n```\n<Code>Hello world!</Code>\n```\n---",
    "displayName": "Code",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "An additional CSS class applied to the root element",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/code/src/types.ts",
          "name": "SyntaxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/types.ts",
            "name": "SyntaxProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "children": {
        "defaultValue": { "value": "" },
        "description": "The children to render inside Code. This is usually going to be a formatted code block or line.",
        "name": "children",
        "parent": {
          "fileName": "leafygreen-ui/packages/code/src/types.ts",
          "name": "SyntaxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/types.ts",
            "name": "SyntaxProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "darkMode": {
        "defaultValue": { "value": false },
        "description": "Determines whether or not the syntax will be rendered in dark mode.\n\ndefault: `false`",
        "name": "darkMode",
        "parent": {
          "fileName": "leafygreen-ui/packages/code/src/types.ts",
          "name": "SyntaxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/types.ts",
            "name": "SyntaxProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "showLineNumbers": {
        "defaultValue": { "value": false },
        "description": "Shows line numbers. This is specifically used for the Code component implementation.\n\ndefault: `false`",
        "name": "showLineNumbers",
        "parent": {
          "fileName": "leafygreen-ui/packages/code/src/types.ts",
          "name": "SyntaxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/types.ts",
            "name": "SyntaxProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "lineNumberStart": {
        "defaultValue": { "value": 1 },
        "description": "Specifies the number by which to start line numbering.\n\ndefault: `1`",
        "name": "lineNumberStart",
        "parent": {
          "fileName": "leafygreen-ui/packages/code/src/types.ts",
          "name": "SyntaxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/types.ts",
            "name": "SyntaxProps"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "highlightLines": {
        "defaultValue": { "value": "[]" },
        "description": "An array of lines to highlight. The array can only contain numbers corresponding to the line numbers to highlight, and / or tuples representing a range (e.g. `[6, 10]`);",
        "name": "highlightLines",
        "parent": {
          "fileName": "leafygreen-ui/packages/code/src/types.ts",
          "name": "SyntaxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/types.ts",
            "name": "SyntaxProps"
          }
        ],
        "required": false,
        "type": { "name": "LineHighlightingDefinition" }
      },
      "showWindowChrome": {
        "defaultValue": { "value": false },
        "description": "Shows window chrome for code block;\n\ndefault: `false`",
        "name": "showWindowChrome",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "chromeTitle": {
        "defaultValue": { "value": "" },
        "description": "Renders a file name or other descriptor for a block of code",
        "name": "chromeTitle",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "copyable": {
        "defaultValue": { "value": true },
        "description": "When true, allows the code block to be copied to the user's clipboard by clicking the rendered copy button.\n\ndefault: `true`",
        "name": "copyable",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "onCopy": {
        "defaultValue": null,
        "description": "Callback fired when Code is copied via the copy button.",
        "name": "onCopy",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Function" }
      },
      "customActionButtons": {
        "defaultValue": { "value": "[]" },
        "description": "Custom action buttons.",
        "name": "customActionButtons",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "ReactNode[]" }
      },
      "showCustomActionButtons": {
        "defaultValue": { "value": false },
        "description": "When true, custom action buttons will be shown.",
        "name": "showCustomActionButtons",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "language": {
        "defaultValue": null,
        "description": "",
        "name": "language",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/types.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/code/src/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": { "name": "string" }
      },
      "languageOptions": {
        "defaultValue": null,
        "description": "",
        "name": "languageOptions",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/types.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/code/src/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "LanguageOption[]" }
      },
      "onChange": {
        "defaultValue": null,
        "description": "",
        "name": "onChange",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/types.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/code/src/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "(arg0: LanguageOption) => void" }
      },
      "usePortal": {
        "defaultValue": { "value": true },
        "description": "Specifies that the popover content should be rendered at the end of the DOM,\nrather than in the DOM tree.\n\ndefault: `true`",
        "name": "usePortal",
        "parent": {
          "fileName": "leafygreen-ui/packages/code/src/types.ts",
          "name": "PopoverProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/types.ts",
            "name": "PopoverProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "portalClassName": {
        "defaultValue": null,
        "description": "When usePortal is `true`, specifies a class name to apply to the root element of the portal.",
        "name": "portalClassName",
        "parent": {
          "fileName": "leafygreen-ui/packages/code/src/types.ts",
          "name": "PopoverProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/types.ts",
            "name": "PopoverProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "portalContainer": {
        "defaultValue": null,
        "description": "When usePortal is `true`, specifies an element to portal within. The default behavior is to generate a div at the end of the document to render within.",
        "name": "portalContainer",
        "parent": {
          "fileName": "leafygreen-ui/packages/code/src/types.ts",
          "name": "PopoverProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/types.ts",
            "name": "PopoverProps"
          }
        ],
        "required": false,
        "type": { "name": "HTMLElement" }
      },
      "scrollContainer": {
        "defaultValue": null,
        "description": "When usePortal is `true`, specifies the scrollable element to position relative to.",
        "name": "scrollContainer",
        "parent": {
          "fileName": "leafygreen-ui/packages/code/src/types.ts",
          "name": "PopoverProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/types.ts",
            "name": "PopoverProps"
          }
        ],
        "required": false,
        "type": { "name": "HTMLElement" }
      },
      "popoverZIndex": {
        "defaultValue": null,
        "description": "Number that controls the z-index of the popover element directly.",
        "name": "popoverZIndex",
        "parent": {
          "fileName": "leafygreen-ui/packages/code/src/types.ts",
          "name": "PopoverProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/types.ts",
            "name": "PopoverProps"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/code/src/renderingPlugin.tsx",
    "description": "",
    "displayName": "generateKindClassName",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/code/src/renderingPlugin.tsx",
    "description": "",
    "displayName": "LineTableRow",
    "methods": [],
    "props": {
      "lineNumber": {
        "defaultValue": null,
        "description": "",
        "name": "lineNumber",
        "parent": {
          "fileName": "leafygreen-ui/packages/code/src/renderingPlugin.tsx",
          "name": "LineTableRowProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/renderingPlugin.tsx",
            "name": "LineTableRowProps"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "highlighted": {
        "defaultValue": null,
        "description": "",
        "name": "highlighted",
        "parent": {
          "fileName": "leafygreen-ui/packages/code/src/renderingPlugin.tsx",
          "name": "LineTableRowProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/renderingPlugin.tsx",
            "name": "LineTableRowProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "darkMode": {
        "defaultValue": null,
        "description": "",
        "name": "darkMode",
        "parent": {
          "fileName": "leafygreen-ui/packages/code/src/renderingPlugin.tsx",
          "name": "LineTableRowProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/renderingPlugin.tsx",
            "name": "LineTableRowProps"
          }
        ],
        "required": true,
        "type": { "name": "boolean" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/code/src/renderingPlugin.tsx",
    "description": "",
    "displayName": "treeToLines",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/code/src/renderingPlugin.tsx",
    "description": "",
    "displayName": "TableContent",
    "methods": [],
    "props": {
      "lines": {
        "defaultValue": null,
        "description": "",
        "name": "lines",
        "parent": {
          "fileName": "leafygreen-ui/packages/code/src/renderingPlugin.tsx",
          "name": "TableContentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/code/src/renderingPlugin.tsx",
            "name": "TableContentProps"
          }
        ],
        "required": true,
        "type": { "name": "LineDefinition" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/combobox/node_modules/@leafygreen-ui/inline-definition/node_modules/@leafygreen-ui/typography/src/FormElements.tsx",
    "description": "",
    "displayName": "Label",
    "methods": [],
    "props": {
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/combobox/node_modules/@leafygreen-ui/inline-definition/node_modules/@leafygreen-ui/typography/src/Typography.tsx",
    "description": "",
    "displayName": "H1",
    "methods": [],
    "props": {
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/combobox/node_modules/@leafygreen-ui/inline-definition/node_modules/@leafygreen-ui/typography/src/index.ts",
    "description": "",
    "displayName": "Body",
    "methods": [],
    "props": {
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/combobox/node_modules/@leafygreen-ui/inline-definition/node_modules/@leafygreen-ui/typography/src/index.ts",
    "description": "",
    "displayName": "InlineCode",
    "methods": [],
    "props": {
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/combobox/node_modules/@leafygreen-ui/inline-definition/node_modules/@leafygreen-ui/typography/src/index.ts",
    "description": "",
    "displayName": "InlineKeyCode",
    "methods": [],
    "props": {
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/combobox/node_modules/@leafygreen-ui/inline-definition/node_modules/@leafygreen-ui/typography/src/index.ts",
    "description": "",
    "displayName": "Disclaimer",
    "methods": [],
    "props": {
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/combobox/node_modules/@leafygreen-ui/inline-definition/node_modules/@leafygreen-ui/typography/src/index.ts",
    "description": "",
    "displayName": "Label",
    "methods": [],
    "props": {
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/combobox/node_modules/@leafygreen-ui/inline-definition/node_modules/@leafygreen-ui/typography/src/index.ts",
    "description": "",
    "displayName": "Description",
    "methods": [],
    "props": {
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/combobox/node_modules/@leafygreen-ui/inline-definition/src/InlineDefinition.tsx",
    "description": "",
    "displayName": "InlineDefinition",
    "methods": [],
    "props": {
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      },
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/combobox/node_modules/@leafygreen-ui/inline-definition/src/index.ts",
    "description": "",
    "displayName": "InlineDefinition",
    "methods": [],
    "props": {
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      },
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      }
    }
  },
  {
    "tags": {
      "param": "props.active Boolean to describe whether or not Popover is active.\nprops.spacing The spacing (in pixels) between the reference element, and the popover.\nprops.align Alignment of Popover component relative to another element: `top`, `bottom`, `left`, `right`, `center-horizontal`, `center-vertical`.\nprops.justify Justification of Popover component relative to another element: `start`, `middle`, `end`, `fit`.\nprops.adjustOnMutation Should the Popover auto adjust its content when the DOM changes (using MutationObserver).\nprops.children Content to appear inside of Popover container.\nprops.className Classname applied to Popover container.\nprops.popoverZIndex Number that controls the z-index of the popover element directly.\nprops.refEl Reference element that Popover component should be positioned against.\nprops.usePortal Boolean to describe if content should be portaled to end of DOM, or appear in DOM tree.\nprops.portalClassName Classname applied to root element of the portal.\nprops.portalContainer HTML element that the popover is portaled within.\nprops.scrollContainer HTML ancestor element that's scrollable to position the popover accurately within scrolling containers."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/combobox/node_modules/@leafygreen-ui/tooltip/node_modules/@leafygreen-ui/popover/src/Popover.tsx",
    "description": "# Popover\n\nReact Component that handles positioning of content relative to another element.\n\n```\n<button>\n<Popover active={true}>Hello world!</Popover>\n</button>\n```",
    "displayName": "Popover",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "param": "props.active Boolean to describe whether or not Popover is active.\nprops.spacing The spacing (in pixels) between the reference element, and the popover.\nprops.align Alignment of Popover component relative to another element: `top`, `bottom`, `left`, `right`, `center-horizontal`, `center-vertical`.\nprops.justify Justification of Popover component relative to another element: `start`, `middle`, `end`, `fit`.\nprops.adjustOnMutation Should the Popover auto adjust its content when the DOM changes (using MutationObserver).\nprops.children Content to appear inside of Popover container.\nprops.className Classname applied to Popover container.\nprops.popoverZIndex Number that controls the z-index of the popover element directly.\nprops.refEl Reference element that Popover component should be positioned against.\nprops.usePortal Boolean to describe if content should be portaled to end of DOM, or appear in DOM tree.\nprops.portalClassName Classname applied to root element of the portal.\nprops.portalContainer HTML element that the popover is portaled within.\nprops.scrollContainer HTML ancestor element that's scrollable to position the popover accurately within scrolling containers."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/combobox/node_modules/@leafygreen-ui/tooltip/node_modules/@leafygreen-ui/popover/src/index.ts",
    "description": "# Popover\n\nReact Component that handles positioning of content relative to another element.\n\n```\n<button>\n<Popover active={true}>Hello world!</Popover>\n</button>\n```",
    "displayName": "Popover",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/combobox/node_modules/@leafygreen-ui/tooltip/node_modules/@leafygreen-ui/popover/src/positionUtils.ts",
    "description": "",
    "displayName": "calculatePosition",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "param": "Start will justify content against the start of other element\nMiddle will justify content against the middle of other element\nBottom will justify content against the end of other element\nFit will justify content against both the start and the end of the other element"
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/combobox/node_modules/@leafygreen-ui/tooltip/src/Tooltip.tsx",
    "description": "Options to determine the justification of the popover relative to\nthe other component",
    "displayName": "Tooltip",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "param": "Start will justify content against the start of other element\nMiddle will justify content against the middle of other element\nBottom will justify content against the end of other element\nFit will justify content against both the start and the end of the other element"
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/combobox/node_modules/@leafygreen-ui/tooltip/src/index.ts",
    "description": "Options to determine the justification of the popover relative to\nthe other component",
    "displayName": "__type",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "param": "props.children Content to appear inside of Tooltip.\nprops.open Boolean to describe whether or not Tooltip is open.\nprops.setOpen Callback to change the open state of the Tooltip.\nprops.darkMode Whether the Tooltip will apepar in dark mode.\nprops.className Classname applied to Tooltip.\nprops.align Alignment of Tooltip relative to trigger: `top`, `bottom`, `left`, `right`.\nprops.justify Justification of Tooltip relative to trigger: `start`, `middle`, `end`.\nprops.trigger Trigger element can be ReactNode or function.\nprops.triggerEvent Whether the Tooltip should be triggered by a `click` or `hover`.\nprops.id id given to Tooltip content.\nprops.usePortal Determines whether or not Tooltip will be Portaled\nprops.portalClassName Classname applied to root element of the portal."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/combobox/node_modules/@leafygreen-ui/tooltip/src/index.ts",
    "description": "# Tooltip\n\nTooltip component\n\n```\n<Tooltip\nalign='top'\njustify='start'\ntrigger={<button>trigger</button>}\ntriggerEvent='hover'\n>\nI am an uncontrolled Tooltip!\n</Tooltip>\n```",
    "displayName": "Tooltip",
    "methods": [],
    "props": {
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      },
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/combobox/src/Combobox.styles.ts",
    "description": "",
    "displayName": "comboboxParentStyle",
    "methods": [],
    "props": {
      "darkMode": {
        "defaultValue": null,
        "description": "",
        "name": "darkMode",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.styles.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": { "name": "boolean" }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.styles.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": { "name": "\"default\"" }
      },
      "overflow": {
        "defaultValue": null,
        "description": "",
        "name": "overflow",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.styles.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": { "name": "Overflow" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/combobox/src/Combobox.styles.ts",
    "description": "",
    "displayName": "interactionRingColor",
    "methods": [],
    "props": {
      "state": {
        "defaultValue": null,
        "description": "",
        "name": "state",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.styles.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": { "name": "State" }
      },
      "darkMode": {
        "defaultValue": null,
        "description": "",
        "name": "darkMode",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.styles.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": { "name": "boolean" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/combobox/src/Combobox.styles.ts",
    "description": "",
    "displayName": "inputWrapperStyle",
    "methods": [],
    "props": {
      "overflow": {
        "defaultValue": null,
        "description": "",
        "name": "overflow",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.styles.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": { "name": "Overflow" }
      },
      "isOpen": {
        "defaultValue": null,
        "description": "",
        "name": "isOpen",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.styles.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": { "name": "boolean" }
      },
      "selection": {
        "defaultValue": null,
        "description": "",
        "name": "selection",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.styles.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": { "name": "string | string[]" }
      },
      "value": {
        "defaultValue": null,
        "description": "",
        "name": "value",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.styles.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/combobox/src/Combobox.styles.ts",
    "description": "Menu styles",
    "displayName": "menuWrapperStyle",
    "methods": [],
    "props": {
      "darkMode": {
        "defaultValue": null,
        "description": "",
        "name": "darkMode",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.styles.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": { "name": "boolean" }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.styles.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": { "name": "\"default\"" }
      },
      "width": {
        "defaultValue": { "value": 384 },
        "description": "",
        "name": "width",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.styles.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/combobox/src/Combobox.styles.ts",
    "description": "",
    "displayName": "menuStyle",
    "methods": [],
    "props": {
      "maxHeight": {
        "defaultValue": null,
        "description": "",
        "name": "maxHeight",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.styles.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": { "name": "number" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/combobox/src/Combobox.tsx",
    "description": "Component",
    "displayName": "Combobox",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Styling prop",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "placeholder": {
        "defaultValue": { "value": "Select" },
        "description": "A placeholder for the input element. Uses the native `placeholder` attribute.",
        "name": "placeholder",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "children": {
        "defaultValue": null,
        "description": "Defines the Combobox Options by passing children. Must be `ComboboxOption` or `ComboboxGroup`",
        "name": "children",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "ReactNode" }
      },
      "onChange": {
        "defaultValue": null,
        "description": "A callback called when the selection changes.\nCallback recieves a single argument that is the new selection, either string, or string array",
        "name": "onChange",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "ComboboxMultiselectProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "ComboboxMultiselectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "((value: string[]) => void) | ((value: string) => void)"
        }
      },
      "disabled": {
        "defaultValue": { "value": false },
        "description": "Disables all interaction with the component",
        "name": "disabled",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "size": {
        "defaultValue": { "value": "default" },
        "description": "Defines the visual size of the component",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "\"default\"" }
      },
      "darkMode": {
        "defaultValue": { "value": false },
        "description": "Toggles Dark Mode",
        "name": "darkMode",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "value": {
        "defaultValue": null,
        "description": "The controlled value of the Combobox.\nMust be a string (or array of strings) that matches the `value` prop of a `ComboboxOption`.\nChanging `value` after initial render _will_ affect the selection.\n`value` will always take precedence over `initialValue` if both are provided.",
        "name": "value",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "ComboboxMultiselectProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "ComboboxMultiselectProps"
          }
        ],
        "required": false,
        "type": { "name": "string | string[]" }
      },
      "description": {
        "defaultValue": null,
        "description": "A description for the input",
        "name": "description",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "usePortal": {
        "defaultValue": { "value": true },
        "description": "Specifies that the popover content should be rendered at the end of the DOM,\nrather than in the DOM tree.\n\ndefault: `true`",
        "name": "usePortal",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "portalClassName": {
        "defaultValue": null,
        "description": "When usePortal is `true`, specifies a class name to apply to the root element of the portal.",
        "name": "portalClassName",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "undefined" }
      },
      "portalContainer": {
        "defaultValue": null,
        "description": "When usePortal is `true`, specifies an element to portal within. The default behavior is to generate a div at the end of the document to render within.",
        "name": "portalContainer",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "null" }
      },
      "scrollContainer": {
        "defaultValue": null,
        "description": "When usePortal is `true`, specifies the scrollable element to position relative to.",
        "name": "scrollContainer",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "null" }
      },
      "popoverZIndex": {
        "defaultValue": null,
        "description": "Number that controls the z-index of the popover element directly.",
        "name": "popoverZIndex",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "overflow": {
        "defaultValue": { "value": "expand-y" },
        "description": "Defines the overflow behavior of a multiselect combobox.\n\n`expand-y`: Combobox has fixed width, and additional selections will cause the element to grow in the block direction.\n\n`expand-x`: Combobox has fixed height, and additional selections will cause the elemenet to grow in the inline direction.\n\n`scroll-x`: Combobox has fixed height and width, and additional selections will cause the element to be scrollable in the x (horizontal) direction.",
        "name": "overflow",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "ComboboxMultiselectProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "ComboboxMultiselectProps"
          }
        ],
        "required": false,
        "type": { "name": "Overflow" }
      },
      "state": {
        "defaultValue": { "value": "none" },
        "description": "The error state of the component. Defines whether the error message is displayed.",
        "name": "state",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "State" }
      },
      "errorMessage": {
        "defaultValue": null,
        "description": "The message shown below the input when state is `error`",
        "name": "errorMessage",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "searchState": {
        "defaultValue": { "value": "unset" },
        "description": "The state of search results. Toggles search messages within the menu.",
        "name": "searchState",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "SearchState" }
      },
      "searchEmptyMessage": {
        "defaultValue": { "value": "No results found" },
        "description": "A message shown within the menu when there are no options passed in as children, or `filteredOptions` is an empty array",
        "name": "searchEmptyMessage",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "searchErrorMessage": {
        "defaultValue": { "value": "Could not get results!" },
        "description": "A message shown within the menu when searchState is `error`",
        "name": "searchErrorMessage",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "searchLoadingMessage": {
        "defaultValue": { "value": "Loading results..." },
        "description": "A message shown within the menu when searchState is `loading`",
        "name": "searchLoadingMessage",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "onFilter": {
        "defaultValue": null,
        "description": "A callback called when the search input changes.\nRecieves a single argument that is the current input value.\nUse this callback to set `searchState` and/or `filteredOptions` appropriately",
        "name": "onFilter",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "(value: string) => void" }
      },
      "clearable": {
        "defaultValue": { "value": true },
        "description": "Defines whether the Clear button appears to the right of the input.",
        "name": "clearable",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "onClear": {
        "defaultValue": null,
        "description": "A callback fired when the Clear button is pressed.\nFired _after_ `onChange`, and _before_ `onFilter`",
        "name": "onClear",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(e: MouseEvent<HTMLButtonElement, MouseEvent>) => void"
        }
      },
      "filteredOptions": {
        "defaultValue": null,
        "description": "An array used to define which options are displayed.\nDo not remove options from the JSX children, as this will affect the selected options",
        "name": "filteredOptions",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "string[]" }
      },
      "chipTruncationLocation": {
        "defaultValue": null,
        "description": "Defines where the ellipses appear in a Chip when the length exceeds the `chipCharacterLimit`",
        "name": "chipTruncationLocation",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "TrunctationLocation" }
      },
      "chipCharacterLimit": {
        "defaultValue": { "value": 12 },
        "description": "Defined the character limit of a multiselect Chip before they start truncating.\nNote: the three ellipses dots are included in the character limit.",
        "name": "chipCharacterLimit",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "multiselect": {
        "defaultValue": { "value": "false as M" },
        "description": "Defines whether a user can select multiple options, or only a single option.\nWhen using TypeScript, `multiselect` affects the valid values of `initialValue`, `value`, and `onChange`",
        "name": "multiselect",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "ComboboxMultiselectProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "ComboboxMultiselectProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "initialValue": {
        "defaultValue": null,
        "description": "The initial selection.\nMust be a string (or array of strings) that matches the `value` prop of a `ComboboxOption`.\nChanging the `initialValue` after initial render will not change the selection.",
        "name": "initialValue",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "ComboboxMultiselectProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "ComboboxMultiselectProps"
          }
        ],
        "required": false,
        "type": { "name": "string | string[]" }
      },
      "aria-label": {
        "defaultValue": null,
        "description": "An accessible label for the input, used only for screen-readers",
        "name": "aria-label",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          },
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "label": {
        "defaultValue": null,
        "description": "An accessible label for the input, rendered in a <label> to the DOM",
        "name": "label",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          },
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/combobox/src/Combobox.types.ts",
    "description": "",
    "displayName": "getNullSelection",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/combobox/src/Combobox.types.ts",
    "description": "Prop Enums & Types",
    "displayName": "ComboboxSize",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/combobox/src/ComboboxGroup.tsx",
    "description": "",
    "displayName": "ComboboxGroup",
    "methods": [],
    "props": {
      "label": {
        "defaultValue": null,
        "description": "Label for the group of options",
        "name": "label",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "ComboboxGroupProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "ComboboxGroupProps"
          }
        ],
        "required": true,
        "type": { "name": "string" }
      },
      "children": {
        "defaultValue": null,
        "description": "Options in the group. Must be one or more `ComboboxOption` components",
        "name": "children",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "ComboboxGroupProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "ComboboxGroupProps"
          }
        ],
        "required": true,
        "type": { "name": "ReactNode" }
      },
      "className": {
        "defaultValue": null,
        "description": "Styling prop",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "ComboboxGroupProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "ComboboxGroupProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/combobox/src/ComboboxOption.tsx",
    "description": "",
    "displayName": "ComboboxOption",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Styling Prop",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxOptionProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxOptionProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "glyph": {
        "defaultValue": null,
        "description": "The icon to display to the left of the option in the menu.",
        "name": "glyph",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxOptionProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxOptionProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<any, string | JSXElementConstructor<any>>"
        }
      },
      "displayName": {
        "defaultValue": null,
        "description": "The display value of the option. Used as the rendered string within the menu and chips.\nWhen undefined, this is set to `value`",
        "name": "displayName",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxOptionProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxOptionProps"
          },
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxOptionProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "value": {
        "defaultValue": null,
        "description": "The internal value of the option. Used as the identifier in Combobox `initialValue`, value and filteredOptions.\nWhen undefined, this is set to `_.kebabCase(displayName)`",
        "name": "value",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxOptionProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxOptionProps"
          },
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxOptionProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {
      "param": "select `'single' | 'multiple'`\nprops `renderComboboxProps`",
      "returns": "Object of combobox elements & utility functions"
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/combobox/src/ComboboxTestUtils.tsx",
    "description": "Renders a combobox",
    "displayName": "renderCombobox",
    "methods": [],
    "props": {}
  },
  {
    "tags": { "param": "props Combobox props", "returns": "Combobox JSX" },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/combobox/src/ComboboxTestUtils.tsx",
    "description": "",
    "displayName": "getComboboxJSX",
    "methods": [],
    "props": {
      "options": {
        "defaultValue": null,
        "description": "",
        "name": "options",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/ComboboxTestUtils.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "(string | OptionObject | NestedObject)[]" }
      },
      "children": {
        "defaultValue": null,
        "description": "Defines the Combobox Options by passing children. Must be `ComboboxOption` or `ComboboxGroup`",
        "name": "children",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "ReactNode" }
      },
      "label": {
        "defaultValue": null,
        "description": "An accessible label for the input, rendered in a <label> to the DOM",
        "name": "label",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "aria-label": {
        "defaultValue": null,
        "description": "An accessible label for the input, used only for screen-readers",
        "name": "aria-label",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "description": {
        "defaultValue": null,
        "description": "A description for the input",
        "name": "description",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "placeholder": {
        "defaultValue": null,
        "description": "A placeholder for the input element. Uses the native `placeholder` attribute.",
        "name": "placeholder",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disables all interaction with the component",
        "name": "disabled",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "size": {
        "defaultValue": null,
        "description": "Defines the visual size of the component",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "\"default\"" }
      },
      "darkMode": {
        "defaultValue": null,
        "description": "Toggles Dark Mode",
        "name": "darkMode",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "state": {
        "defaultValue": null,
        "description": "The error state of the component. Defines whether the error message is displayed.",
        "name": "state",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "State" }
      },
      "errorMessage": {
        "defaultValue": null,
        "description": "The message shown below the input when state is `error`",
        "name": "errorMessage",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "searchState": {
        "defaultValue": null,
        "description": "The state of search results. Toggles search messages within the menu.",
        "name": "searchState",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "SearchState" }
      },
      "searchEmptyMessage": {
        "defaultValue": null,
        "description": "A message shown within the menu when there are no options passed in as children, or `filteredOptions` is an empty array",
        "name": "searchEmptyMessage",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "searchErrorMessage": {
        "defaultValue": null,
        "description": "A message shown within the menu when searchState is `error`",
        "name": "searchErrorMessage",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "searchLoadingMessage": {
        "defaultValue": null,
        "description": "A message shown within the menu when searchState is `loading`",
        "name": "searchLoadingMessage",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "onFilter": {
        "defaultValue": null,
        "description": "A callback called when the search input changes.\nRecieves a single argument that is the current input value.\nUse this callback to set `searchState` and/or `filteredOptions` appropriately",
        "name": "onFilter",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "(value: string) => void" }
      },
      "clearable": {
        "defaultValue": null,
        "description": "Defines whether the Clear button appears to the right of the input.",
        "name": "clearable",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "onClear": {
        "defaultValue": null,
        "description": "A callback fired when the Clear button is pressed.\nFired _after_ `onChange`, and _before_ `onFilter`",
        "name": "onClear",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(e: MouseEvent<HTMLButtonElement, MouseEvent>) => void"
        }
      },
      "filteredOptions": {
        "defaultValue": null,
        "description": "An array used to define which options are displayed.\nDo not remove options from the JSX children, as this will affect the selected options",
        "name": "filteredOptions",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "string[]" }
      },
      "chipTruncationLocation": {
        "defaultValue": null,
        "description": "Defines where the ellipses appear in a Chip when the length exceeds the `chipCharacterLimit`",
        "name": "chipTruncationLocation",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "TrunctationLocation" }
      },
      "chipCharacterLimit": {
        "defaultValue": null,
        "description": "Defined the character limit of a multiselect Chip before they start truncating.\nNote: the three ellipses dots are included in the character limit.",
        "name": "chipCharacterLimit",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "className": {
        "defaultValue": null,
        "description": "Styling prop",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "usePortal": {
        "defaultValue": null,
        "description": "Specifies that the popover content should be rendered at the end of the DOM,\nrather than in the DOM tree.\n\ndefault: `true`",
        "name": "usePortal",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "portalClassName": {
        "defaultValue": null,
        "description": "When usePortal is `true`, specifies a class name to apply to the root element of the portal.",
        "name": "portalClassName",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "undefined" }
      },
      "portalContainer": {
        "defaultValue": null,
        "description": "When usePortal is `true`, specifies an element to portal within. The default behavior is to generate a div at the end of the document to render within.",
        "name": "portalContainer",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "null" }
      },
      "scrollContainer": {
        "defaultValue": null,
        "description": "When usePortal is `true`, specifies the scrollable element to position relative to.",
        "name": "scrollContainer",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "null" }
      },
      "popoverZIndex": {
        "defaultValue": null,
        "description": "Number that controls the z-index of the popover element directly.",
        "name": "popoverZIndex",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "multiselect": {
        "defaultValue": null,
        "description": "Defines whether a user can select multiple options, or only a single option.\nWhen using TypeScript, `multiselect` affects the valid values of `initialValue`, `value`, and `onChange`",
        "name": "multiselect",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "ComboboxMultiselectProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "ComboboxMultiselectProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "initialValue": {
        "defaultValue": null,
        "description": "The initial selection.\nMust be a string (or array of strings) that matches the `value` prop of a `ComboboxOption`.\nChanging the `initialValue` after initial render will not change the selection.",
        "name": "initialValue",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "ComboboxMultiselectProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "ComboboxMultiselectProps"
          }
        ],
        "required": false,
        "type": { "name": "string | string[]" }
      },
      "onChange": {
        "defaultValue": null,
        "description": "A callback called when the selection changes.\nCallback recieves a single argument that is the new selection, either string, or string array",
        "name": "onChange",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "ComboboxMultiselectProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "ComboboxMultiselectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "((value: string[]) => void) | ((value: string) => void)"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "The controlled value of the Combobox.\nMust be a string (or array of strings) that matches the `value` prop of a `ComboboxOption`.\nChanging `value` after initial render _will_ affect the selection.\n`value` will always take precedence over `initialValue` if both are provided.",
        "name": "value",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "ComboboxMultiselectProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "ComboboxMultiselectProps"
          }
        ],
        "required": false,
        "type": { "name": "string | string[]" }
      },
      "overflow": {
        "defaultValue": null,
        "description": "Defines the overflow behavior of a multiselect combobox.\n\n`expand-y`: Combobox has fixed width, and additional selections will cause the element to grow in the block direction.\n\n`expand-x`: Combobox has fixed height, and additional selections will cause the elemenet to grow in the inline direction.\n\n`scroll-x`: Combobox has fixed height and width, and additional selections will cause the element to be scrollable in the x (horizontal) direction.",
        "name": "overflow",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "ComboboxMultiselectProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "ComboboxMultiselectProps"
          }
        ],
        "required": false,
        "type": { "name": "Overflow" }
      }
    }
  },
  {
    "tags": { "param": "condition", "returns": "`test`" },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/combobox/src/ComboboxTestUtils.tsx",
    "description": "Conditionally runs a test",
    "displayName": "testif",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/combobox/src/index.ts",
    "description": "Component",
    "displayName": "src",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Styling prop",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "placeholder": {
        "defaultValue": { "value": "Select" },
        "description": "A placeholder for the input element. Uses the native `placeholder` attribute.",
        "name": "placeholder",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "children": {
        "defaultValue": null,
        "description": "Defines the Combobox Options by passing children. Must be `ComboboxOption` or `ComboboxGroup`",
        "name": "children",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "ReactNode" }
      },
      "onChange": {
        "defaultValue": null,
        "description": "A callback called when the selection changes.\nCallback recieves a single argument that is the new selection, either string, or string array",
        "name": "onChange",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "ComboboxMultiselectProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "ComboboxMultiselectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "((value: string[]) => void) | ((value: string) => void)"
        }
      },
      "disabled": {
        "defaultValue": { "value": false },
        "description": "Disables all interaction with the component",
        "name": "disabled",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "size": {
        "defaultValue": { "value": "default" },
        "description": "Defines the visual size of the component",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "\"default\"" }
      },
      "darkMode": {
        "defaultValue": { "value": false },
        "description": "Toggles Dark Mode",
        "name": "darkMode",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "value": {
        "defaultValue": null,
        "description": "The controlled value of the Combobox.\nMust be a string (or array of strings) that matches the `value` prop of a `ComboboxOption`.\nChanging `value` after initial render _will_ affect the selection.\n`value` will always take precedence over `initialValue` if both are provided.",
        "name": "value",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "ComboboxMultiselectProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "ComboboxMultiselectProps"
          }
        ],
        "required": false,
        "type": { "name": "string | string[]" }
      },
      "description": {
        "defaultValue": null,
        "description": "A description for the input",
        "name": "description",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "usePortal": {
        "defaultValue": { "value": true },
        "description": "Specifies that the popover content should be rendered at the end of the DOM,\nrather than in the DOM tree.\n\ndefault: `true`",
        "name": "usePortal",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "portalClassName": {
        "defaultValue": null,
        "description": "When usePortal is `true`, specifies a class name to apply to the root element of the portal.",
        "name": "portalClassName",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "undefined" }
      },
      "portalContainer": {
        "defaultValue": null,
        "description": "When usePortal is `true`, specifies an element to portal within. The default behavior is to generate a div at the end of the document to render within.",
        "name": "portalContainer",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "null" }
      },
      "scrollContainer": {
        "defaultValue": null,
        "description": "When usePortal is `true`, specifies the scrollable element to position relative to.",
        "name": "scrollContainer",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "null" }
      },
      "popoverZIndex": {
        "defaultValue": null,
        "description": "Number that controls the z-index of the popover element directly.",
        "name": "popoverZIndex",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "overflow": {
        "defaultValue": { "value": "expand-y" },
        "description": "Defines the overflow behavior of a multiselect combobox.\n\n`expand-y`: Combobox has fixed width, and additional selections will cause the element to grow in the block direction.\n\n`expand-x`: Combobox has fixed height, and additional selections will cause the elemenet to grow in the inline direction.\n\n`scroll-x`: Combobox has fixed height and width, and additional selections will cause the element to be scrollable in the x (horizontal) direction.",
        "name": "overflow",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "ComboboxMultiselectProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "ComboboxMultiselectProps"
          }
        ],
        "required": false,
        "type": { "name": "Overflow" }
      },
      "state": {
        "defaultValue": { "value": "none" },
        "description": "The error state of the component. Defines whether the error message is displayed.",
        "name": "state",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "State" }
      },
      "errorMessage": {
        "defaultValue": null,
        "description": "The message shown below the input when state is `error`",
        "name": "errorMessage",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "searchState": {
        "defaultValue": { "value": "unset" },
        "description": "The state of search results. Toggles search messages within the menu.",
        "name": "searchState",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "SearchState" }
      },
      "searchEmptyMessage": {
        "defaultValue": { "value": "No results found" },
        "description": "A message shown within the menu when there are no options passed in as children, or `filteredOptions` is an empty array",
        "name": "searchEmptyMessage",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "searchErrorMessage": {
        "defaultValue": { "value": "Could not get results!" },
        "description": "A message shown within the menu when searchState is `error`",
        "name": "searchErrorMessage",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "searchLoadingMessage": {
        "defaultValue": { "value": "Loading results..." },
        "description": "A message shown within the menu when searchState is `loading`",
        "name": "searchLoadingMessage",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "onFilter": {
        "defaultValue": null,
        "description": "A callback called when the search input changes.\nRecieves a single argument that is the current input value.\nUse this callback to set `searchState` and/or `filteredOptions` appropriately",
        "name": "onFilter",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "(value: string) => void" }
      },
      "clearable": {
        "defaultValue": { "value": true },
        "description": "Defines whether the Clear button appears to the right of the input.",
        "name": "clearable",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "onClear": {
        "defaultValue": null,
        "description": "A callback fired when the Clear button is pressed.\nFired _after_ `onChange`, and _before_ `onFilter`",
        "name": "onClear",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(e: MouseEvent<HTMLButtonElement, MouseEvent>) => void"
        }
      },
      "filteredOptions": {
        "defaultValue": null,
        "description": "An array used to define which options are displayed.\nDo not remove options from the JSX children, as this will affect the selected options",
        "name": "filteredOptions",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "string[]" }
      },
      "chipTruncationLocation": {
        "defaultValue": null,
        "description": "Defines where the ellipses appear in a Chip when the length exceeds the `chipCharacterLimit`",
        "name": "chipTruncationLocation",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "TrunctationLocation" }
      },
      "chipCharacterLimit": {
        "defaultValue": { "value": 12 },
        "description": "Defined the character limit of a multiselect Chip before they start truncating.\nNote: the three ellipses dots are included in the character limit.",
        "name": "chipCharacterLimit",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "multiselect": {
        "defaultValue": { "value": "false as M" },
        "description": "Defines whether a user can select multiple options, or only a single option.\nWhen using TypeScript, `multiselect` affects the valid values of `initialValue`, `value`, and `onChange`",
        "name": "multiselect",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "ComboboxMultiselectProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "ComboboxMultiselectProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "initialValue": {
        "defaultValue": null,
        "description": "The initial selection.\nMust be a string (or array of strings) that matches the `value` prop of a `ComboboxOption`.\nChanging the `initialValue` after initial render will not change the selection.",
        "name": "initialValue",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "ComboboxMultiselectProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "ComboboxMultiselectProps"
          }
        ],
        "required": false,
        "type": { "name": "string | string[]" }
      },
      "aria-label": {
        "defaultValue": null,
        "description": "An accessible label for the input, used only for screen-readers",
        "name": "aria-label",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          },
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "label": {
        "defaultValue": null,
        "description": "An accessible label for the input, rendered in a <label> to the DOM",
        "name": "label",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          },
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": { "param": "str\nwrap\nelement", "returns": "`JSX.Element`" },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/combobox/src/util.tsx",
    "description": "\nWraps every instance of `wrap` found in `str` in the provided `element`.\n\nE.g. `wrapJSX('Apple', 'ap', 'em') => <em>Ap</em>ple`",
    "displayName": "wrapJSX",
    "methods": [],
    "props": {}
  },
  {
    "tags": { "property": "value: string\ndisplayName: string" },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/combobox/src/util.tsx",
    "description": "\nReturns an object with properties `value` & `displayName`\nbased on the props provided",
    "displayName": "getNameAndValue",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Styling Prop",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxOptionProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxOptionProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "glyph": {
        "defaultValue": null,
        "description": "The icon to display to the left of the option in the menu.",
        "name": "glyph",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxOptionProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxOptionProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<any, string | JSXElementConstructor<any>>"
        }
      },
      "displayName": {
        "defaultValue": null,
        "description": "The display value of the option. Used as the rendered string within the menu and chips.\nWhen undefined, this is set to `value`",
        "name": "displayName",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxOptionProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxOptionProps"
          },
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxOptionProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "value": {
        "defaultValue": null,
        "description": "The internal value of the option. Used as the identifier in Combobox `initialValue`, value and filteredOptions.\nWhen undefined, this is set to `_.kebabCase(displayName)`",
        "name": "value",
        "parent": {
          "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
          "name": "BaseComboboxOptionProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxOptionProps"
          },
          {
            "fileName": "leafygreen-ui/packages/combobox/src/Combobox.types.ts",
            "name": "BaseComboboxOptionProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": { "param": "_children", "returns": "`Array<OptionObject>`" },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/combobox/src/util.tsx",
    "description": "\nFlattens multiple nested ComboboxOptions into a 1D array",
    "displayName": "flattenChildren",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/confirmation-modal/src/ConfirmationModal.tsx",
    "description": "",
    "displayName": "ConfirmationModal",
    "methods": [],
    "props": {
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/confirmation-modal/src/ConfirmationModal.tsx",
          "name": "ConfirmationModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/confirmation-modal/src/ConfirmationModal.tsx",
            "name": "ConfirmationModalProps"
          }
        ],
        "required": true,
        "type": { "name": "string" }
      },
      "open": {
        "defaultValue": null,
        "description": "",
        "name": "open",
        "parent": {
          "fileName": "leafygreen-ui/packages/confirmation-modal/src/ConfirmationModal.tsx",
          "name": "ConfirmationModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/confirmation-modal/src/ConfirmationModal.tsx",
            "name": "ConfirmationModalProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "onConfirm": {
        "defaultValue": null,
        "description": "",
        "name": "onConfirm",
        "parent": {
          "fileName": "leafygreen-ui/packages/confirmation-modal/src/ConfirmationModal.tsx",
          "name": "ConfirmationModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/confirmation-modal/src/ConfirmationModal.tsx",
            "name": "ConfirmationModalProps"
          }
        ],
        "required": false,
        "type": { "name": "() => void" }
      },
      "onCancel": {
        "defaultValue": null,
        "description": "",
        "name": "onCancel",
        "parent": {
          "fileName": "leafygreen-ui/packages/confirmation-modal/src/ConfirmationModal.tsx",
          "name": "ConfirmationModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/confirmation-modal/src/ConfirmationModal.tsx",
            "name": "ConfirmationModalProps"
          }
        ],
        "required": false,
        "type": { "name": "() => void" }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/confirmation-modal/src/ConfirmationModal.tsx",
          "name": "ConfirmationModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/confirmation-modal/src/ConfirmationModal.tsx",
            "name": "ConfirmationModalProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "buttonText": {
        "defaultValue": null,
        "description": "",
        "name": "buttonText",
        "parent": {
          "fileName": "leafygreen-ui/packages/confirmation-modal/src/ConfirmationModal.tsx",
          "name": "ConfirmationModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/confirmation-modal/src/ConfirmationModal.tsx",
            "name": "ConfirmationModalProps"
          }
        ],
        "required": true,
        "type": { "name": "string" }
      },
      "variant": {
        "defaultValue": { "value": "ButtonVariant.Primary" },
        "description": "",
        "name": "variant",
        "parent": {
          "fileName": "leafygreen-ui/packages/confirmation-modal/src/ConfirmationModal.tsx",
          "name": "ConfirmationModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/confirmation-modal/src/ConfirmationModal.tsx",
            "name": "ConfirmationModalProps"
          }
        ],
        "required": false,
        "type": { "name": "Variant" }
      },
      "requiredInputText": {
        "defaultValue": null,
        "description": "",
        "name": "requiredInputText",
        "parent": {
          "fileName": "leafygreen-ui/packages/confirmation-modal/src/ConfirmationModal.tsx",
          "name": "ConfirmationModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/confirmation-modal/src/ConfirmationModal.tsx",
            "name": "ConfirmationModalProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "submitDisabled": {
        "defaultValue": { "value": false },
        "description": "",
        "name": "submitDisabled",
        "parent": {
          "fileName": "leafygreen-ui/packages/confirmation-modal/src/ConfirmationModal.tsx",
          "name": "ConfirmationModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/confirmation-modal/src/ConfirmationModal.tsx",
            "name": "ConfirmationModalProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "darkMode": {
        "defaultValue": null,
        "description": "",
        "name": "darkMode",
        "parent": {
          "fileName": "leafygreen-ui/packages/confirmation-modal/src/ConfirmationModal.tsx",
          "name": "ConfirmationModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/confirmation-modal/src/ConfirmationModal.tsx",
            "name": "ConfirmationModalProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/confirmation-modal/src/index.ts",
    "description": "",
    "displayName": "src",
    "methods": [],
    "props": {
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/confirmation-modal/src/ConfirmationModal.tsx",
          "name": "ConfirmationModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/confirmation-modal/src/ConfirmationModal.tsx",
            "name": "ConfirmationModalProps"
          }
        ],
        "required": true,
        "type": { "name": "string" }
      },
      "open": {
        "defaultValue": null,
        "description": "",
        "name": "open",
        "parent": {
          "fileName": "leafygreen-ui/packages/confirmation-modal/src/ConfirmationModal.tsx",
          "name": "ConfirmationModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/confirmation-modal/src/ConfirmationModal.tsx",
            "name": "ConfirmationModalProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "onConfirm": {
        "defaultValue": null,
        "description": "",
        "name": "onConfirm",
        "parent": {
          "fileName": "leafygreen-ui/packages/confirmation-modal/src/ConfirmationModal.tsx",
          "name": "ConfirmationModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/confirmation-modal/src/ConfirmationModal.tsx",
            "name": "ConfirmationModalProps"
          }
        ],
        "required": false,
        "type": { "name": "() => void" }
      },
      "onCancel": {
        "defaultValue": null,
        "description": "",
        "name": "onCancel",
        "parent": {
          "fileName": "leafygreen-ui/packages/confirmation-modal/src/ConfirmationModal.tsx",
          "name": "ConfirmationModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/confirmation-modal/src/ConfirmationModal.tsx",
            "name": "ConfirmationModalProps"
          }
        ],
        "required": false,
        "type": { "name": "() => void" }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/confirmation-modal/src/ConfirmationModal.tsx",
          "name": "ConfirmationModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/confirmation-modal/src/ConfirmationModal.tsx",
            "name": "ConfirmationModalProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "buttonText": {
        "defaultValue": null,
        "description": "",
        "name": "buttonText",
        "parent": {
          "fileName": "leafygreen-ui/packages/confirmation-modal/src/ConfirmationModal.tsx",
          "name": "ConfirmationModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/confirmation-modal/src/ConfirmationModal.tsx",
            "name": "ConfirmationModalProps"
          }
        ],
        "required": true,
        "type": { "name": "string" }
      },
      "variant": {
        "defaultValue": { "value": "ButtonVariant.Primary" },
        "description": "",
        "name": "variant",
        "parent": {
          "fileName": "leafygreen-ui/packages/confirmation-modal/src/ConfirmationModal.tsx",
          "name": "ConfirmationModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/confirmation-modal/src/ConfirmationModal.tsx",
            "name": "ConfirmationModalProps"
          }
        ],
        "required": false,
        "type": { "name": "Variant" }
      },
      "requiredInputText": {
        "defaultValue": null,
        "description": "",
        "name": "requiredInputText",
        "parent": {
          "fileName": "leafygreen-ui/packages/confirmation-modal/src/ConfirmationModal.tsx",
          "name": "ConfirmationModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/confirmation-modal/src/ConfirmationModal.tsx",
            "name": "ConfirmationModalProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "submitDisabled": {
        "defaultValue": { "value": false },
        "description": "",
        "name": "submitDisabled",
        "parent": {
          "fileName": "leafygreen-ui/packages/confirmation-modal/src/ConfirmationModal.tsx",
          "name": "ConfirmationModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/confirmation-modal/src/ConfirmationModal.tsx",
            "name": "ConfirmationModalProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "darkMode": {
        "defaultValue": null,
        "description": "",
        "name": "darkMode",
        "parent": {
          "fileName": "leafygreen-ui/packages/confirmation-modal/src/ConfirmationModal.tsx",
          "name": "ConfirmationModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/confirmation-modal/src/ConfirmationModal.tsx",
            "name": "ConfirmationModalProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/copyable/src/Copyable.tsx",
    "description": "",
    "displayName": "Copyable",
    "methods": [],
    "props": {
      "darkMode": {
        "defaultValue": { "value": false },
        "description": "",
        "name": "darkMode",
        "parent": {
          "fileName": "leafygreen-ui/packages/copyable/src/Copyable.tsx",
          "name": "CopyableProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/copyable/src/Copyable.tsx",
            "name": "CopyableProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "label": {
        "defaultValue": null,
        "description": "",
        "name": "label",
        "parent": {
          "fileName": "leafygreen-ui/packages/copyable/src/Copyable.tsx",
          "name": "CopyableProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/copyable/src/Copyable.tsx",
            "name": "CopyableProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "description": {
        "defaultValue": null,
        "description": "",
        "name": "description",
        "parent": {
          "fileName": "leafygreen-ui/packages/copyable/src/Copyable.tsx",
          "name": "CopyableProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/copyable/src/Copyable.tsx",
            "name": "CopyableProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/copyable/src/Copyable.tsx",
          "name": "CopyableProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/copyable/src/Copyable.tsx",
            "name": "CopyableProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "copyable": {
        "defaultValue": { "value": true },
        "description": "",
        "name": "copyable",
        "parent": {
          "fileName": "leafygreen-ui/packages/copyable/src/Copyable.tsx",
          "name": "CopyableProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/copyable/src/Copyable.tsx",
            "name": "CopyableProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "size": {
        "defaultValue": { "value": "default" },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/copyable/src/Copyable.tsx",
          "name": "CopyableProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/copyable/src/Copyable.tsx",
            "name": "CopyableProps"
          }
        ],
        "required": false,
        "type": { "name": "Size" }
      },
      "shouldTooltipUsePortal": {
        "defaultValue": { "value": true },
        "description": "",
        "name": "shouldTooltipUsePortal",
        "parent": {
          "fileName": "leafygreen-ui/packages/copyable/src/Copyable.tsx",
          "name": "CopyableProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/copyable/src/Copyable.tsx",
            "name": "CopyableProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/copyable/src/index.ts",
    "description": "",
    "displayName": "src",
    "methods": [],
    "props": {
      "darkMode": {
        "defaultValue": { "value": false },
        "description": "",
        "name": "darkMode",
        "parent": {
          "fileName": "leafygreen-ui/packages/copyable/src/Copyable.tsx",
          "name": "CopyableProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/copyable/src/Copyable.tsx",
            "name": "CopyableProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "label": {
        "defaultValue": null,
        "description": "",
        "name": "label",
        "parent": {
          "fileName": "leafygreen-ui/packages/copyable/src/Copyable.tsx",
          "name": "CopyableProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/copyable/src/Copyable.tsx",
            "name": "CopyableProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "description": {
        "defaultValue": null,
        "description": "",
        "name": "description",
        "parent": {
          "fileName": "leafygreen-ui/packages/copyable/src/Copyable.tsx",
          "name": "CopyableProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/copyable/src/Copyable.tsx",
            "name": "CopyableProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/copyable/src/Copyable.tsx",
          "name": "CopyableProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/copyable/src/Copyable.tsx",
            "name": "CopyableProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "copyable": {
        "defaultValue": { "value": true },
        "description": "",
        "name": "copyable",
        "parent": {
          "fileName": "leafygreen-ui/packages/copyable/src/Copyable.tsx",
          "name": "CopyableProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/copyable/src/Copyable.tsx",
            "name": "CopyableProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "size": {
        "defaultValue": { "value": "default" },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/copyable/src/Copyable.tsx",
          "name": "CopyableProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/copyable/src/Copyable.tsx",
            "name": "CopyableProps"
          }
        ],
        "required": false,
        "type": { "name": "Size" }
      },
      "shouldTooltipUsePortal": {
        "defaultValue": { "value": true },
        "description": "",
        "name": "shouldTooltipUsePortal",
        "parent": {
          "fileName": "leafygreen-ui/packages/copyable/src/Copyable.tsx",
          "name": "CopyableProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/copyable/src/Copyable.tsx",
            "name": "CopyableProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/emotion/src/index.ts",
    "description": "",
    "displayName": "hydrate",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/emotion/src/index.ts",
    "description": "",
    "displayName": "cx",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/emotion/src/index.ts",
    "description": "",
    "displayName": "merge",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/emotion/src/index.ts",
    "description": "",
    "displayName": "injectGlobal",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/emotion/src/index.ts",
    "description": "",
    "displayName": "keyframes",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/emotion/src/index.ts",
    "description": "",
    "displayName": "css",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/emotion/src/index.ts",
    "description": "",
    "displayName": "extractCritical",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/emotion/src/index.ts",
    "description": "",
    "displayName": "renderStylesToString",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/expandable-card/src/ExpandableCard.tsx",
    "description": "Conponent",
    "displayName": "ExpandableCard",
    "methods": [],
    "props": {
      "title": {
        "defaultValue": null,
        "description": "The title of the card",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/expandable-card/src/ExpandableCard.tsx",
          "name": "ExpandableCardProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/expandable-card/src/ExpandableCard.tsx",
            "name": "ExpandableCardProps"
          }
        ],
        "required": true,
        "type": { "name": "string" }
      },
      "description": {
        "defaultValue": null,
        "description": "Description text below the title",
        "name": "description",
        "parent": {
          "fileName": "leafygreen-ui/packages/expandable-card/src/ExpandableCard.tsx",
          "name": "ExpandableCardProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/expandable-card/src/ExpandableCard.tsx",
            "name": "ExpandableCardProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "flagText": {
        "defaultValue": null,
        "description": "Text in parentheses immediately following the title. Typically 'optional' or 'required'",
        "name": "flagText",
        "parent": {
          "fileName": "leafygreen-ui/packages/expandable-card/src/ExpandableCard.tsx",
          "name": "ExpandableCardProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/expandable-card/src/ExpandableCard.tsx",
            "name": "ExpandableCardProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "darkMode": {
        "defaultValue": { "value": false },
        "description": "Toggles dark mode",
        "name": "darkMode",
        "parent": {
          "fileName": "leafygreen-ui/packages/expandable-card/src/ExpandableCard.tsx",
          "name": "ExpandableCardProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/expandable-card/src/ExpandableCard.tsx",
            "name": "ExpandableCardProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "defaultOpen": {
        "defaultValue": { "value": false },
        "description": "Defines the default state of the card",
        "name": "defaultOpen",
        "parent": {
          "fileName": "leafygreen-ui/packages/expandable-card/src/ExpandableCard.tsx",
          "name": "ExpandableCardProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/expandable-card/src/ExpandableCard.tsx",
            "name": "ExpandableCardProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "isOpen": {
        "defaultValue": null,
        "description": "Forces the card state",
        "name": "isOpen",
        "parent": {
          "fileName": "leafygreen-ui/packages/expandable-card/src/ExpandableCard.tsx",
          "name": "ExpandableCardProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/expandable-card/src/ExpandableCard.tsx",
            "name": "ExpandableCardProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "onClick": {
        "defaultValue": null,
        "description": "Callback fired when a user clicks the card header",
        "name": "onClick",
        "parent": {
          "fileName": "leafygreen-ui/packages/expandable-card/src/ExpandableCard.tsx",
          "name": "ExpandableCardProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/expandable-card/src/ExpandableCard.tsx",
            "name": "ExpandableCardProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: React.SyntheticEvent<HTMLDivElement, MouseEvent | KeyboardEvent>) => void"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Unique id for the card",
        "name": "id",
        "parent": {
          "fileName": "leafygreen-ui/packages/expandable-card/src/ExpandableCard.tsx",
          "name": "ExpandableCardProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/expandable-card/src/ExpandableCard.tsx",
            "name": "ExpandableCardProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "className": {
        "defaultValue": null,
        "description": "Styling prop",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/expandable-card/src/ExpandableCard.tsx",
          "name": "ExpandableCardProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/expandable-card/src/ExpandableCard.tsx",
            "name": "ExpandableCardProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "contentClassName": {
        "defaultValue": null,
        "description": "Styling prop for children",
        "name": "contentClassName",
        "parent": {
          "fileName": "leafygreen-ui/packages/expandable-card/src/ExpandableCard.tsx",
          "name": "ExpandableCardProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/expandable-card/src/ExpandableCard.tsx",
            "name": "ExpandableCardProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "children": {
        "defaultValue": null,
        "description": "Component children",
        "name": "children",
        "parent": {
          "fileName": "leafygreen-ui/packages/expandable-card/src/ExpandableCard.tsx",
          "name": "ExpandableCardProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/expandable-card/src/ExpandableCard.tsx",
            "name": "ExpandableCardProps"
          }
        ],
        "required": false,
        "type": { "name": "React.ReactNode" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/expandable-card/src/index.ts",
    "description": "Conponent",
    "displayName": "src",
    "methods": [],
    "props": {
      "title": {
        "defaultValue": null,
        "description": "The title of the card",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/expandable-card/src/ExpandableCard.tsx",
          "name": "ExpandableCardProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/expandable-card/src/ExpandableCard.tsx",
            "name": "ExpandableCardProps"
          }
        ],
        "required": true,
        "type": { "name": "string" }
      },
      "description": {
        "defaultValue": null,
        "description": "Description text below the title",
        "name": "description",
        "parent": {
          "fileName": "leafygreen-ui/packages/expandable-card/src/ExpandableCard.tsx",
          "name": "ExpandableCardProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/expandable-card/src/ExpandableCard.tsx",
            "name": "ExpandableCardProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "flagText": {
        "defaultValue": null,
        "description": "Text in parentheses immediately following the title. Typically 'optional' or 'required'",
        "name": "flagText",
        "parent": {
          "fileName": "leafygreen-ui/packages/expandable-card/src/ExpandableCard.tsx",
          "name": "ExpandableCardProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/expandable-card/src/ExpandableCard.tsx",
            "name": "ExpandableCardProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "darkMode": {
        "defaultValue": { "value": false },
        "description": "Toggles dark mode",
        "name": "darkMode",
        "parent": {
          "fileName": "leafygreen-ui/packages/expandable-card/src/ExpandableCard.tsx",
          "name": "ExpandableCardProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/expandable-card/src/ExpandableCard.tsx",
            "name": "ExpandableCardProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "defaultOpen": {
        "defaultValue": { "value": false },
        "description": "Defines the default state of the card",
        "name": "defaultOpen",
        "parent": {
          "fileName": "leafygreen-ui/packages/expandable-card/src/ExpandableCard.tsx",
          "name": "ExpandableCardProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/expandable-card/src/ExpandableCard.tsx",
            "name": "ExpandableCardProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "isOpen": {
        "defaultValue": null,
        "description": "Forces the card state",
        "name": "isOpen",
        "parent": {
          "fileName": "leafygreen-ui/packages/expandable-card/src/ExpandableCard.tsx",
          "name": "ExpandableCardProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/expandable-card/src/ExpandableCard.tsx",
            "name": "ExpandableCardProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "onClick": {
        "defaultValue": null,
        "description": "Callback fired when a user clicks the card header",
        "name": "onClick",
        "parent": {
          "fileName": "leafygreen-ui/packages/expandable-card/src/ExpandableCard.tsx",
          "name": "ExpandableCardProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/expandable-card/src/ExpandableCard.tsx",
            "name": "ExpandableCardProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: React.SyntheticEvent<HTMLDivElement, MouseEvent | KeyboardEvent>) => void"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Unique id for the card",
        "name": "id",
        "parent": {
          "fileName": "leafygreen-ui/packages/expandable-card/src/ExpandableCard.tsx",
          "name": "ExpandableCardProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/expandable-card/src/ExpandableCard.tsx",
            "name": "ExpandableCardProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "className": {
        "defaultValue": null,
        "description": "Styling prop",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/expandable-card/src/ExpandableCard.tsx",
          "name": "ExpandableCardProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/expandable-card/src/ExpandableCard.tsx",
            "name": "ExpandableCardProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "contentClassName": {
        "defaultValue": null,
        "description": "Styling prop for children",
        "name": "contentClassName",
        "parent": {
          "fileName": "leafygreen-ui/packages/expandable-card/src/ExpandableCard.tsx",
          "name": "ExpandableCardProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/expandable-card/src/ExpandableCard.tsx",
            "name": "ExpandableCardProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "children": {
        "defaultValue": null,
        "description": "Component children",
        "name": "children",
        "parent": {
          "fileName": "leafygreen-ui/packages/expandable-card/src/ExpandableCard.tsx",
          "name": "ExpandableCardProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/expandable-card/src/ExpandableCard.tsx",
            "name": "ExpandableCardProps"
          }
        ],
        "required": false,
        "type": { "name": "React.ReactNode" }
      }
    }
  },
  {
    "tags": { "param": "effect" },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/expandable-card/src/useEffectOnceOnMount.tsx",
    "description": "Runs an effect on the first render only",
    "displayName": "useEffectOnceOnMount",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/form-footer/src/FormFooter.tsx",
    "description": "Component",
    "displayName": "FormFooter",
    "methods": [],
    "props": {
      "primaryButton": {
        "defaultValue": null,
        "description": "The primary (right-most) button. Defined as a <Button> element, or as an object with the shape:\n\n```ts\ninterface PrimaryButtonProps {\n text: string;\n onClick?: React.MouseEventHandler<HTMLButtonElement>;\n variant?: 'primary' | 'danger';\n disabled?: boolean;\n type?: 'button' | 'submit';\n}\n```",
        "name": "primaryButton",
        "parent": {
          "fileName": "leafygreen-ui/packages/form-footer/src/FormFooter.tsx",
          "name": "FormFooterProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/form-footer/src/FormFooter.tsx",
            "name": "FormFooterProps"
          }
        ],
        "required": false,
        "type": { "name": "any" }
      },
      "cancelButtonText": {
        "defaultValue": { "value": "Cancel" },
        "description": "Text for the cancel button. A cancel button will only appear if this text is defined.",
        "name": "cancelButtonText",
        "parent": {
          "fileName": "leafygreen-ui/packages/form-footer/src/FormFooter.tsx",
          "name": "FormFooterProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/form-footer/src/FormFooter.tsx",
            "name": "FormFooterProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "onCancel": {
        "defaultValue": null,
        "description": "onClick callback for the cancel button",
        "name": "onCancel",
        "parent": {
          "fileName": "leafygreen-ui/packages/form-footer/src/FormFooter.tsx",
          "name": "FormFooterProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/form-footer/src/FormFooter.tsx",
            "name": "FormFooterProps"
          }
        ],
        "required": false,
        "type": { "name": "React.MouseEventHandler<HTMLButtonElement>" }
      },
      "backButtonText": {
        "defaultValue": null,
        "description": "Text for the back button. A back button will only appear if text is defined.",
        "name": "backButtonText",
        "parent": {
          "fileName": "leafygreen-ui/packages/form-footer/src/FormFooter.tsx",
          "name": "FormFooterProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/form-footer/src/FormFooter.tsx",
            "name": "FormFooterProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "onBackClick": {
        "defaultValue": null,
        "description": "onClick callback for the back button",
        "name": "onBackClick",
        "parent": {
          "fileName": "leafygreen-ui/packages/form-footer/src/FormFooter.tsx",
          "name": "FormFooterProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/form-footer/src/FormFooter.tsx",
            "name": "FormFooterProps"
          }
        ],
        "required": false,
        "type": { "name": "React.MouseEventHandler<HTMLButtonElement>" }
      },
      "errorMessage": {
        "defaultValue": null,
        "description": "Text within the error banner. The banner will only appear if an error message is defined.",
        "name": "errorMessage",
        "parent": {
          "fileName": "leafygreen-ui/packages/form-footer/src/FormFooter.tsx",
          "name": "FormFooterProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/form-footer/src/FormFooter.tsx",
            "name": "FormFooterProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "contentClassName": {
        "defaultValue": null,
        "description": "Styling prop for the content.\nUseful for setting left and right margins, or max-width",
        "name": "contentClassName",
        "parent": {
          "fileName": "leafygreen-ui/packages/form-footer/src/FormFooter.tsx",
          "name": "FormFooterProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/form-footer/src/FormFooter.tsx",
            "name": "FormFooterProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "className": {
        "defaultValue": null,
        "description": "Styling prop",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/form-footer/src/FormFooter.tsx",
          "name": "FormFooterProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/form-footer/src/FormFooter.tsx",
            "name": "FormFooterProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/form-footer/src/PrimaryButton.tsx",
    "description": "",
    "displayName": "isPrimaryButtonProps",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/form-footer/src/PrimaryButton.tsx",
    "description": "",
    "displayName": "PrimaryButton",
    "methods": [],
    "props": {
      "text": {
        "defaultValue": null,
        "description": "",
        "name": "text",
        "parent": {
          "fileName": "leafygreen-ui/packages/form-footer/src/PrimaryButton.tsx",
          "name": "PrimaryButtonProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/form-footer/src/PrimaryButton.tsx",
            "name": "PrimaryButtonProps"
          }
        ],
        "required": true,
        "type": { "name": "string" }
      },
      "onClick": {
        "defaultValue": null,
        "description": "",
        "name": "onClick",
        "parent": {
          "fileName": "leafygreen-ui/packages/form-footer/src/PrimaryButton.tsx",
          "name": "PrimaryButtonProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/form-footer/src/PrimaryButton.tsx",
            "name": "PrimaryButtonProps"
          }
        ],
        "required": false,
        "type": { "name": "React.MouseEventHandler<HTMLButtonElement>" }
      },
      "variant": {
        "defaultValue": null,
        "description": "",
        "name": "variant",
        "parent": {
          "fileName": "leafygreen-ui/packages/form-footer/src/PrimaryButton.tsx",
          "name": "PrimaryButtonProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/form-footer/src/PrimaryButton.tsx",
            "name": "PrimaryButtonProps"
          }
        ],
        "required": false,
        "type": { "name": "\"danger\" | \"primary\"" }
      },
      "disabled": {
        "defaultValue": null,
        "description": "",
        "name": "disabled",
        "parent": {
          "fileName": "leafygreen-ui/packages/form-footer/src/PrimaryButton.tsx",
          "name": "PrimaryButtonProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/form-footer/src/PrimaryButton.tsx",
            "name": "PrimaryButtonProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "type": {
        "defaultValue": null,
        "description": "",
        "name": "type",
        "parent": {
          "fileName": "leafygreen-ui/packages/form-footer/src/PrimaryButton.tsx",
          "name": "PrimaryButtonProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/form-footer/src/PrimaryButton.tsx",
            "name": "PrimaryButtonProps"
          }
        ],
        "required": false,
        "type": { "name": "\"button\" | \"submit\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/form-footer/src/index.ts",
    "description": "Component",
    "displayName": "src",
    "methods": [],
    "props": {
      "primaryButton": {
        "defaultValue": null,
        "description": "The primary (right-most) button. Defined as a <Button> element, or as an object with the shape:\n\n```ts\ninterface PrimaryButtonProps {\n text: string;\n onClick?: React.MouseEventHandler<HTMLButtonElement>;\n variant?: 'primary' | 'danger';\n disabled?: boolean;\n type?: 'button' | 'submit';\n}\n```",
        "name": "primaryButton",
        "parent": {
          "fileName": "leafygreen-ui/packages/form-footer/src/FormFooter.tsx",
          "name": "FormFooterProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/form-footer/src/FormFooter.tsx",
            "name": "FormFooterProps"
          }
        ],
        "required": false,
        "type": { "name": "any" }
      },
      "cancelButtonText": {
        "defaultValue": { "value": "Cancel" },
        "description": "Text for the cancel button. A cancel button will only appear if this text is defined.",
        "name": "cancelButtonText",
        "parent": {
          "fileName": "leafygreen-ui/packages/form-footer/src/FormFooter.tsx",
          "name": "FormFooterProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/form-footer/src/FormFooter.tsx",
            "name": "FormFooterProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "onCancel": {
        "defaultValue": null,
        "description": "onClick callback for the cancel button",
        "name": "onCancel",
        "parent": {
          "fileName": "leafygreen-ui/packages/form-footer/src/FormFooter.tsx",
          "name": "FormFooterProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/form-footer/src/FormFooter.tsx",
            "name": "FormFooterProps"
          }
        ],
        "required": false,
        "type": { "name": "React.MouseEventHandler<HTMLButtonElement>" }
      },
      "backButtonText": {
        "defaultValue": null,
        "description": "Text for the back button. A back button will only appear if text is defined.",
        "name": "backButtonText",
        "parent": {
          "fileName": "leafygreen-ui/packages/form-footer/src/FormFooter.tsx",
          "name": "FormFooterProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/form-footer/src/FormFooter.tsx",
            "name": "FormFooterProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "onBackClick": {
        "defaultValue": null,
        "description": "onClick callback for the back button",
        "name": "onBackClick",
        "parent": {
          "fileName": "leafygreen-ui/packages/form-footer/src/FormFooter.tsx",
          "name": "FormFooterProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/form-footer/src/FormFooter.tsx",
            "name": "FormFooterProps"
          }
        ],
        "required": false,
        "type": { "name": "React.MouseEventHandler<HTMLButtonElement>" }
      },
      "errorMessage": {
        "defaultValue": null,
        "description": "Text within the error banner. The banner will only appear if an error message is defined.",
        "name": "errorMessage",
        "parent": {
          "fileName": "leafygreen-ui/packages/form-footer/src/FormFooter.tsx",
          "name": "FormFooterProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/form-footer/src/FormFooter.tsx",
            "name": "FormFooterProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "contentClassName": {
        "defaultValue": null,
        "description": "Styling prop for the content.\nUseful for setting left and right margins, or max-width",
        "name": "contentClassName",
        "parent": {
          "fileName": "leafygreen-ui/packages/form-footer/src/FormFooter.tsx",
          "name": "FormFooterProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/form-footer/src/FormFooter.tsx",
            "name": "FormFooterProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "className": {
        "defaultValue": null,
        "description": "Styling prop",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/form-footer/src/FormFooter.tsx",
          "name": "FormFooterProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/form-footer/src/FormFooter.tsx",
            "name": "FormFooterProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {
      "param": "type Represents the event type to listen for.\neventCallback Event listener callback function.\noptional Optional third argument passed to function with implementation specifications\noptional.options Parameter to specify options passed to the eventListener.\noptional.enabled Determines whether or not the useEffect hook should run.\noptional.dependencies Array to be passed to useEffect hook, such that the hook will only run if the array's values have changed.\noptional.element Value to be passed as target of event handler, will default to document."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/hooks/src/index.ts",
    "description": "Hook to subscribe to an event listener.",
    "displayName": "src",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "param": "callback Callback function to be executed when Escape key is pressed.\noptions Object to refine when callback is invoked.\noptions.options Parameter to specify options passed to the eventListener.\noptions.enabled Determines whether or not the useEffect hook should run.\noptions.dependencies Array to be passed to useEffect hook, such that the hook will only run if the array's values have changed.\noptions.element Value to be passed as target of event handler, will default to document."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/hooks/src/index.ts",
    "description": "Hook to subscribe to an escape-key-press.",
    "displayName": "useEscapeKey",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "version": "16.8.0",
      "see": "https://reactjs.org/docs/hooks-reference.html#uselayouteffect"
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/hooks/src/index.ts",
    "description": "The signature is identical to `useEffect`, but it fires synchronously after all DOM mutations.\nUse this to read layout from the DOM and synchronously re-render. Updates scheduled inside\n`useLayoutEffect` will be flushed synchronously, before the browser has a chance to paint.\n\nPrefer the standard `useEffect` when possible to avoid blocking visual updates.\n\nIf you’re migrating code from a class component, `useLayoutEffect` fires in the same phase as\n`componentDidMount` and `componentDidUpdate`.",
    "displayName": "useLayoutEffect",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "param": "options : string; id: string;}\noptions.prefix string that prefixes the generated id\noptions.id string that represents an already-created id"
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/hooks/src/index.ts",
    "description": "Generates an SSR-compatible unique id based on a prefix string and an optional idProp parameter.",
    "displayName": "useIdAllocator",
    "methods": [],
    "props": {
      "prefix": {
        "defaultValue": null,
        "description": "",
        "name": "prefix",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/hooks/src/useIdAllocator.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "id": {
        "defaultValue": null,
        "description": "",
        "name": "id",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/hooks/src/useIdAllocator.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/hooks/src/index.ts",
    "description": "",
    "displayName": "useDynamicRefs",
    "methods": [],
    "props": {
      "prefix": {
        "defaultValue": null,
        "description": "",
        "name": "prefix",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/hooks/src/useDynamicRefs.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/hooks/src/useDynamicRefs.tsx",
    "description": "",
    "displayName": "useDynamicRefs",
    "methods": [],
    "props": {
      "prefix": {
        "defaultValue": null,
        "description": "",
        "name": "prefix",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/hooks/src/useDynamicRefs.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {
      "param": "callback Callback function to be executed when Escape key is pressed.\noptions Object to refine when callback is invoked.\noptions.options Parameter to specify options passed to the eventListener.\noptions.enabled Determines whether or not the useEffect hook should run.\noptions.dependencies Array to be passed to useEffect hook, such that the hook will only run if the array's values have changed.\noptions.element Value to be passed as target of event handler, will default to document."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/hooks/src/useEscapeKey.ts",
    "description": "Hook to subscribe to an escape-key-press.",
    "displayName": "useEscapeKey",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "param": "type Represents the event type to listen for.\neventCallback Event listener callback function.\noptional Optional third argument passed to function with implementation specifications\noptional.options Parameter to specify options passed to the eventListener.\noptional.enabled Determines whether or not the useEffect hook should run.\noptional.dependencies Array to be passed to useEffect hook, such that the hook will only run if the array's values have changed.\noptional.element Value to be passed as target of event handler, will default to document."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/hooks/src/useEventListener.ts",
    "description": "Hook to subscribe to an event listener.",
    "displayName": "useEventListener",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "param": "options : string; id: string;}\noptions.prefix string that prefixes the generated id\noptions.id string that represents an already-created id"
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/hooks/src/useIdAllocator.ts",
    "description": "Generates an SSR-compatible unique id based on a prefix string and an optional idProp parameter.",
    "displayName": "useIdAllocator",
    "methods": [],
    "props": {
      "prefix": {
        "defaultValue": null,
        "description": "",
        "name": "prefix",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/hooks/src/useIdAllocator.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "id": {
        "defaultValue": null,
        "description": "",
        "name": "id",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/hooks/src/useIdAllocator.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {
      "version": "16.8.0",
      "see": "https://reactjs.org/docs/hooks-reference.html#uselayouteffect"
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/hooks/src/useIsomorphicLayoutEffect.ts",
    "description": "The signature is identical to `useEffect`, but it fires synchronously after all DOM mutations.\nUse this to read layout from the DOM and synchronously re-render. Updates scheduled inside\n`useLayoutEffect` will be flushed synchronously, before the browser has a chance to paint.\n\nPrefer the standard `useEffect` when possible to avoid blocking visual updates.\n\nIf you’re migrating code from a class component, `useLayoutEffect` fires in the same phase as\n`componentDidMount` and `componentDidUpdate`.",
    "displayName": "useLayoutEffect",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "param": "target HTML element that is subscribed to DOM changes.\noptions Object with information about what DOM changes to subscribe to.\ncallback Callback function to execute inside of MutationObserver instance.\nenabled Determines whether or not the hook should run, defaults to true."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/hooks/src/useMutationObserver.ts",
    "description": "Hook to subscribe to changes on the DOM.",
    "displayName": "useMutationObserver",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/hooks/src/useObjectDependency.ts",
    "description": "",
    "displayName": "useObjectDependency",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/hooks/src/usePrevious.ts",
    "description": "Hook to store previous props\nhttps://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state",
    "displayName": "usePrevious",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/hooks/src/useValidation.tsx",
    "description": "",
    "displayName": "useValidation",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "param": "glyphName : string - the display name of the icon\nGlyph : SVGR.Component - the SVG icon component",
      "returns": "LGGlyph.Component"
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/createGlyphComponent.tsx",
    "description": "Returns a single glyph component.\nProcess custom glyphs to ensure consistent behavior between custom and built-in icons",
    "displayName": "createGlyphComponent",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "param": "glyphs The set of glyphs",
      "returns": "Icon component"
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/createIconComponent.tsx",
    "description": "Returns a single component with a `glyph` prop to select the glyph",
    "displayName": "createIconComponent",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/ActivityFeed.tsx",
    "description": "",
    "displayName": "ActivityFeed",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/AddFile.tsx",
    "description": "",
    "displayName": "AddFile",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Apps.tsx",
    "description": "",
    "displayName": "Apps",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Array.tsx",
    "description": "",
    "displayName": "Array",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/ArrowDown.tsx",
    "description": "",
    "displayName": "ArrowDown",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/ArrowLeft.tsx",
    "description": "",
    "displayName": "ArrowLeft",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/ArrowRight.tsx",
    "description": "",
    "displayName": "ArrowRight",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/ArrowUp.tsx",
    "description": "",
    "displayName": "ArrowUp",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Beaker.tsx",
    "description": "",
    "displayName": "Beaker",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Bell.tsx",
    "description": "",
    "displayName": "Bell",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Building.tsx",
    "description": "",
    "displayName": "Building",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Bulb.tsx",
    "description": "",
    "displayName": "Bulb",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Calendar.tsx",
    "description": "",
    "displayName": "Calendar",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/CaretDown.tsx",
    "description": "",
    "displayName": "CaretDown",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/CaretLeft.tsx",
    "description": "",
    "displayName": "CaretLeft",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/CaretRight.tsx",
    "description": "",
    "displayName": "CaretRight",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/CaretUp.tsx",
    "description": "",
    "displayName": "CaretUp",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Charts.tsx",
    "description": "",
    "displayName": "Charts",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Checkmark.tsx",
    "description": "",
    "displayName": "Checkmark",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/CheckmarkWithCircle.tsx",
    "description": "",
    "displayName": "CheckmarkWithCircle",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/ChevronDown.tsx",
    "description": "",
    "displayName": "ChevronDown",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/ChevronLeft.tsx",
    "description": "",
    "displayName": "ChevronLeft",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/ChevronRight.tsx",
    "description": "",
    "displayName": "ChevronRight",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/ChevronUp.tsx",
    "description": "",
    "displayName": "ChevronUp",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Clock.tsx",
    "description": "",
    "displayName": "Clock",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/ClockWithArrow.tsx",
    "description": "",
    "displayName": "ClockWithArrow",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Clone.tsx",
    "description": "",
    "displayName": "Clone",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Cloud.tsx",
    "description": "",
    "displayName": "Cloud",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Code.tsx",
    "description": "",
    "displayName": "Code",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Connect.tsx",
    "description": "",
    "displayName": "Connect",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Copy.tsx",
    "description": "",
    "displayName": "Copy",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/CreditCard.tsx",
    "description": "",
    "displayName": "CreditCard",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/CurlyBraces.tsx",
    "description": "",
    "displayName": "CurlyBraces",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Cursor.tsx",
    "description": "",
    "displayName": "Cursor",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Database.tsx",
    "description": "",
    "displayName": "Database",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Diagram.tsx",
    "description": "",
    "displayName": "Diagram",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Diagram2.tsx",
    "description": "",
    "displayName": "Diagram2",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Diagram3.tsx",
    "description": "",
    "displayName": "Diagram3",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Disconnect.tsx",
    "description": "",
    "displayName": "Disconnect",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Download.tsx",
    "description": "",
    "displayName": "Download",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Edit.tsx",
    "description": "",
    "displayName": "Edit",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Ellipsis.tsx",
    "description": "",
    "displayName": "Ellipsis",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Export.tsx",
    "description": "",
    "displayName": "Export",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Favorite.tsx",
    "description": "",
    "displayName": "Favorite",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/File.tsx",
    "description": "",
    "displayName": "File",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Filter.tsx",
    "description": "",
    "displayName": "Filter",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Folder.tsx",
    "description": "",
    "displayName": "Folder",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/FullScreenEnter.tsx",
    "description": "",
    "displayName": "FullScreenEnter",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/FullScreenExit.tsx",
    "description": "",
    "displayName": "FullScreenExit",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/GlobeAmericas.tsx",
    "description": "",
    "displayName": "GlobeAmericas",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/GovernmentBuilding.tsx",
    "description": "",
    "displayName": "GovernmentBuilding",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Home.tsx",
    "description": "",
    "displayName": "Home",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/ImportantWithCircle.tsx",
    "description": "",
    "displayName": "ImportantWithCircle",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/InfoWithCircle.tsx",
    "description": "",
    "displayName": "InfoWithCircle",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/InviteUser.tsx",
    "description": "",
    "displayName": "InviteUser",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Key.tsx",
    "description": "",
    "displayName": "Key",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Laptop.tsx",
    "description": "",
    "displayName": "Laptop",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Link.tsx",
    "description": "",
    "displayName": "Link",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Lock.tsx",
    "description": "",
    "displayName": "Lock",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/MagnifyingGlass.tsx",
    "description": "",
    "displayName": "MagnifyingGlass",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Megaphone.tsx",
    "description": "",
    "displayName": "Megaphone",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Menu.tsx",
    "description": "",
    "displayName": "Menu",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Minus.tsx",
    "description": "",
    "displayName": "Minus",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/NotAllowed.tsx",
    "description": "",
    "displayName": "NotAllowed",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Note.tsx",
    "description": "",
    "displayName": "Note",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/OpenNewTab.tsx",
    "description": "",
    "displayName": "OpenNewTab",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Pause.tsx",
    "description": "",
    "displayName": "Pause",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Person.tsx",
    "description": "",
    "displayName": "Person",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/PersonGroup.tsx",
    "description": "",
    "displayName": "PersonGroup",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/PersonWithLock.tsx",
    "description": "",
    "displayName": "PersonWithLock",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Play.tsx",
    "description": "",
    "displayName": "Play",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Plus.tsx",
    "description": "",
    "displayName": "Plus",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/PlusWithCircle.tsx",
    "description": "",
    "displayName": "PlusWithCircle",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/QuestionMarkWithCircle.tsx",
    "description": "",
    "displayName": "QuestionMarkWithCircle",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Redo.tsx",
    "description": "",
    "displayName": "Redo",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Refresh.tsx",
    "description": "",
    "displayName": "Refresh",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/ReplicaSet.tsx",
    "description": "",
    "displayName": "ReplicaSet",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Save.tsx",
    "description": "",
    "displayName": "Save",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Serverless.tsx",
    "description": "",
    "displayName": "Serverless",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Settings.tsx",
    "description": "",
    "displayName": "Settings",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/ShardedCluster.tsx",
    "description": "",
    "displayName": "ShardedCluster",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Shell.tsx",
    "description": "",
    "displayName": "Shell",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/SortAscending.tsx",
    "description": "",
    "displayName": "SortAscending",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/SortDescending.tsx",
    "description": "",
    "displayName": "SortDescending",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/SplitHorizontal.tsx",
    "description": "",
    "displayName": "SplitHorizontal",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/SplitVertical.tsx",
    "description": "",
    "displayName": "SplitVertical",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Stitch.tsx",
    "description": "",
    "displayName": "Stitch",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Support.tsx",
    "description": "",
    "displayName": "Support",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Sweep.tsx",
    "description": "",
    "displayName": "Sweep",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Table.tsx",
    "description": "",
    "displayName": "Table",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/TimeSeries.tsx",
    "description": "",
    "displayName": "TimeSeries",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Trash.tsx",
    "description": "",
    "displayName": "Trash",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Undo.tsx",
    "description": "",
    "displayName": "Undo",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/University.tsx",
    "description": "",
    "displayName": "University",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Unlock.tsx",
    "description": "",
    "displayName": "Unlock",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Unsorted.tsx",
    "description": "",
    "displayName": "Unsorted",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/UpDownCarets.tsx",
    "description": "",
    "displayName": "UpDownCarets",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Upload.tsx",
    "description": "",
    "displayName": "Upload",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/VerticalEllipsis.tsx",
    "description": "",
    "displayName": "VerticalEllipsis",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Visibility.tsx",
    "description": "",
    "displayName": "Visibility",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/VisibilityOff.tsx",
    "description": "",
    "displayName": "VisibilityOff",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/Warning.tsx",
    "description": "",
    "displayName": "Warning",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/X.tsx",
    "description": "",
    "displayName": "X",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/generated/XWithCircle.tsx",
    "description": "",
    "displayName": "XWithCircle",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": { "value": 16 },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/LGGlyph.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"default\" | \"large\" | \"xlarge\" | \"small\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "role": {
        "defaultValue": { "value": "img" },
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
          "name": "ComponentProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon/src/types/SVGR.ts",
            "name": "ComponentProps"
          }
        ],
        "required": false,
        "type": { "name": "\"img\" | \"presentation\"" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/glyphCommon.ts",
    "description": "",
    "displayName": "getGlyphLabel",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "param": "glyphs The set of glyphs",
      "returns": "Icon component"
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/index.ts",
    "description": "Returns a single component with a `glyph` prop to select the glyph",
    "displayName": "src",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/index.ts",
    "description": "Helper type to check if element is a LeafyGreen UI Glyph",
    "displayName": "isComponentGlyph",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon/src/isComponentGlyph.ts",
    "description": "Helper type to check if element is a LeafyGreen UI Glyph",
    "displayName": "isComponentGlyph",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/icon-button/src/IconButton.tsx",
    "description": "",
    "displayName": "IconButton",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon-button/src/IconButton.tsx",
          "name": "BaseIconButtonProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon-button/src/IconButton.tsx",
            "name": "BaseIconButtonProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "onClick": {
        "defaultValue": null,
        "description": "",
        "name": "onClick",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon-button/src/IconButton.tsx",
          "name": "BaseIconButtonProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon-button/src/IconButton.tsx",
            "name": "BaseIconButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "React.MouseEventHandler<HTMLButtonElement | HTMLAnchorElement>"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "",
        "name": "disabled",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon-button/src/IconButton.tsx",
          "name": "BaseIconButtonProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon-button/src/IconButton.tsx",
            "name": "BaseIconButtonProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon-button/src/IconButton.tsx",
          "name": "BaseIconButtonProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon-button/src/IconButton.tsx",
            "name": "BaseIconButtonProps"
          }
        ],
        "required": false,
        "type": { "name": "Size" }
      },
      "darkMode": {
        "defaultValue": null,
        "description": "",
        "name": "darkMode",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon-button/src/IconButton.tsx",
          "name": "BaseIconButtonProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon-button/src/IconButton.tsx",
            "name": "BaseIconButtonProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "active": {
        "defaultValue": null,
        "description": "",
        "name": "active",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon-button/src/IconButton.tsx",
          "name": "BaseIconButtonProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon-button/src/IconButton.tsx",
            "name": "BaseIconButtonProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "href": {
        "defaultValue": null,
        "description": "",
        "name": "href",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon-button/src/IconButton.tsx",
          "name": "BaseIconButtonProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon-button/src/IconButton.tsx",
            "name": "BaseIconButtonProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "aria-label": {
        "defaultValue": null,
        "description": "",
        "name": "aria-label",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon-button/src/IconButton.tsx",
          "name": "BaseIconButtonProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon-button/src/IconButton.tsx",
            "name": "BaseIconButtonProps"
          },
          {
            "fileName": "leafygreen-ui/packages/icon-button/src/IconButton.tsx",
            "name": "BaseIconButtonProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "aria-labelledby": {
        "defaultValue": null,
        "description": "",
        "name": "aria-labelledby",
        "parent": {
          "fileName": "leafygreen-ui/packages/icon-button/src/IconButton.tsx",
          "name": "BaseIconButtonProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon-button/src/IconButton.tsx",
            "name": "BaseIconButtonProps"
          },
          {
            "fileName": "leafygreen-ui/packages/icon-button/src/IconButton.tsx",
            "name": "BaseIconButtonProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/icon-button/src/IconButton.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "React.Ref<any>" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/inline-definition/node_modules/@leafygreen-ui/typography/src/FormElements.tsx",
    "description": "",
    "displayName": "Label",
    "methods": [],
    "props": {
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/inline-definition/node_modules/@leafygreen-ui/typography/src/Typography.tsx",
    "description": "",
    "displayName": "H1",
    "methods": [],
    "props": {
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string | number" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/inline-definition/node_modules/@leafygreen-ui/typography/src/index.ts",
    "description": "",
    "displayName": "Body",
    "methods": [],
    "props": {
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string | number" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/inline-definition/node_modules/@leafygreen-ui/typography/src/index.ts",
    "description": "",
    "displayName": "InlineCode",
    "methods": [],
    "props": {
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/inline-definition/node_modules/@leafygreen-ui/typography/src/index.ts",
    "description": "",
    "displayName": "InlineKeyCode",
    "methods": [],
    "props": {
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/inline-definition/node_modules/@leafygreen-ui/typography/src/index.ts",
    "description": "",
    "displayName": "Disclaimer",
    "methods": [],
    "props": {
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/inline-definition/node_modules/@leafygreen-ui/typography/src/index.ts",
    "description": "",
    "displayName": "Label",
    "methods": [],
    "props": {
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/inline-definition/node_modules/@leafygreen-ui/typography/src/index.ts",
    "description": "",
    "displayName": "Description",
    "methods": [],
    "props": {
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/inline-definition/src/InlineDefinition.tsx",
    "description": "",
    "displayName": "InlineDefinition",
    "methods": [],
    "props": {
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      },
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "id": {
        "defaultValue": null,
        "description": "id given to `Tooltip` content.",
        "name": "id",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          },
          {
            "fileName": "leafygreen-ui/packages/tooltip/dist/Tooltip.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "className": {
        "defaultValue": null,
        "description": "Class name applied to popover content container.",
        "name": "className",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "children": {
        "defaultValue": null,
        "description": "Content that will appear inside of the popover component.",
        "name": "children",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "any" }
      },
      "onClick": {
        "defaultValue": null,
        "description": "Click event handler passed to the root div element within the portal container.",
        "name": "onClick",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "React.MouseEventHandler" }
      },
      "usePortal": {
        "defaultValue": null,
        "description": "Specifies that the popover content should be rendered at the end of the DOM,\nrather than in the DOM tree.\n\ndefault: `true`",
        "name": "usePortal",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "portalClassName": {
        "defaultValue": null,
        "description": "When usePortal is `true`, specifies a class name to apply to the root element of the portal.",
        "name": "portalClassName",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "portalContainer": {
        "defaultValue": null,
        "description": "When usePortal is `true`, specifies an element to portal within. The default behavior is to generate a div at the end of the document to render within.",
        "name": "portalContainer",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "HTMLElement" }
      },
      "scrollContainer": {
        "defaultValue": null,
        "description": "When usePortal is `true`, specifies the scrollable element to position relative to.",
        "name": "scrollContainer",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "HTMLElement" }
      },
      "popoverZIndex": {
        "defaultValue": null,
        "description": "Number that controls the z-index of the popover element directly.",
        "name": "popoverZIndex",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "align": {
        "defaultValue": null,
        "description": "Determines the alignment of the popover content relative to the trigger element\n\ndefault: `bottom`",
        "name": "align",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Align" }
      },
      "justify": {
        "defaultValue": null,
        "description": "Determines the justification of the popover content relative to the trigger element\n\ndefault: `start`",
        "name": "justify",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Justify" }
      },
      "refEl": {
        "defaultValue": null,
        "description": "A reference to the element against which the popover component will be positioned.",
        "name": "refEl",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "React.RefObject<HTMLElement>" }
      },
      "spacing": {
        "defaultValue": null,
        "description": "Specifies the amount of spacing (in pixels) between the trigger element and the Popover content.\n\ndefault: `10`",
        "name": "spacing",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "adjustOnMutation": {
        "defaultValue": null,
        "description": "Should the Popover auto adjust its content when the DOM changes (using MutationObserver).\n\ndefault: false",
        "name": "adjustOnMutation",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "trigger": {
        "defaultValue": null,
        "description": "A slot for the element used to trigger the `Tooltip`.",
        "name": "trigger",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tooltip/dist/Tooltip.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "any" }
      },
      "triggerEvent": {
        "defaultValue": { "value": ": 'hover'" },
        "description": "Determines if a `hover` or `click` event will trigger the opening of a `Tooltip`.",
        "name": "triggerEvent",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tooltip/dist/Tooltip.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "TriggerEvent" }
      },
      "open": {
        "defaultValue": { "value": ": `false`" },
        "description": "Controls component and determines the open state of the `Tooltip`",
        "name": "open",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tooltip/dist/Tooltip.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "setOpen": {
        "defaultValue": null,
        "description": "Callback to change the open state of the `Tooltip`.",
        "name": "setOpen",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tooltip/dist/Tooltip.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "React.Dispatch<React.SetStateAction<boolean>>" }
      },
      "darkMode": {
        "defaultValue": { "value": ": false" },
        "description": "Whether the `Tooltip` will appear in dark mode.",
        "name": "darkMode",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tooltip/dist/Tooltip.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "shouldClose": {
        "defaultValue": null,
        "description": "Callback to determine whether or not `Tooltip` should close when user tries to close it.",
        "name": "shouldClose",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tooltip/dist/Tooltip.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "() => boolean" }
      },
      "enabled": {
        "defaultValue": { "value": ": true" },
        "description": "Enables Tooltip to trigger based on the event specified by `triggerEvent`.",
        "name": "enabled",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tooltip/dist/Tooltip.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "definition": {
        "defaultValue": null,
        "description": "",
        "name": "definition",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/inline-definition/src/InlineDefinition.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": { "name": "React.ReactNode" }
      },
      "tooltipClassName": {
        "defaultValue": null,
        "description": "",
        "name": "tooltipClassName",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/inline-definition/src/InlineDefinition.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/inline-definition/src/index.ts",
    "description": "",
    "displayName": "InlineDefinition",
    "methods": [],
    "props": {
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      },
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "id": {
        "defaultValue": null,
        "description": "id given to `Tooltip` content.",
        "name": "id",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          },
          {
            "fileName": "leafygreen-ui/packages/tooltip/dist/Tooltip.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "className": {
        "defaultValue": null,
        "description": "Class name applied to popover content container.",
        "name": "className",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "children": {
        "defaultValue": null,
        "description": "Content that will appear inside of the popover component.",
        "name": "children",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "any" }
      },
      "onClick": {
        "defaultValue": null,
        "description": "Click event handler passed to the root div element within the portal container.",
        "name": "onClick",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "React.MouseEventHandler" }
      },
      "usePortal": {
        "defaultValue": null,
        "description": "Specifies that the popover content should be rendered at the end of the DOM,\nrather than in the DOM tree.\n\ndefault: `true`",
        "name": "usePortal",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "portalClassName": {
        "defaultValue": null,
        "description": "When usePortal is `true`, specifies a class name to apply to the root element of the portal.",
        "name": "portalClassName",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "portalContainer": {
        "defaultValue": null,
        "description": "When usePortal is `true`, specifies an element to portal within. The default behavior is to generate a div at the end of the document to render within.",
        "name": "portalContainer",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "HTMLElement" }
      },
      "scrollContainer": {
        "defaultValue": null,
        "description": "When usePortal is `true`, specifies the scrollable element to position relative to.",
        "name": "scrollContainer",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "HTMLElement" }
      },
      "popoverZIndex": {
        "defaultValue": null,
        "description": "Number that controls the z-index of the popover element directly.",
        "name": "popoverZIndex",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "align": {
        "defaultValue": null,
        "description": "Determines the alignment of the popover content relative to the trigger element\n\ndefault: `bottom`",
        "name": "align",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Align" }
      },
      "justify": {
        "defaultValue": null,
        "description": "Determines the justification of the popover content relative to the trigger element\n\ndefault: `start`",
        "name": "justify",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Justify" }
      },
      "refEl": {
        "defaultValue": null,
        "description": "A reference to the element against which the popover component will be positioned.",
        "name": "refEl",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "React.RefObject<HTMLElement>" }
      },
      "spacing": {
        "defaultValue": null,
        "description": "Specifies the amount of spacing (in pixels) between the trigger element and the Popover content.\n\ndefault: `10`",
        "name": "spacing",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "adjustOnMutation": {
        "defaultValue": null,
        "description": "Should the Popover auto adjust its content when the DOM changes (using MutationObserver).\n\ndefault: false",
        "name": "adjustOnMutation",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "trigger": {
        "defaultValue": null,
        "description": "A slot for the element used to trigger the `Tooltip`.",
        "name": "trigger",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tooltip/dist/Tooltip.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "any" }
      },
      "triggerEvent": {
        "defaultValue": { "value": ": 'hover'" },
        "description": "Determines if a `hover` or `click` event will trigger the opening of a `Tooltip`.",
        "name": "triggerEvent",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tooltip/dist/Tooltip.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "TriggerEvent" }
      },
      "open": {
        "defaultValue": { "value": ": `false`" },
        "description": "Controls component and determines the open state of the `Tooltip`",
        "name": "open",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tooltip/dist/Tooltip.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "setOpen": {
        "defaultValue": null,
        "description": "Callback to change the open state of the `Tooltip`.",
        "name": "setOpen",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tooltip/dist/Tooltip.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "React.Dispatch<React.SetStateAction<boolean>>" }
      },
      "darkMode": {
        "defaultValue": { "value": ": false" },
        "description": "Whether the `Tooltip` will appear in dark mode.",
        "name": "darkMode",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tooltip/dist/Tooltip.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "shouldClose": {
        "defaultValue": null,
        "description": "Callback to determine whether or not `Tooltip` should close when user tries to close it.",
        "name": "shouldClose",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tooltip/dist/Tooltip.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "() => boolean" }
      },
      "enabled": {
        "defaultValue": { "value": ": true" },
        "description": "Enables Tooltip to trigger based on the event specified by `triggerEvent`.",
        "name": "enabled",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tooltip/dist/Tooltip.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "definition": {
        "defaultValue": null,
        "description": "",
        "name": "definition",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/inline-definition/src/InlineDefinition.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": { "name": "React.ReactNode" }
      },
      "tooltipClassName": {
        "defaultValue": null,
        "description": "",
        "name": "tooltipClassName",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/inline-definition/src/InlineDefinition.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/interaction-ring/src/InteractionRing.tsx",
    "description": "",
    "displayName": "InteractionRing",
    "methods": [],
    "props": {
      "darkMode": {
        "defaultValue": { "value": false },
        "description": "",
        "name": "darkMode",
        "parent": {
          "fileName": "leafygreen-ui/packages/interaction-ring/src/InteractionRing.tsx",
          "name": "InteractionRingProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/interaction-ring/src/InteractionRing.tsx",
            "name": "InteractionRingProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/interaction-ring/src/InteractionRing.tsx",
          "name": "InteractionRingProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/interaction-ring/src/InteractionRing.tsx",
            "name": "InteractionRingProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "borderRadius": {
        "defaultValue": null,
        "description": "",
        "name": "borderRadius",
        "parent": {
          "fileName": "leafygreen-ui/packages/interaction-ring/src/InteractionRing.tsx",
          "name": "InteractionRingProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/interaction-ring/src/InteractionRing.tsx",
            "name": "InteractionRingProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "parent": {
          "fileName": "leafygreen-ui/packages/interaction-ring/src/InteractionRing.tsx",
          "name": "InteractionRingProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/interaction-ring/src/InteractionRing.tsx",
            "name": "InteractionRingProps"
          }
        ],
        "required": false,
        "type": { "name": "{ focused?: string; hovered?: string; }" }
      },
      "focusTargetElement": {
        "defaultValue": null,
        "description": "",
        "name": "focusTargetElement",
        "parent": {
          "fileName": "leafygreen-ui/packages/interaction-ring/src/InteractionRing.tsx",
          "name": "InteractionRingProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/interaction-ring/src/InteractionRing.tsx",
            "name": "InteractionRingProps"
          }
        ],
        "required": false,
        "type": { "name": "HTMLElement" }
      },
      "disabled": {
        "defaultValue": { "value": false },
        "description": "",
        "name": "disabled",
        "parent": {
          "fileName": "leafygreen-ui/packages/interaction-ring/src/InteractionRing.tsx",
          "name": "InteractionRingProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/interaction-ring/src/InteractionRing.tsx",
            "name": "InteractionRingProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "forceState": {
        "defaultValue": { "value": "{}" },
        "description": "",
        "name": "forceState",
        "parent": {
          "fileName": "leafygreen-ui/packages/interaction-ring/src/InteractionRing.tsx",
          "name": "InteractionRingProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/interaction-ring/src/InteractionRing.tsx",
            "name": "InteractionRingProps"
          }
        ],
        "required": false,
        "type": { "name": "State" }
      },
      "ignoreKeyboardContext": {
        "defaultValue": { "value": false },
        "description": "",
        "name": "ignoreKeyboardContext",
        "parent": {
          "fileName": "leafygreen-ui/packages/interaction-ring/src/InteractionRing.tsx",
          "name": "InteractionRingProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/interaction-ring/src/InteractionRing.tsx",
            "name": "InteractionRingProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/interaction-ring/src/index.ts",
    "description": "",
    "displayName": "src",
    "methods": [],
    "props": {
      "darkMode": {
        "defaultValue": { "value": false },
        "description": "",
        "name": "darkMode",
        "parent": {
          "fileName": "leafygreen-ui/packages/interaction-ring/src/InteractionRing.tsx",
          "name": "InteractionRingProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/interaction-ring/src/InteractionRing.tsx",
            "name": "InteractionRingProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/interaction-ring/src/InteractionRing.tsx",
          "name": "InteractionRingProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/interaction-ring/src/InteractionRing.tsx",
            "name": "InteractionRingProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "borderRadius": {
        "defaultValue": null,
        "description": "",
        "name": "borderRadius",
        "parent": {
          "fileName": "leafygreen-ui/packages/interaction-ring/src/InteractionRing.tsx",
          "name": "InteractionRingProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/interaction-ring/src/InteractionRing.tsx",
            "name": "InteractionRingProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "parent": {
          "fileName": "leafygreen-ui/packages/interaction-ring/src/InteractionRing.tsx",
          "name": "InteractionRingProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/interaction-ring/src/InteractionRing.tsx",
            "name": "InteractionRingProps"
          }
        ],
        "required": false,
        "type": { "name": "{ focused?: string; hovered?: string; }" }
      },
      "focusTargetElement": {
        "defaultValue": null,
        "description": "",
        "name": "focusTargetElement",
        "parent": {
          "fileName": "leafygreen-ui/packages/interaction-ring/src/InteractionRing.tsx",
          "name": "InteractionRingProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/interaction-ring/src/InteractionRing.tsx",
            "name": "InteractionRingProps"
          }
        ],
        "required": false,
        "type": { "name": "HTMLElement" }
      },
      "disabled": {
        "defaultValue": { "value": false },
        "description": "",
        "name": "disabled",
        "parent": {
          "fileName": "leafygreen-ui/packages/interaction-ring/src/InteractionRing.tsx",
          "name": "InteractionRingProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/interaction-ring/src/InteractionRing.tsx",
            "name": "InteractionRingProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "forceState": {
        "defaultValue": { "value": "{}" },
        "description": "",
        "name": "forceState",
        "parent": {
          "fileName": "leafygreen-ui/packages/interaction-ring/src/InteractionRing.tsx",
          "name": "InteractionRingProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/interaction-ring/src/InteractionRing.tsx",
            "name": "InteractionRingProps"
          }
        ],
        "required": false,
        "type": { "name": "State" }
      },
      "ignoreKeyboardContext": {
        "defaultValue": { "value": false },
        "description": "",
        "name": "ignoreKeyboardContext",
        "parent": {
          "fileName": "leafygreen-ui/packages/interaction-ring/src/InteractionRing.tsx",
          "name": "InteractionRingProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/interaction-ring/src/InteractionRing.tsx",
            "name": "InteractionRingProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/leafygreen-provider/src/LeafyGreenContext.tsx",
    "description": "",
    "displayName": "LeafyGreenProvider",
    "methods": [],
    "props": {
      "popoverPortalContainer": {
        "defaultValue": null,
        "description": "",
        "name": "popoverPortalContainer",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/leafygreen-provider/src/LeafyGreenContext.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "{ portalContainer?: HTMLElement; scrollContainer?: HTMLElement; }"
        }
      },
      "baseFontSize": {
        "defaultValue": null,
        "description": "",
        "name": "baseFontSize",
        "parent": {
          "fileName": "leafygreen-ui/packages/leafygreen-provider/src/TypographyContext.tsx",
          "name": "TypographyProviderProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/leafygreen-provider/src/TypographyContext.tsx",
            "name": "TypographyProviderProps"
          }
        ],
        "required": false,
        "type": { "name": "FontSize" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/leafygreen-provider/src/PopoverContext.tsx",
    "description": "",
    "displayName": "PopoverProvider",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/leafygreen-provider/src/PortalContext.tsx",
    "description": "",
    "displayName": "PortalContext",
    "methods": [],
    "props": {
      "popover": {
        "defaultValue": { "value": "defaultPortalContextValues.popover" },
        "description": "",
        "name": "popover",
        "parent": {
          "fileName": "leafygreen-ui/packages/leafygreen-provider/src/PortalContext.tsx",
          "name": "PortalContext"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/leafygreen-provider/src/PortalContext.tsx",
            "name": "PortalContext"
          }
        ],
        "required": false,
        "type": {
          "name": "{ portalContainer?: HTMLElement; scrollContainer?: HTMLElement; }"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/leafygreen-provider/src/TypographyContext.tsx",
    "description": "",
    "displayName": "TypographyProvider",
    "methods": [],
    "props": {
      "baseFontSize": {
        "defaultValue": { "value": 14 },
        "description": "",
        "name": "baseFontSize",
        "parent": {
          "fileName": "leafygreen-ui/packages/leafygreen-provider/src/TypographyContext.tsx",
          "name": "TypographyProviderProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/leafygreen-provider/src/TypographyContext.tsx",
            "name": "TypographyProviderProps"
          }
        ],
        "required": false,
        "type": { "name": "FontSize" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/leafygreen-provider/src/UsingKeyboardContext.tsx",
    "description": "",
    "displayName": "UsingKeyboardProvider",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/leafygreen-provider/src/index.ts",
    "description": "",
    "displayName": "src",
    "methods": [],
    "props": {
      "popover": {
        "defaultValue": { "value": "defaultPortalContextValues.popover" },
        "description": "",
        "name": "popover",
        "parent": {
          "fileName": "leafygreen-ui/packages/leafygreen-provider/src/PortalContext.tsx",
          "name": "PortalContext"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/leafygreen-provider/src/PortalContext.tsx",
            "name": "PortalContext"
          }
        ],
        "required": false,
        "type": {
          "name": "{ portalContainer?: HTMLElement; scrollContainer?: HTMLElement; }"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/leafygreen-provider/src/index.ts",
    "description": "",
    "displayName": "PopoverProvider",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/leafygreen-provider/src/index.ts",
    "description": "",
    "displayName": "LeafyGreenProvider",
    "methods": [],
    "props": {
      "popoverPortalContainer": {
        "defaultValue": null,
        "description": "",
        "name": "popoverPortalContainer",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/leafygreen-provider/src/LeafyGreenContext.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "{ portalContainer?: HTMLElement; scrollContainer?: HTMLElement; }"
        }
      },
      "baseFontSize": {
        "defaultValue": null,
        "description": "",
        "name": "baseFontSize",
        "parent": {
          "fileName": "leafygreen-ui/packages/leafygreen-provider/src/TypographyContext.tsx",
          "name": "TypographyProviderProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/leafygreen-provider/src/TypographyContext.tsx",
            "name": "TypographyProviderProps"
          }
        ],
        "required": false,
        "type": { "name": "FontSize" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/lib/src/createUniqueClassName/index.ts",
    "description": "",
    "displayName": "createUniqueClassName",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/lib/src/getNodeTextContent/index.ts",
    "description": "Returns the text string of a React node",
    "displayName": "getNodeTextContent",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/lib/src/index.ts",
    "description": "Helper type to check if element is a specific React Component",
    "displayName": "isComponentType",
    "methods": [],
    "props": {}
  },
  {
    "tags": { "param": "name Name of element we want to reference." },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/lib/src/index.ts",
    "description": "Utility for making it easier to couple a React Component to a css selector.\nUseful when writing css selectors that rely on interactivity, i.e. :hover.\nExample:\n const checkBoxWrapper = createDataProp('checkbox-wrapper');\n // Used as selector:\n css`&:hover ${checkboxWrapper.selector} { }`\n // Used on React Component\n <div {...checkboxWrapper.prop} />",
    "displayName": "createDataProp",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/lib/src/index.ts",
    "description": "Helper function to use the typechecker to catch when\nnot all cases of a type have been handled.\n\nExample 1:\n  let color: 'red' | 'blue' | 'green';\n  switch (color) {\n     case 'red':\n       ...\n       break;\n     case 'blue':\n       ...\n       break;\n     default:\n       enforceExhaustive(color);\n                         ^^^^^\n         Argument of type 'string' is not assignable to parameter of type 'never'.\n  }\n\nExample 2:\n  let key: number | string | symbol;\n\n  if (typeof key === 'string') {\n    ...\n    return;\n  }\n\n  if (typeof key === 'number') {\n     ...\n     return;\n  }\n\n  enforceExhaustive(key);\n                    ^^^\n    Argument of type 'symbol' is not assignable to parameter of type 'never'.",
    "displayName": "enforceExhaustive",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/lib/src/index.ts",
    "description": "",
    "displayName": "createUniqueClassName",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/lib/src/index.ts",
    "description": "Returns the text string of a React node",
    "displayName": "src",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/lib/src/index.ts",
    "description": "Object mapping keyCodes to keys",
    "displayName": "keyMap",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/lib/src/index.ts",
    "description": "An enum of accepted values for the \"aria-current\" attribute, used for\nindicating current/active state across several contexts.\n\nThe values \"false\", the empty string, and an ommission of this attribute\nare all treated identically by user agents and screen readers.\n\nW3C Recommendation: https://www.w3.org/TR/wai-aria-1.1/#aria-current",
    "displayName": "AriaCurrentValue",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/lib/src/typeIs.ts",
    "description": "",
    "displayName": "element",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/lib/src/typeIs.ts",
    "description": "",
    "displayName": "button",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/lib/src/typeIs.ts",
    "description": "",
    "displayName": "input",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/lib/src/typeIs.ts",
    "description": "",
    "displayName": "array",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "param": "props.color Determines the color of the logo.\nprops.height Determines height of the <Logo /> component."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/logo/src/AtlasForGovernmentLogoLockup.tsx",
    "description": "# AtlasForGovernmentLogoLockup\n\nReact Component that displays the Atlas for Government Logo Lockup.\n\n```\n<AtlasForGovernmentLogoLockup />\n```",
    "displayName": "AtlasForGovernmentLogoLockup",
    "methods": [],
    "props": {
      "color": {
        "defaultValue": { "value": "green-dark-2" },
        "description": "Determines Color of the Logo or LogoMark component.",
        "name": "color",
        "parent": {
          "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
          "name": "LogoProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "LogoProps"
          }
        ],
        "required": false,
        "type": { "name": "SupportedColors" }
      },
      "height": {
        "defaultValue": { "value": 40 },
        "description": "Determines height of the Logo or LogoMark component.",
        "name": "height",
        "parent": {
          "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
          "name": "LogoProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "LogoProps"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {
      "param": "props.color Determines the color of the logo.\nprops.height Determines height of the <Logo /> component."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/logo/src/AtlasLogoLockup.tsx",
    "description": "# AtlasLogoLockup\n\nReact Component that displays the Atlas Logo Lockup.\n\n```\n<AtlasLogoLockup />\n```",
    "displayName": "AtlasLogoLockup",
    "methods": [],
    "props": {
      "color": {
        "defaultValue": { "value": "green-dark-2" },
        "description": "Determines Color of the Logo or LogoMark component.",
        "name": "color",
        "parent": {
          "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
          "name": "LogoProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "LogoProps"
          }
        ],
        "required": false,
        "type": { "name": "SupportedColors" }
      },
      "height": {
        "defaultValue": { "value": 40 },
        "description": "Determines height of the Logo or LogoMark component.",
        "name": "height",
        "parent": {
          "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
          "name": "LogoProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "LogoProps"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/logo/src/AtlasLogoMark.tsx",
    "description": "",
    "displayName": "AtlasLogoMark",
    "methods": [],
    "props": {
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "height": {
        "defaultValue": null,
        "description": "",
        "name": "height",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "SVGAttributes"
          },
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      },
      "knockout": {
        "defaultValue": { "value": false },
        "description": "",
        "name": "knockout",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "size": {
        "defaultValue": { "value": 18 },
        "description": "",
        "name": "size",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "darkMode": {
        "defaultValue": { "value": false },
        "description": "",
        "name": "darkMode",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/logo/src/ChartsLogoMark.tsx",
    "description": "",
    "displayName": "ChartsLogoMark",
    "methods": [],
    "props": {
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "height": {
        "defaultValue": null,
        "description": "",
        "name": "height",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "SVGAttributes"
          },
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      },
      "knockout": {
        "defaultValue": { "value": false },
        "description": "",
        "name": "knockout",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "size": {
        "defaultValue": { "value": 18 },
        "description": "",
        "name": "size",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "darkMode": {
        "defaultValue": { "value": false },
        "description": "",
        "name": "darkMode",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      }
    }
  },
  {
    "tags": {
      "param": "props.color Determines the color of the logo.\nprops.height Determines height of the <Logo /> component."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/logo/src/CommunityEditionLogoLockup.tsx",
    "description": "# CommunityEditionLogoLockup\n\nReact Component that displays the Atlas Logo Lockup.\n\n```\n<CommunityEditionLogoLockup />\n```",
    "displayName": "CommunityEditionLogoLockup",
    "methods": [],
    "props": {
      "color": {
        "defaultValue": { "value": "green-dark-2" },
        "description": "Determines Color of the Logo or LogoMark component.",
        "name": "color",
        "parent": {
          "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
          "name": "LogoProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "LogoProps"
          }
        ],
        "required": false,
        "type": { "name": "SupportedColors" }
      },
      "height": {
        "defaultValue": { "value": 40 },
        "description": "Determines height of the Logo or LogoMark component.",
        "name": "height",
        "parent": {
          "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
          "name": "LogoProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "LogoProps"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {
      "param": "props.color Determines the color of the logo.\nprops.height Determines height of the <Logo /> component."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/logo/src/EnterpriseAdvancedLogoLockup.tsx",
    "description": "# EnterpriseAdvancedLogoLockup\n\nReact Component that displays the Atlas Logo Lockup.\n\n```\n<EnterpriseAdvancedLogoLockup />\n```",
    "displayName": "EnterpriseAdvancedLogoLockup",
    "methods": [],
    "props": {
      "color": {
        "defaultValue": { "value": "green-dark-2" },
        "description": "Determines Color of the Logo or LogoMark component.",
        "name": "color",
        "parent": {
          "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
          "name": "LogoProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "LogoProps"
          }
        ],
        "required": false,
        "type": { "name": "SupportedColors" }
      },
      "height": {
        "defaultValue": { "value": 40 },
        "description": "Determines height of the Logo or LogoMark component.",
        "name": "height",
        "parent": {
          "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
          "name": "LogoProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "LogoProps"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {
      "param": "props.color Determines the color of the logo.\nprops.height Determines height of the <Logo /> component."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/logo/src/MongoDBLogo.tsx",
    "description": "# MongoDBLogo\n\nReact Component that displays the MongoDB Logo.\n\n```\n<MongoDBLogo />\n```",
    "displayName": "MongoDBLogo",
    "methods": [],
    "props": {
      "color": {
        "defaultValue": { "value": "green-dark-2" },
        "description": "Determines Color of the Logo or LogoMark component.",
        "name": "color",
        "parent": {
          "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
          "name": "LogoProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "LogoProps"
          }
        ],
        "required": false,
        "type": { "name": "SupportedColors" }
      },
      "height": {
        "defaultValue": { "value": 40 },
        "description": "Determines height of the Logo or LogoMark component.",
        "name": "height",
        "parent": {
          "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
          "name": "LogoProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "LogoProps"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {
      "param": "props.color Determines the color of the logo.\nprops.height Determines height of the <Logo /> component."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/logo/src/MongoDBLogoMark.tsx",
    "description": "# MongoDBLogoMark\n\nReact Component that displays the MongoDB Logo Mark.\n\n```\n<MongoDBLogoMark />\n```",
    "displayName": "MongoDBLogoMark",
    "methods": [],
    "props": {
      "color": {
        "defaultValue": { "value": "green-dark-2" },
        "description": "Determines Color of the Logo or LogoMark component.",
        "name": "color",
        "parent": {
          "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
          "name": "LogoProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "LogoProps"
          }
        ],
        "required": false,
        "type": { "name": "SupportedColors" }
      },
      "height": {
        "defaultValue": { "value": 40 },
        "description": "Determines height of the Logo or LogoMark component.",
        "name": "height",
        "parent": {
          "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
          "name": "LogoProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "LogoProps"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {
      "param": "props.color Determines the color of the logo.\nprops.height Determines height of the <Logo /> component."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/logo/src/RealmLogoLockup.tsx",
    "description": "# RealmLogoLockup\n\nReact Component that displays the Realm Logo Lockup.\n\n```\n<RealmLogoLockup />\n```",
    "displayName": "RealmLogoLockup",
    "methods": [],
    "props": {
      "color": {
        "defaultValue": { "value": "green-dark-2" },
        "description": "Determines Color of the Logo or LogoMark component.",
        "name": "color",
        "parent": {
          "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
          "name": "LogoProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "LogoProps"
          }
        ],
        "required": false,
        "type": { "name": "SupportedColors" }
      },
      "height": {
        "defaultValue": { "value": 40 },
        "description": "Determines height of the Logo or LogoMark component.",
        "name": "height",
        "parent": {
          "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
          "name": "LogoProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "LogoProps"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/logo/src/RealmLogoMark.tsx",
    "description": "",
    "displayName": "RealmLogoMark",
    "methods": [],
    "props": {
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "height": {
        "defaultValue": null,
        "description": "",
        "name": "height",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "SVGAttributes"
          },
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      },
      "knockout": {
        "defaultValue": { "value": false },
        "description": "",
        "name": "knockout",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "size": {
        "defaultValue": { "value": 18 },
        "description": "",
        "name": "size",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "darkMode": {
        "defaultValue": { "value": false },
        "description": "",
        "name": "darkMode",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      }
    }
  },
  {
    "tags": {
      "param": "props.color Determines the color of the logo.\nprops.height Determines height of the <Logo /> component."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/logo/src/UniversityLogoLockup.tsx",
    "description": "# UniversityLogoLockup\n\nReact Component that displays the University Logo Lockup.\n\n```\n<UniversityLogoLockup />\n```",
    "displayName": "UniversityLogoLockup",
    "methods": [],
    "props": {
      "color": {
        "defaultValue": { "value": "green-dark-2" },
        "description": "Determines Color of the Logo or LogoMark component.",
        "name": "color",
        "parent": {
          "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
          "name": "LogoProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "LogoProps"
          }
        ],
        "required": false,
        "type": { "name": "SupportedColors" }
      },
      "height": {
        "defaultValue": { "value": 40 },
        "description": "Determines height of the Logo or LogoMark component.",
        "name": "height",
        "parent": {
          "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
          "name": "LogoProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "LogoProps"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {
      "param": "props.color Determines the color of the logo.\nprops.height Determines height of the <Logo /> component."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/logo/src/index.ts",
    "description": "# MongoDBLogo\n\nReact Component that displays the MongoDB Logo.\n\n```\n<MongoDBLogo />\n```",
    "displayName": "MongoDBLogo",
    "methods": [],
    "props": {
      "color": {
        "defaultValue": { "value": "green-dark-2" },
        "description": "Determines Color of the Logo or LogoMark component.",
        "name": "color",
        "parent": {
          "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
          "name": "LogoProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "LogoProps"
          }
        ],
        "required": false,
        "type": { "name": "SupportedColors" }
      },
      "height": {
        "defaultValue": { "value": 40 },
        "description": "Determines height of the Logo or LogoMark component.",
        "name": "height",
        "parent": {
          "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
          "name": "LogoProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "LogoProps"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {
      "param": "props.color Determines the color of the logo.\nprops.height Determines height of the <Logo /> component."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/logo/src/index.ts",
    "description": "# MongoDBLogoMark\n\nReact Component that displays the MongoDB Logo Mark.\n\n```\n<MongoDBLogoMark />\n```",
    "displayName": "MongoDBLogoMark",
    "methods": [],
    "props": {
      "color": {
        "defaultValue": { "value": "green-dark-2" },
        "description": "Determines Color of the Logo or LogoMark component.",
        "name": "color",
        "parent": {
          "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
          "name": "LogoProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "LogoProps"
          }
        ],
        "required": false,
        "type": { "name": "SupportedColors" }
      },
      "height": {
        "defaultValue": { "value": 40 },
        "description": "Determines height of the Logo or LogoMark component.",
        "name": "height",
        "parent": {
          "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
          "name": "LogoProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "LogoProps"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {
      "param": "props.color Determines the color of the logo.\nprops.height Determines height of the <Logo /> component."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/logo/src/index.ts",
    "description": "# AtlasLogoLockup\n\nReact Component that displays the Atlas Logo Lockup.\n\n```\n<AtlasLogoLockup />\n```",
    "displayName": "AtlasLogoLockup",
    "methods": [],
    "props": {
      "color": {
        "defaultValue": { "value": "green-dark-2" },
        "description": "Determines Color of the Logo or LogoMark component.",
        "name": "color",
        "parent": {
          "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
          "name": "LogoProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "LogoProps"
          }
        ],
        "required": false,
        "type": { "name": "SupportedColors" }
      },
      "height": {
        "defaultValue": { "value": 40 },
        "description": "Determines height of the Logo or LogoMark component.",
        "name": "height",
        "parent": {
          "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
          "name": "LogoProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "LogoProps"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {
      "param": "props.color Determines the color of the logo.\nprops.height Determines height of the <Logo /> component."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/logo/src/index.ts",
    "description": "# AtlasForGovernmentLogoLockup\n\nReact Component that displays the Atlas for Government Logo Lockup.\n\n```\n<AtlasForGovernmentLogoLockup />\n```",
    "displayName": "AtlasForGovernmentLogoLockup",
    "methods": [],
    "props": {
      "color": {
        "defaultValue": { "value": "green-dark-2" },
        "description": "Determines Color of the Logo or LogoMark component.",
        "name": "color",
        "parent": {
          "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
          "name": "LogoProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "LogoProps"
          }
        ],
        "required": false,
        "type": { "name": "SupportedColors" }
      },
      "height": {
        "defaultValue": { "value": 40 },
        "description": "Determines height of the Logo or LogoMark component.",
        "name": "height",
        "parent": {
          "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
          "name": "LogoProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "LogoProps"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {
      "param": "props.color Determines the color of the logo.\nprops.height Determines height of the <Logo /> component."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/logo/src/index.ts",
    "description": "# RealmLogoLockup\n\nReact Component that displays the Realm Logo Lockup.\n\n```\n<RealmLogoLockup />\n```",
    "displayName": "RealmLogoLockup",
    "methods": [],
    "props": {
      "color": {
        "defaultValue": { "value": "green-dark-2" },
        "description": "Determines Color of the Logo or LogoMark component.",
        "name": "color",
        "parent": {
          "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
          "name": "LogoProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "LogoProps"
          }
        ],
        "required": false,
        "type": { "name": "SupportedColors" }
      },
      "height": {
        "defaultValue": { "value": 40 },
        "description": "Determines height of the Logo or LogoMark component.",
        "name": "height",
        "parent": {
          "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
          "name": "LogoProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "LogoProps"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {
      "param": "props.color Determines the color of the logo.\nprops.height Determines height of the <Logo /> component."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/logo/src/index.ts",
    "description": "# EnterpriseAdvancedLogoLockup\n\nReact Component that displays the Atlas Logo Lockup.\n\n```\n<EnterpriseAdvancedLogoLockup />\n```",
    "displayName": "EnterpriseAdvancedLogoLockup",
    "methods": [],
    "props": {
      "color": {
        "defaultValue": { "value": "green-dark-2" },
        "description": "Determines Color of the Logo or LogoMark component.",
        "name": "color",
        "parent": {
          "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
          "name": "LogoProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "LogoProps"
          }
        ],
        "required": false,
        "type": { "name": "SupportedColors" }
      },
      "height": {
        "defaultValue": { "value": 40 },
        "description": "Determines height of the Logo or LogoMark component.",
        "name": "height",
        "parent": {
          "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
          "name": "LogoProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "LogoProps"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {
      "param": "props.color Determines the color of the logo.\nprops.height Determines height of the <Logo /> component."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/logo/src/index.ts",
    "description": "# CommunityEditionLogoLockup\n\nReact Component that displays the Atlas Logo Lockup.\n\n```\n<CommunityEditionLogoLockup />\n```",
    "displayName": "CommunityEditionLogoLockup",
    "methods": [],
    "props": {
      "color": {
        "defaultValue": { "value": "green-dark-2" },
        "description": "Determines Color of the Logo or LogoMark component.",
        "name": "color",
        "parent": {
          "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
          "name": "LogoProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "LogoProps"
          }
        ],
        "required": false,
        "type": { "name": "SupportedColors" }
      },
      "height": {
        "defaultValue": { "value": 40 },
        "description": "Determines height of the Logo or LogoMark component.",
        "name": "height",
        "parent": {
          "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
          "name": "LogoProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "LogoProps"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {
      "param": "props.color Determines the color of the logo.\nprops.height Determines height of the <Logo /> component."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/logo/src/index.ts",
    "description": "# UniversityLogoLockup\n\nReact Component that displays the University Logo Lockup.\n\n```\n<UniversityLogoLockup />\n```",
    "displayName": "UniversityLogoLockup",
    "methods": [],
    "props": {
      "color": {
        "defaultValue": { "value": "green-dark-2" },
        "description": "Determines Color of the Logo or LogoMark component.",
        "name": "color",
        "parent": {
          "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
          "name": "LogoProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "LogoProps"
          }
        ],
        "required": false,
        "type": { "name": "SupportedColors" }
      },
      "height": {
        "defaultValue": { "value": 40 },
        "description": "Determines height of the Logo or LogoMark component.",
        "name": "height",
        "parent": {
          "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
          "name": "LogoProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "LogoProps"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/logo/src/index.ts",
    "description": "",
    "displayName": "AtlasLogoMark",
    "methods": [],
    "props": {
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "height": {
        "defaultValue": null,
        "description": "",
        "name": "height",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "SVGAttributes"
          },
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      },
      "knockout": {
        "defaultValue": { "value": false },
        "description": "",
        "name": "knockout",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "size": {
        "defaultValue": { "value": 18 },
        "description": "",
        "name": "size",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "darkMode": {
        "defaultValue": { "value": false },
        "description": "",
        "name": "darkMode",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/logo/src/index.ts",
    "description": "",
    "displayName": "RealmLogoMark",
    "methods": [],
    "props": {
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "height": {
        "defaultValue": null,
        "description": "",
        "name": "height",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "SVGAttributes"
          },
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      },
      "knockout": {
        "defaultValue": { "value": false },
        "description": "",
        "name": "knockout",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "size": {
        "defaultValue": { "value": 18 },
        "description": "",
        "name": "size",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "darkMode": {
        "defaultValue": { "value": false },
        "description": "",
        "name": "darkMode",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/logo/src/index.ts",
    "description": "",
    "displayName": "ChartsLogoMark",
    "methods": [],
    "props": {
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "height": {
        "defaultValue": null,
        "description": "",
        "name": "height",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "SVGAttributes"
          },
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      },
      "knockout": {
        "defaultValue": { "value": false },
        "description": "",
        "name": "knockout",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "size": {
        "defaultValue": { "value": 18 },
        "description": "",
        "name": "size",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "darkMode": {
        "defaultValue": { "value": false },
        "description": "",
        "name": "darkMode",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/logo/src/utils.ts",
    "description": "",
    "displayName": "getAccessibleProps",
    "methods": [],
    "props": {
      "role": {
        "defaultValue": null,
        "description": "",
        "name": "role",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": { "name": "string" }
      },
      "aria-label": {
        "defaultValue": null,
        "description": "",
        "name": "aria-label",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/logo/src/utils.ts",
    "description": "",
    "displayName": "getColor",
    "methods": [],
    "props": {
      "knockout": {
        "defaultValue": null,
        "description": "",
        "name": "knockout",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": { "name": "boolean" }
      },
      "darkMode": {
        "defaultValue": null,
        "description": "",
        "name": "darkMode",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": { "name": "boolean" }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": { "name": "number" }
      },
      "flat": {
        "defaultValue": null,
        "description": "",
        "name": "flat",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": { "name": "string" }
      },
      "gradient": {
        "defaultValue": null,
        "description": "",
        "name": "gradient",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/logo/src/utils.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
    "description": "",
    "displayName": "MarketingModal",
    "methods": [],
    "props": {
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
          "name": "MarketingModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
            "name": "MarketingModalProps"
          }
        ],
        "required": true,
        "type": { "name": "string" }
      },
      "graphic": {
        "defaultValue": null,
        "description": "",
        "name": "graphic",
        "parent": {
          "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
          "name": "MarketingModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
            "name": "MarketingModalProps"
          }
        ],
        "required": true,
        "type": { "name": "React.ReactElement" }
      },
      "graphicStyle": {
        "defaultValue": { "value": "center" },
        "description": "",
        "name": "graphicStyle",
        "parent": {
          "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
          "name": "MarketingModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
            "name": "MarketingModalProps"
          }
        ],
        "required": false,
        "type": { "name": "GraphicStyle" }
      },
      "open": {
        "defaultValue": null,
        "description": "",
        "name": "open",
        "parent": {
          "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
          "name": "MarketingModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
            "name": "MarketingModalProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "onButtonClick": {
        "defaultValue": null,
        "description": "",
        "name": "onButtonClick",
        "parent": {
          "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
          "name": "MarketingModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
            "name": "MarketingModalProps"
          }
        ],
        "required": false,
        "type": { "name": "() => void" }
      },
      "onLinkClick": {
        "defaultValue": null,
        "description": "",
        "name": "onLinkClick",
        "parent": {
          "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
          "name": "MarketingModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
            "name": "MarketingModalProps"
          }
        ],
        "required": false,
        "type": { "name": "() => void" }
      },
      "onClose": {
        "defaultValue": null,
        "description": "",
        "name": "onClose",
        "parent": {
          "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
          "name": "MarketingModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
            "name": "MarketingModalProps"
          }
        ],
        "required": false,
        "type": { "name": "() => void" }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
          "name": "MarketingModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
            "name": "MarketingModalProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "buttonText": {
        "defaultValue": null,
        "description": "",
        "name": "buttonText",
        "parent": {
          "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
          "name": "MarketingModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
            "name": "MarketingModalProps"
          }
        ],
        "required": true,
        "type": { "name": "string" }
      },
      "linkText": {
        "defaultValue": null,
        "description": "",
        "name": "linkText",
        "parent": {
          "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
          "name": "MarketingModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
            "name": "MarketingModalProps"
          }
        ],
        "required": true,
        "type": { "name": "string" }
      },
      "darkMode": {
        "defaultValue": null,
        "description": "",
        "name": "darkMode",
        "parent": {
          "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
          "name": "MarketingModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
            "name": "MarketingModalProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "closeIconColor": {
        "defaultValue": { "value": "CloseIconColor.Dark" },
        "description": "",
        "name": "closeIconColor",
        "parent": {
          "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
          "name": "MarketingModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
            "name": "MarketingModalProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "blobPosition": {
        "defaultValue": { "value": "top left" },
        "description": "",
        "name": "blobPosition",
        "parent": {
          "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
          "name": "MarketingModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
            "name": "MarketingModalProps"
          }
        ],
        "required": false,
        "type": { "name": "BlobPosition" }
      },
      "showBlob": {
        "defaultValue": { "value": false },
        "description": "",
        "name": "showBlob",
        "parent": {
          "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
          "name": "MarketingModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
            "name": "MarketingModalProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/marketing-modal/src/blobs.tsx",
    "description": "",
    "displayName": "svgBlobs",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/marketing-modal/src/index.ts",
    "description": "",
    "displayName": "src",
    "methods": [],
    "props": {
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
          "name": "MarketingModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
            "name": "MarketingModalProps"
          }
        ],
        "required": true,
        "type": { "name": "string" }
      },
      "graphic": {
        "defaultValue": null,
        "description": "",
        "name": "graphic",
        "parent": {
          "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
          "name": "MarketingModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
            "name": "MarketingModalProps"
          }
        ],
        "required": true,
        "type": { "name": "React.ReactElement" }
      },
      "graphicStyle": {
        "defaultValue": { "value": "center" },
        "description": "",
        "name": "graphicStyle",
        "parent": {
          "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
          "name": "MarketingModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
            "name": "MarketingModalProps"
          }
        ],
        "required": false,
        "type": { "name": "GraphicStyle" }
      },
      "open": {
        "defaultValue": null,
        "description": "",
        "name": "open",
        "parent": {
          "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
          "name": "MarketingModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
            "name": "MarketingModalProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "onButtonClick": {
        "defaultValue": null,
        "description": "",
        "name": "onButtonClick",
        "parent": {
          "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
          "name": "MarketingModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
            "name": "MarketingModalProps"
          }
        ],
        "required": false,
        "type": { "name": "() => void" }
      },
      "onLinkClick": {
        "defaultValue": null,
        "description": "",
        "name": "onLinkClick",
        "parent": {
          "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
          "name": "MarketingModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
            "name": "MarketingModalProps"
          }
        ],
        "required": false,
        "type": { "name": "() => void" }
      },
      "onClose": {
        "defaultValue": null,
        "description": "",
        "name": "onClose",
        "parent": {
          "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
          "name": "MarketingModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
            "name": "MarketingModalProps"
          }
        ],
        "required": false,
        "type": { "name": "() => void" }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
          "name": "MarketingModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
            "name": "MarketingModalProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "buttonText": {
        "defaultValue": null,
        "description": "",
        "name": "buttonText",
        "parent": {
          "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
          "name": "MarketingModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
            "name": "MarketingModalProps"
          }
        ],
        "required": true,
        "type": { "name": "string" }
      },
      "linkText": {
        "defaultValue": null,
        "description": "",
        "name": "linkText",
        "parent": {
          "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
          "name": "MarketingModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
            "name": "MarketingModalProps"
          }
        ],
        "required": true,
        "type": { "name": "string" }
      },
      "darkMode": {
        "defaultValue": null,
        "description": "",
        "name": "darkMode",
        "parent": {
          "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
          "name": "MarketingModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
            "name": "MarketingModalProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "closeIconColor": {
        "defaultValue": { "value": "CloseIconColor.Dark" },
        "description": "",
        "name": "closeIconColor",
        "parent": {
          "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
          "name": "MarketingModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
            "name": "MarketingModalProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "blobPosition": {
        "defaultValue": { "value": "top left" },
        "description": "",
        "name": "blobPosition",
        "parent": {
          "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
          "name": "MarketingModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
            "name": "MarketingModalProps"
          }
        ],
        "required": false,
        "type": { "name": "BlobPosition" }
      },
      "showBlob": {
        "defaultValue": { "value": false },
        "description": "",
        "name": "showBlob",
        "parent": {
          "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
          "name": "MarketingModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/marketing-modal/src/MarketingModal.tsx",
            "name": "MarketingModalProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/marketing-modal/src/index.ts",
    "description": "",
    "displayName": "svgBlobs",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/menu/src/FocusableMenuItem.tsx",
    "description": "For internal use only: Component to allow us to include non-MenuItems in a Menu's group of focusable elements",
    "displayName": "FocusableMenuItem",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "param": "props.children Content to appear inside of Menu.\nprops.open Boolean to describe whether or not Menu is open.\nprops.setOpen Callback to change the open state of the Menu.\nprops.shouldClose Callback to determine whether or not Menu should close when user tries to close it.\nprops.className Classname applied to Menu.\nprops.align Alignment of Menu relative to another element: `top`, `bottom`, `left`, `right`.\nprops.justify Justification of Menu relative to another element: `start`, `middle`, `end`.\nprops.refEl Reference element that Menu should be positioned against.\nprops.usePortal Boolean to describe if content should be portaled to end of DOM, or appear in DOM tree.\nprops.trigger Trigger element can be ReactNode or function, and, if present, internally manages active state of Menu."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/menu/src/Menu.tsx",
    "description": "# Menu\n\nMenu component\n\n```\n<button>\n<Menu open={true}>\n <MenuItem>Hello World!</MenuItem>\n</Menu>\n</button>\n```",
    "displayName": "Menu",
    "methods": [],
    "props": {
      "trigger": {
        "defaultValue": null,
        "description": "A slot for the element used to trigger the Menu. Passing a trigger allows\nMenu to control opening and closing itself internally.",
        "name": "trigger",
        "parent": {
          "fileName": "leafygreen-ui/packages/menu/src/Menu.tsx",
          "name": "MenuProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/menu/src/Menu.tsx",
            "name": "MenuProps"
          }
        ],
        "required": false,
        "type": { "name": "any" }
      },
      "open": {
        "defaultValue": null,
        "description": "Determines the open state of the menu\n\ndefault: `false`",
        "name": "open",
        "parent": {
          "fileName": "leafygreen-ui/packages/menu/src/Menu.tsx",
          "name": "MenuProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/menu/src/Menu.tsx",
            "name": "MenuProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "setOpen": {
        "defaultValue": null,
        "description": "Callback to change the open state of the Menu.",
        "name": "setOpen",
        "parent": {
          "fileName": "leafygreen-ui/packages/menu/src/Menu.tsx",
          "name": "MenuProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/menu/src/Menu.tsx",
            "name": "MenuProps"
          }
        ],
        "required": false,
        "type": { "name": "React.Dispatch<React.SetStateAction<boolean>>" }
      },
      "shouldClose": {
        "defaultValue": { "value": "() => true" },
        "description": "Callback to determine whether or not Menu should close when user tries to close it.",
        "name": "shouldClose",
        "parent": {
          "fileName": "leafygreen-ui/packages/menu/src/Menu.tsx",
          "name": "MenuProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/menu/src/Menu.tsx",
            "name": "MenuProps"
          }
        ],
        "required": false,
        "type": { "name": "() => boolean" }
      },
      "className": {
        "defaultValue": null,
        "description": "Class name applied to popover content container.",
        "name": "className",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "children": {
        "defaultValue": null,
        "description": "Content that will appear inside of the popover component.",
        "name": "children",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": { "name": "any" }
      },
      "onClick": {
        "defaultValue": null,
        "description": "Click event handler passed to the root div element within the portal container.",
        "name": "onClick",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "React.MouseEventHandler" }
      },
      "usePortal": {
        "defaultValue": { "value": true },
        "description": "Specifies that the popover content should be rendered at the end of the DOM,\nrather than in the DOM tree.\n\ndefault: `true`",
        "name": "usePortal",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "portalClassName": {
        "defaultValue": null,
        "description": "When usePortal is `true`, specifies a class name to apply to the root element of the portal.",
        "name": "portalClassName",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "portalContainer": {
        "defaultValue": null,
        "description": "When usePortal is `true`, specifies an element to portal within. The default behavior is to generate a div at the end of the document to render within.",
        "name": "portalContainer",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "HTMLElement" }
      },
      "scrollContainer": {
        "defaultValue": null,
        "description": "When usePortal is `true`, specifies the scrollable element to position relative to.",
        "name": "scrollContainer",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "HTMLElement" }
      },
      "popoverZIndex": {
        "defaultValue": null,
        "description": "Number that controls the z-index of the popover element directly.",
        "name": "popoverZIndex",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "align": {
        "defaultValue": { "value": "Align.Bottom" },
        "description": "Determines the alignment of the popover content relative to the trigger element\n\ndefault: `bottom`",
        "name": "align",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Align" }
      },
      "justify": {
        "defaultValue": { "value": "Justify.End" },
        "description": "Determines the justification of the popover content relative to the trigger element\n\ndefault: `start`",
        "name": "justify",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Justify" }
      },
      "refEl": {
        "defaultValue": null,
        "description": "A reference to the element against which the popover component will be positioned.",
        "name": "refEl",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "React.RefObject<HTMLElement>" }
      },
      "spacing": {
        "defaultValue": null,
        "description": "Specifies the amount of spacing (in pixels) between the trigger element and the Popover content.\n\ndefault: `10`",
        "name": "spacing",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "adjustOnMutation": {
        "defaultValue": { "value": false },
        "description": "Should the Popover auto adjust its content when the DOM changes (using MutationObserver).\n\ndefault: false",
        "name": "adjustOnMutation",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      }
    }
  },
  {
    "tags": {
      "param": "props.className Classname applied to MenuGroup.\nprops.children Content to appear inside of the MenuGroup."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/menu/src/MenuGroup.tsx",
    "description": "# MenuGroup\n\n```\n<MenuGroup>\n<MenuGroup>Hello World!</MenuGroup>\n</MenuGroup>\n```",
    "displayName": "MenuGroup",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Content that will appear inside of MenuGroup component.",
        "name": "children",
        "parent": {
          "fileName": "leafygreen-ui/packages/menu/src/MenuGroup.tsx",
          "name": "MenuGroupProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/menu/src/MenuGroup.tsx",
            "name": "MenuGroupProps"
          }
        ],
        "required": true,
        "type": { "name": "ReactNode" }
      },
      "className": {
        "defaultValue": null,
        "description": "className that will be applied to root MenuGroup element.",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/menu/src/MenuGroup.tsx",
          "name": "MenuGroupProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/menu/src/MenuGroup.tsx",
            "name": "MenuGroupProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/menu/src/MenuSeparator.tsx",
    "description": "",
    "displayName": "MenuSeparator",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/menu/src/MenuSeparator.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {
      "param": "props.children Content to appear inside of Menu.\nprops.open Boolean to describe whether or not Menu is open.\nprops.setOpen Callback to change the open state of the Menu.\nprops.shouldClose Callback to determine whether or not Menu should close when user tries to close it.\nprops.className Classname applied to Menu.\nprops.align Alignment of Menu relative to another element: `top`, `bottom`, `left`, `right`.\nprops.justify Justification of Menu relative to another element: `start`, `middle`, `end`.\nprops.refEl Reference element that Menu should be positioned against.\nprops.usePortal Boolean to describe if content should be portaled to end of DOM, or appear in DOM tree.\nprops.trigger Trigger element can be ReactNode or function, and, if present, internally manages active state of Menu."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/menu/src/index.ts",
    "description": "# Menu\n\nMenu component\n\n```\n<button>\n<Menu open={true}>\n <MenuItem>Hello World!</MenuItem>\n</Menu>\n</button>\n```",
    "displayName": "Menu",
    "methods": [],
    "props": {
      "trigger": {
        "defaultValue": null,
        "description": "A slot for the element used to trigger the Menu. Passing a trigger allows\nMenu to control opening and closing itself internally.",
        "name": "trigger",
        "parent": {
          "fileName": "leafygreen-ui/packages/menu/src/Menu.tsx",
          "name": "MenuProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/menu/src/Menu.tsx",
            "name": "MenuProps"
          }
        ],
        "required": false,
        "type": { "name": "any" }
      },
      "open": {
        "defaultValue": null,
        "description": "Determines the open state of the menu\n\ndefault: `false`",
        "name": "open",
        "parent": {
          "fileName": "leafygreen-ui/packages/menu/src/Menu.tsx",
          "name": "MenuProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/menu/src/Menu.tsx",
            "name": "MenuProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "setOpen": {
        "defaultValue": null,
        "description": "Callback to change the open state of the Menu.",
        "name": "setOpen",
        "parent": {
          "fileName": "leafygreen-ui/packages/menu/src/Menu.tsx",
          "name": "MenuProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/menu/src/Menu.tsx",
            "name": "MenuProps"
          }
        ],
        "required": false,
        "type": { "name": "React.Dispatch<React.SetStateAction<boolean>>" }
      },
      "shouldClose": {
        "defaultValue": { "value": "() => true" },
        "description": "Callback to determine whether or not Menu should close when user tries to close it.",
        "name": "shouldClose",
        "parent": {
          "fileName": "leafygreen-ui/packages/menu/src/Menu.tsx",
          "name": "MenuProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/menu/src/Menu.tsx",
            "name": "MenuProps"
          }
        ],
        "required": false,
        "type": { "name": "() => boolean" }
      },
      "className": {
        "defaultValue": null,
        "description": "Class name applied to popover content container.",
        "name": "className",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "children": {
        "defaultValue": null,
        "description": "Content that will appear inside of the popover component.",
        "name": "children",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": { "name": "any" }
      },
      "onClick": {
        "defaultValue": null,
        "description": "Click event handler passed to the root div element within the portal container.",
        "name": "onClick",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "React.MouseEventHandler" }
      },
      "usePortal": {
        "defaultValue": { "value": true },
        "description": "Specifies that the popover content should be rendered at the end of the DOM,\nrather than in the DOM tree.\n\ndefault: `true`",
        "name": "usePortal",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "portalClassName": {
        "defaultValue": null,
        "description": "When usePortal is `true`, specifies a class name to apply to the root element of the portal.",
        "name": "portalClassName",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "portalContainer": {
        "defaultValue": null,
        "description": "When usePortal is `true`, specifies an element to portal within. The default behavior is to generate a div at the end of the document to render within.",
        "name": "portalContainer",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "HTMLElement" }
      },
      "scrollContainer": {
        "defaultValue": null,
        "description": "When usePortal is `true`, specifies the scrollable element to position relative to.",
        "name": "scrollContainer",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "HTMLElement" }
      },
      "popoverZIndex": {
        "defaultValue": null,
        "description": "Number that controls the z-index of the popover element directly.",
        "name": "popoverZIndex",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "align": {
        "defaultValue": { "value": "Align.Bottom" },
        "description": "Determines the alignment of the popover content relative to the trigger element\n\ndefault: `bottom`",
        "name": "align",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Align" }
      },
      "justify": {
        "defaultValue": { "value": "Justify.End" },
        "description": "Determines the justification of the popover content relative to the trigger element\n\ndefault: `start`",
        "name": "justify",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Justify" }
      },
      "refEl": {
        "defaultValue": null,
        "description": "A reference to the element against which the popover component will be positioned.",
        "name": "refEl",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "React.RefObject<HTMLElement>" }
      },
      "spacing": {
        "defaultValue": null,
        "description": "Specifies the amount of spacing (in pixels) between the trigger element and the Popover content.\n\ndefault: `10`",
        "name": "spacing",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "adjustOnMutation": {
        "defaultValue": { "value": false },
        "description": "Should the Popover auto adjust its content when the DOM changes (using MutationObserver).\n\ndefault: false",
        "name": "adjustOnMutation",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/menu/src/index.ts",
    "description": "",
    "displayName": "MenuSeparator",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/menu/src/MenuSeparator.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/menu/src/index.ts",
    "description": "For internal use only: Component to allow us to include non-MenuItems in a Menu's group of focusable elements",
    "displayName": "FocusableMenuItem",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/menu/src/styles.ts",
    "description": "Base styles",
    "displayName": "menuItemContainerStyle",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/menu/src/styles.ts",
    "description": "",
    "displayName": "menuItemHeight",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/menu/src/styles.ts",
    "description": "Hover Styles",
    "displayName": "getHoverStyles",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/menu/src/styles.ts",
    "description": "Active styles",
    "displayName": "activeMenuItemContainerStyle",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/menu/src/styles.ts",
    "description": "Disabled styles",
    "displayName": "disabledMenuItemContainerStyle",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/menu/src/styles.ts",
    "description": "Focused styles",
    "displayName": "focusedMenuItemContainerStyle",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/menu/src/styles.ts",
    "description": "",
    "displayName": "getFocusedStyles",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/modal/src/Footer.tsx",
    "description": "",
    "displayName": "Footer",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/modal/src/Footer.tsx",
          "name": "FooterProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/modal/src/Footer.tsx",
            "name": "FooterProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "darkMode": {
        "defaultValue": null,
        "description": "",
        "name": "darkMode",
        "parent": {
          "fileName": "leafygreen-ui/packages/modal/src/Footer.tsx",
          "name": "FooterProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/modal/src/Footer.tsx",
            "name": "FooterProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      }
    }
  },
  {
    "tags": {
      "param": "props.open Boolean to describe whether or not Modal is open.\nprops.size String to determine size of Modal. ['small', 'default', 'large']\nprops.setOpen Callback to change the open state of Modal.\nprops.children Content to appear inside of Modal container.\nprops.shouldClose Callback to determine whether or not Modal should close when user tries to close it.\nprops.className className applied to container div.\nprops.contentClassName className applied to overlay div.\nprops.initialFocus By default, when a focus trap is activated the first element in the focus trap's tab order will receive focus. With this option you can specify a different element to receive that initial focus. Selector string (which will be passed to document.querySelector() to find the DOM node).\nprops.closeIconColor Choose between dark or light close icon. Default is dark."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/modal/src/Modal.tsx",
    "description": "# Modal\n\n Modals place content on top of main window.\n\n```\n<Modal\nopen\nsize=\"large\"\nsetOpen={setOpen}\nshouldClose={() => console.log('Modal is closing now!')}\n>\nModal content!\n</Modal>\n```",
    "displayName": "Modal",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Content that will appear inside of the Modal component.",
        "name": "children",
        "parent": {
          "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": true,
        "type": { "name": "React.ReactNode" }
      },
      "open": {
        "defaultValue": { "value": ": `false`" },
        "description": "Determines the open state of the modal",
        "name": "open",
        "parent": {
          "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "size": {
        "defaultValue": null,
        "description": "Specifies the size of the Modal.\n\ndefault: `default`",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": { "name": "ModalSize" }
      },
      "setOpen": {
        "defaultValue": null,
        "description": "Callback to change the open state of the Modal.",
        "name": "setOpen",
        "parent": {
          "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": { "name": "(open: boolean) => any" }
      },
      "shouldClose": {
        "defaultValue": null,
        "description": "Callback to determine whether or not Modal should close when user tries to close it.",
        "name": "shouldClose",
        "parent": {
          "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": { "name": "() => boolean" }
      },
      "className": {
        "defaultValue": null,
        "description": "className applied to root div.",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "contentClassName": {
        "defaultValue": null,
        "description": "className applied to overlay div.\nDisclaimer: This prop may be deprecated in future versions of Modal",
        "name": "contentClassName",
        "parent": {
          "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "initialFocus": {
        "defaultValue": null,
        "description": "By default, when a focus trap is activated the first element in the focus trap's tab order will receive focus.\nWith this option you can specify a different element to receive that initial focus.\nSelector string (which will be passed to document.querySelector() to find the DOM node)",
        "name": "initialFocus",
        "parent": {
          "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "darkMode": {
        "defaultValue": null,
        "description": "",
        "name": "darkMode",
        "parent": {
          "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "closeIconColor": {
        "defaultValue": null,
        "description": "",
        "name": "closeIconColor",
        "parent": {
          "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/modal/src/ModalView.tsx",
    "description": "",
    "displayName": "ModalView",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Content that will appear inside of the Modal component.",
        "name": "children",
        "parent": {
          "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": true,
        "type": { "name": "React.ReactNode" }
      },
      "open": {
        "defaultValue": { "value": false },
        "description": "Determines the open state of the modal",
        "name": "open",
        "parent": {
          "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "size": {
        "defaultValue": { "value": "default" },
        "description": "Specifies the size of the Modal.\n\ndefault: `default`",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": { "name": "ModalSize" }
      },
      "setOpen": {
        "defaultValue": { "value": "() => {}" },
        "description": "Callback to change the open state of the Modal.",
        "name": "setOpen",
        "parent": {
          "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": { "name": "(open: boolean) => any" }
      },
      "shouldClose": {
        "defaultValue": { "value": "() => true" },
        "description": "Callback to determine whether or not Modal should close when user tries to close it.",
        "name": "shouldClose",
        "parent": {
          "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": { "name": "() => boolean" }
      },
      "className": {
        "defaultValue": null,
        "description": "className applied to root div.",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "contentClassName": {
        "defaultValue": null,
        "description": "className applied to overlay div.\nDisclaimer: This prop may be deprecated in future versions of Modal",
        "name": "contentClassName",
        "parent": {
          "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "initialFocus": {
        "defaultValue": null,
        "description": "By default, when a focus trap is activated the first element in the focus trap's tab order will receive focus.\nWith this option you can specify a different element to receive that initial focus.\nSelector string (which will be passed to document.querySelector() to find the DOM node)",
        "name": "initialFocus",
        "parent": {
          "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "darkMode": {
        "defaultValue": { "value": false },
        "description": "",
        "name": "darkMode",
        "parent": {
          "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "closeIconColor": {
        "defaultValue": { "value": "default" },
        "description": "",
        "name": "closeIconColor",
        "parent": {
          "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/modal/src/index.ts",
    "description": "",
    "displayName": "Footer",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/modal/src/Footer.tsx",
          "name": "FooterProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/modal/src/Footer.tsx",
            "name": "FooterProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "darkMode": {
        "defaultValue": null,
        "description": "",
        "name": "darkMode",
        "parent": {
          "fileName": "leafygreen-ui/packages/modal/src/Footer.tsx",
          "name": "FooterProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/modal/src/Footer.tsx",
            "name": "FooterProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/modal/src/index.ts",
    "description": "",
    "displayName": "ModalView",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Content that will appear inside of the Modal component.",
        "name": "children",
        "parent": {
          "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": true,
        "type": { "name": "React.ReactNode" }
      },
      "open": {
        "defaultValue": { "value": false },
        "description": "Determines the open state of the modal",
        "name": "open",
        "parent": {
          "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "size": {
        "defaultValue": { "value": "default" },
        "description": "Specifies the size of the Modal.\n\ndefault: `default`",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": { "name": "ModalSize" }
      },
      "setOpen": {
        "defaultValue": { "value": "() => {}" },
        "description": "Callback to change the open state of the Modal.",
        "name": "setOpen",
        "parent": {
          "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": { "name": "(open: boolean) => any" }
      },
      "shouldClose": {
        "defaultValue": { "value": "() => true" },
        "description": "Callback to determine whether or not Modal should close when user tries to close it.",
        "name": "shouldClose",
        "parent": {
          "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": { "name": "() => boolean" }
      },
      "className": {
        "defaultValue": null,
        "description": "className applied to root div.",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "contentClassName": {
        "defaultValue": null,
        "description": "className applied to overlay div.\nDisclaimer: This prop may be deprecated in future versions of Modal",
        "name": "contentClassName",
        "parent": {
          "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "initialFocus": {
        "defaultValue": null,
        "description": "By default, when a focus trap is activated the first element in the focus trap's tab order will receive focus.\nWith this option you can specify a different element to receive that initial focus.\nSelector string (which will be passed to document.querySelector() to find the DOM node)",
        "name": "initialFocus",
        "parent": {
          "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "darkMode": {
        "defaultValue": { "value": false },
        "description": "",
        "name": "darkMode",
        "parent": {
          "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "closeIconColor": {
        "defaultValue": { "value": "default" },
        "description": "",
        "name": "closeIconColor",
        "parent": {
          "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {
      "param": "props.open Boolean to describe whether or not Modal is open.\nprops.size String to determine size of Modal. ['small', 'default', 'large']\nprops.setOpen Callback to change the open state of Modal.\nprops.children Content to appear inside of Modal container.\nprops.shouldClose Callback to determine whether or not Modal should close when user tries to close it.\nprops.className className applied to container div.\nprops.contentClassName className applied to overlay div.\nprops.initialFocus By default, when a focus trap is activated the first element in the focus trap's tab order will receive focus. With this option you can specify a different element to receive that initial focus. Selector string (which will be passed to document.querySelector() to find the DOM node).\nprops.closeIconColor Choose between dark or light close icon. Default is dark."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/modal/src/index.ts",
    "description": "# Modal\n\n Modals place content on top of main window.\n\n```\n<Modal\nopen\nsize=\"large\"\nsetOpen={setOpen}\nshouldClose={() => console.log('Modal is closing now!')}\n>\nModal content!\n</Modal>\n```",
    "displayName": "Modal",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Content that will appear inside of the Modal component.",
        "name": "children",
        "parent": {
          "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": true,
        "type": { "name": "React.ReactNode" }
      },
      "open": {
        "defaultValue": { "value": ": `false`" },
        "description": "Determines the open state of the modal",
        "name": "open",
        "parent": {
          "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "size": {
        "defaultValue": null,
        "description": "Specifies the size of the Modal.\n\ndefault: `default`",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": { "name": "ModalSize" }
      },
      "setOpen": {
        "defaultValue": null,
        "description": "Callback to change the open state of the Modal.",
        "name": "setOpen",
        "parent": {
          "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": { "name": "(open: boolean) => any" }
      },
      "shouldClose": {
        "defaultValue": null,
        "description": "Callback to determine whether or not Modal should close when user tries to close it.",
        "name": "shouldClose",
        "parent": {
          "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": { "name": "() => boolean" }
      },
      "className": {
        "defaultValue": null,
        "description": "className applied to root div.",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "contentClassName": {
        "defaultValue": null,
        "description": "className applied to overlay div.\nDisclaimer: This prop may be deprecated in future versions of Modal",
        "name": "contentClassName",
        "parent": {
          "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "initialFocus": {
        "defaultValue": null,
        "description": "By default, when a focus trap is activated the first element in the focus trap's tab order will receive focus.\nWith this option you can specify a different element to receive that initial focus.\nSelector string (which will be passed to document.querySelector() to find the DOM node)",
        "name": "initialFocus",
        "parent": {
          "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "darkMode": {
        "defaultValue": null,
        "description": "",
        "name": "darkMode",
        "parent": {
          "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "closeIconColor": {
        "defaultValue": null,
        "description": "",
        "name": "closeIconColor",
        "parent": {
          "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/modal/src/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {
      "param": "props.active Boolean to describe whether or not Popover is active.\nprops.spacing The spacing (in pixels) between the reference element, and the popover.\nprops.align Alignment of Popover component relative to another element: `top`, `bottom`, `left`, `right`, `center-horizontal`, `center-vertical`.\nprops.justify Justification of Popover component relative to another element: `start`, `middle`, `end`, `fit`.\nprops.adjustOnMutation Should the Popover auto adjust its content when the DOM changes (using MutationObserver).\nprops.children Content to appear inside of Popover container.\nprops.className Classname applied to Popover container.\nprops.popoverZIndex Number that controls the z-index of the popover element directly.\nprops.refEl Reference element that Popover component should be positioned against.\nprops.usePortal Boolean to describe if content should be portaled to end of DOM, or appear in DOM tree.\nprops.portalClassName Classname applied to root element of the portal.\nprops.portalContainer HTML element that the popover is portaled within.\nprops.scrollContainer HTML ancestor element that's scrollable to position the popover accurately within scrolling containers."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/pipeline/node_modules/@leafygreen-ui/popover/src/Popover.tsx",
    "description": "# Popover\n\nReact Component that handles positioning of content relative to another element.\n\n```\n<button>\n<Popover active={true}>Hello world!</Popover>\n</button>\n```",
    "displayName": "Popover",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "param": "props.active Boolean to describe whether or not Popover is active.\nprops.spacing The spacing (in pixels) between the reference element, and the popover.\nprops.align Alignment of Popover component relative to another element: `top`, `bottom`, `left`, `right`, `center-horizontal`, `center-vertical`.\nprops.justify Justification of Popover component relative to another element: `start`, `middle`, `end`, `fit`.\nprops.adjustOnMutation Should the Popover auto adjust its content when the DOM changes (using MutationObserver).\nprops.children Content to appear inside of Popover container.\nprops.className Classname applied to Popover container.\nprops.popoverZIndex Number that controls the z-index of the popover element directly.\nprops.refEl Reference element that Popover component should be positioned against.\nprops.usePortal Boolean to describe if content should be portaled to end of DOM, or appear in DOM tree.\nprops.portalClassName Classname applied to root element of the portal.\nprops.portalContainer HTML element that the popover is portaled within.\nprops.scrollContainer HTML ancestor element that's scrollable to position the popover accurately within scrolling containers."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/pipeline/node_modules/@leafygreen-ui/popover/src/index.ts",
    "description": "# Popover\n\nReact Component that handles positioning of content relative to another element.\n\n```\n<button>\n<Popover active={true}>Hello world!</Popover>\n</button>\n```",
    "displayName": "Popover",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/pipeline/node_modules/@leafygreen-ui/popover/src/positionUtils.ts",
    "description": "",
    "displayName": "calculatePosition",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "param": "Start will justify content against the start of other element\nMiddle will justify content against the middle of other element\nBottom will justify content against the end of other element\nFit will justify content against both the start and the end of the other element"
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/pipeline/node_modules/@leafygreen-ui/tooltip/src/Tooltip.tsx",
    "description": "Options to determine the justification of the popover relative to\nthe other component",
    "displayName": "Tooltip",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "param": "Start will justify content against the start of other element\nMiddle will justify content against the middle of other element\nBottom will justify content against the end of other element\nFit will justify content against both the start and the end of the other element"
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/pipeline/node_modules/@leafygreen-ui/tooltip/src/index.ts",
    "description": "Options to determine the justification of the popover relative to\nthe other component",
    "displayName": "__type",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "param": "props.children Content to appear inside of Tooltip.\nprops.open Boolean to describe whether or not Tooltip is open.\nprops.setOpen Callback to change the open state of the Tooltip.\nprops.darkMode Whether the Tooltip will apepar in dark mode.\nprops.className Classname applied to Tooltip.\nprops.align Alignment of Tooltip relative to trigger: `top`, `bottom`, `left`, `right`.\nprops.justify Justification of Tooltip relative to trigger: `start`, `middle`, `end`.\nprops.trigger Trigger element can be ReactNode or function.\nprops.triggerEvent Whether the Tooltip should be triggered by a `click` or `hover`.\nprops.id id given to Tooltip content.\nprops.usePortal Determines whether or not Tooltip will be Portaled\nprops.portalClassName Classname applied to root element of the portal."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/pipeline/node_modules/@leafygreen-ui/tooltip/src/index.ts",
    "description": "# Tooltip\n\nTooltip component\n\n```\n<Tooltip\nalign='top'\njustify='start'\ntrigger={<button>trigger</button>}\ntriggerEvent='hover'\n>\nI am an uncontrolled Tooltip!\n</Tooltip>\n```",
    "displayName": "Tooltip",
    "methods": [],
    "props": {
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      },
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      }
    }
  },
  {
    "tags": {
      "param": "props.className Classname applied to Counter content container."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/pipeline/src/Counter.tsx",
    "description": "# Counter\n\nReact Component to render the counter for the number of hidden stages in the Pipeline component.\n\n```\n<Counter />\n```",
    "displayName": "Counter",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Content that will appear inside of the Counter component.",
        "name": "children",
        "parent": {
          "fileName": "leafygreen-ui/packages/pipeline/src/Counter.tsx",
          "name": "CounterProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/pipeline/src/Counter.tsx",
            "name": "CounterProps"
          }
        ],
        "required": false,
        "type": { "name": "ReactNode" }
      },
      "className": {
        "defaultValue": { "value": "" },
        "description": "Classname applied to Counter content container.",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/pipeline/src/Counter.tsx",
          "name": "CounterProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/pipeline/src/Counter.tsx",
            "name": "CounterProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "size": {
        "defaultValue": { "value": "xsmall" },
        "description": "Alter the rendered size of the component. Inherited from the parent Pipeline component.",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/pipeline/src/Counter.tsx",
          "name": "CounterProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/pipeline/src/Counter.tsx",
            "name": "CounterProps"
          }
        ],
        "required": false,
        "type": { "name": "Size" }
      }
    }
  },
  {
    "tags": {
      "param": "props.children Content that will appear inside of the Pipeline component.\nprops.className Classname applied to Pipeline content container.\nprops.size Alters the rendered size of the component.\nprops.variant Alters the visual appearance of the component."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/pipeline/src/Pipeline.tsx",
    "description": "# Pipeline\n\nReact Component to render top-level MongoDB Aggregations in a visual format.\nHandles overflowed content gracefully by indicating how many other stages are hidden.\n\n```\n<Pipeline>\n  <Stage>$match</Stage>\n  <Stage>$addFields</Stage>\n  <Stage>$limit</Stage>\n</Pipeline>\n```",
    "displayName": "Pipeline",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Content that will appear inside of the Pipeline component.",
        "name": "children",
        "parent": {
          "fileName": "leafygreen-ui/packages/pipeline/src/Pipeline.tsx",
          "name": "PipelineProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/pipeline/src/Pipeline.tsx",
            "name": "PipelineProps"
          }
        ],
        "required": true,
        "type": { "name": "ReactNode" }
      },
      "className": {
        "defaultValue": { "value": "" },
        "description": "Optional className prop to apply to Pipeline content container.",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/pipeline/src/Pipeline.tsx",
          "name": "PipelineProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/pipeline/src/Pipeline.tsx",
            "name": "PipelineProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "size": {
        "defaultValue": { "value": "xsmall" },
        "description": "Alter the rendered size of the component",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/pipeline/src/Pipeline.tsx",
          "name": "PipelineProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/pipeline/src/Pipeline.tsx",
            "name": "PipelineProps"
          }
        ],
        "required": false,
        "type": { "name": "Size" }
      }
    }
  },
  {
    "tags": {
      "param": "props.children Content that will appear inside of the Stage component.\nprops.className Classname applied to Stage content container.\nprops.intersectionNode The DOM node to use as the root node for the intersectionObserver. Defaults to window when null or undefined.\nprops.size Alters the rendered size of the component.\nprops.threshold Either a single number or an array of numbers which indicate at what percentage of the target's visibility the observer's callback should be executed.\nprops.variant Alters the visual appearance of the component."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/pipeline/src/Stage.tsx",
    "description": "# Stage\n\nReact Component to render an individual MongoDB Aggregation stage.\nTo be used in conjunction with Pipeline component as a child.\n\n```\n<Pipeline>\n  <Stage>$match</Stage>\n  <Stage>$addFields</Stage>\n  <Stage>$limit</Stage>\n</Pipeline>\n```",
    "displayName": "Stage",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Content that will appear inside of the Stage component.",
        "name": "children",
        "parent": {
          "fileName": "leafygreen-ui/packages/pipeline/src/Stage.tsx",
          "name": "StageProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/pipeline/src/Stage.tsx",
            "name": "StageProps"
          }
        ],
        "required": true,
        "type": { "name": "ReactNode" }
      },
      "className": {
        "defaultValue": { "value": "" },
        "description": "Classname applied to Stage content container.",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/pipeline/src/Stage.tsx",
          "name": "StageProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/pipeline/src/Stage.tsx",
            "name": "StageProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "intersectionNode": {
        "defaultValue": null,
        "description": "The DOM node to use as the root node for the intersectionObserver. Defaults to window when null or undefined.",
        "name": "intersectionNode",
        "parent": {
          "fileName": "leafygreen-ui/packages/pipeline/src/Stage.tsx",
          "name": "StageProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/pipeline/src/Stage.tsx",
            "name": "StageProps"
          }
        ],
        "required": false,
        "type": { "name": "HTMLElement" }
      },
      "size": {
        "defaultValue": { "value": "xsmall" },
        "description": "Alter the rendered size of the component. Inherited from the parent Pipeline component.",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/pipeline/src/Stage.tsx",
          "name": "StageProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/pipeline/src/Stage.tsx",
            "name": "StageProps"
          }
        ],
        "required": false,
        "type": { "name": "Size" }
      },
      "threshold": {
        "defaultValue": { "value": 0.8 },
        "description": "Either a single number or an array of numbers which indicate at what percentage of the target's visibility\nthe observer's callback should be executed.",
        "name": "threshold",
        "parent": {
          "fileName": "leafygreen-ui/packages/pipeline/src/Stage.tsx",
          "name": "StageProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/pipeline/src/Stage.tsx",
            "name": "StageProps"
          }
        ],
        "required": false,
        "type": { "name": "number | number[]" }
      }
    }
  },
  {
    "tags": {
      "param": "props.children Content that will appear inside of the Pipeline component.\nprops.className Classname applied to Pipeline content container.\nprops.size Alters the rendered size of the component.\nprops.variant Alters the visual appearance of the component."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/pipeline/src/index.ts",
    "description": "# Pipeline\n\nReact Component to render top-level MongoDB Aggregations in a visual format.\nHandles overflowed content gracefully by indicating how many other stages are hidden.\n\n```\n<Pipeline>\n  <Stage>$match</Stage>\n  <Stage>$addFields</Stage>\n  <Stage>$limit</Stage>\n</Pipeline>\n```",
    "displayName": "Pipeline",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Content that will appear inside of the Pipeline component.",
        "name": "children",
        "parent": {
          "fileName": "leafygreen-ui/packages/pipeline/src/Pipeline.tsx",
          "name": "PipelineProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/pipeline/src/Pipeline.tsx",
            "name": "PipelineProps"
          }
        ],
        "required": true,
        "type": { "name": "ReactNode" }
      },
      "className": {
        "defaultValue": { "value": "" },
        "description": "Optional className prop to apply to Pipeline content container.",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/pipeline/src/Pipeline.tsx",
          "name": "PipelineProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/pipeline/src/Pipeline.tsx",
            "name": "PipelineProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "size": {
        "defaultValue": { "value": "xsmall" },
        "description": "Alter the rendered size of the component",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/pipeline/src/Pipeline.tsx",
          "name": "PipelineProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/pipeline/src/Pipeline.tsx",
            "name": "PipelineProps"
          }
        ],
        "required": false,
        "type": { "name": "Size" }
      }
    }
  },
  {
    "tags": {
      "param": "props.children Content that will appear inside of the Stage component.\nprops.className Classname applied to Stage content container.\nprops.intersectionNode The DOM node to use as the root node for the intersectionObserver. Defaults to window when null or undefined.\nprops.size Alters the rendered size of the component.\nprops.threshold Either a single number or an array of numbers which indicate at what percentage of the target's visibility the observer's callback should be executed.\nprops.variant Alters the visual appearance of the component."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/pipeline/src/index.ts",
    "description": "# Stage\n\nReact Component to render an individual MongoDB Aggregation stage.\nTo be used in conjunction with Pipeline component as a child.\n\n```\n<Pipeline>\n  <Stage>$match</Stage>\n  <Stage>$addFields</Stage>\n  <Stage>$limit</Stage>\n</Pipeline>\n```",
    "displayName": "Stage",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Content that will appear inside of the Stage component.",
        "name": "children",
        "parent": {
          "fileName": "leafygreen-ui/packages/pipeline/src/Stage.tsx",
          "name": "StageProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/pipeline/src/Stage.tsx",
            "name": "StageProps"
          }
        ],
        "required": true,
        "type": { "name": "ReactNode" }
      },
      "className": {
        "defaultValue": { "value": "" },
        "description": "Classname applied to Stage content container.",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/pipeline/src/Stage.tsx",
          "name": "StageProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/pipeline/src/Stage.tsx",
            "name": "StageProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "intersectionNode": {
        "defaultValue": null,
        "description": "The DOM node to use as the root node for the intersectionObserver. Defaults to window when null or undefined.",
        "name": "intersectionNode",
        "parent": {
          "fileName": "leafygreen-ui/packages/pipeline/src/Stage.tsx",
          "name": "StageProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/pipeline/src/Stage.tsx",
            "name": "StageProps"
          }
        ],
        "required": false,
        "type": { "name": "HTMLElement" }
      },
      "size": {
        "defaultValue": { "value": "xsmall" },
        "description": "Alter the rendered size of the component. Inherited from the parent Pipeline component.",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/pipeline/src/Stage.tsx",
          "name": "StageProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/pipeline/src/Stage.tsx",
            "name": "StageProps"
          }
        ],
        "required": false,
        "type": { "name": "Size" }
      },
      "threshold": {
        "defaultValue": { "value": 0.8 },
        "description": "Either a single number or an array of numbers which indicate at what percentage of the target's visibility\nthe observer's callback should be executed.",
        "name": "threshold",
        "parent": {
          "fileName": "leafygreen-ui/packages/pipeline/src/Stage.tsx",
          "name": "StageProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/pipeline/src/Stage.tsx",
            "name": "StageProps"
          }
        ],
        "required": false,
        "type": { "name": "number | number[]" }
      }
    }
  },
  {
    "tags": {
      "param": "props.className Classname applied to Counter content container."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/pipeline/src/index.ts",
    "description": "# Counter\n\nReact Component to render the counter for the number of hidden stages in the Pipeline component.\n\n```\n<Counter />\n```",
    "displayName": "Counter",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Content that will appear inside of the Counter component.",
        "name": "children",
        "parent": {
          "fileName": "leafygreen-ui/packages/pipeline/src/Counter.tsx",
          "name": "CounterProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/pipeline/src/Counter.tsx",
            "name": "CounterProps"
          }
        ],
        "required": false,
        "type": { "name": "ReactNode" }
      },
      "className": {
        "defaultValue": { "value": "" },
        "description": "Classname applied to Counter content container.",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/pipeline/src/Counter.tsx",
          "name": "CounterProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/pipeline/src/Counter.tsx",
            "name": "CounterProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "size": {
        "defaultValue": { "value": "xsmall" },
        "description": "Alter the rendered size of the component. Inherited from the parent Pipeline component.",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/pipeline/src/Counter.tsx",
          "name": "CounterProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/pipeline/src/Counter.tsx",
            "name": "CounterProps"
          }
        ],
        "required": false,
        "type": { "name": "Size" }
      }
    }
  },
  {
    "tags": { "param": "isIntersecting" },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/pipeline/src/mocks/IntersectionObserver.ts",
    "description": "Set the `isIntersecting` on all current IntersectionObserver instances",
    "displayName": "mockAllIsIntersecting",
    "methods": [],
    "props": {}
  },
  {
    "tags": { "param": "element\nisIntersecting" },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/pipeline/src/mocks/IntersectionObserver.ts",
    "description": "Set the `isIntersecting` for the IntersectionObserver of a specific element.",
    "displayName": "mockIsIntersecting",
    "methods": [],
    "props": {}
  },
  {
    "tags": { "param": "element", "return": "IntersectionObserver" },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/pipeline/src/mocks/IntersectionObserver.ts",
    "description": "Call the `intersectionMockInstance` method with an element, to get the (mocked)\n`IntersectionObserver` instance. You can use this to spy on the `observe` and\n`unobserve` methods.",
    "displayName": "intersectionMockInstance",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/pipeline/src/styles.ts",
    "description": "",
    "displayName": "getRootStyle",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/pipeline/src/styles.ts",
          "name": "StateForStyles"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/pipeline/src/styles.ts",
            "name": "StateForStyles"
          }
        ],
        "required": true,
        "type": { "name": "Size" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/pipeline/src/styles.ts",
    "description": "",
    "displayName": "getChildStyle",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/pipeline/src/styles.ts",
          "name": "StateForStyles"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/pipeline/src/styles.ts",
            "name": "StateForStyles"
          }
        ],
        "required": true,
        "type": { "name": "Size" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/pipeline/src/styles.ts",
    "description": "",
    "displayName": "getChevronStyle",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/pipeline/src/styles.ts",
          "name": "StateForStyles"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/pipeline/src/styles.ts",
            "name": "StateForStyles"
          }
        ],
        "required": true,
        "type": { "name": "Size" }
      }
    }
  },
  {
    "tags": {
      "param": "children - the children rendered by the pipeline component",
      "returns": "string - the tooltip text"
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/pipeline/src/utils/getPipelineCounterTooltip.ts",
    "description": "A utility function which takes the React.children rendered by the Pipeline component\nand returns the string which represents the full pipeline, for usage with the tooltip.",
    "displayName": "getPipelineCounterTooltip",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "param": "children - the children rendered by the pipeline component",
      "returns": "string - the tooltip text"
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/pipeline/src/utils/index.ts",
    "description": "A utility function which takes the React.children rendered by the Pipeline component\nand returns the string which represents the full pipeline, for usage with the tooltip.",
    "displayName": "utils",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "param": "element the element to check",
      "returns": "boolean true if the element is overflowing, false if not.",
      "see": "https://developer.mozilla.org/en-US/docs/Web/CSS/overflow"
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/pipeline/src/utils/isElementOverflowed.ts",
    "description": "Helper function to check whether a DOM element's content is clipped, ie:\nThe element's content is too big to fit in its block formatting context,\nor the position of the content is positioned in such a way that it intersects\nwith the element's block formatting context, thus causing it to overflow.",
    "displayName": "isElementOverflowed",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "param": "element the element to check",
      "returns": "boolean true if the element is a Stage element, false if not."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/pipeline/src/utils/isStageElement.ts",
    "description": "Helper function to check whether an element is a type of Stage element.",
    "displayName": "isStageElement",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "param": "props.active Boolean to describe whether or not Popover is active.\nprops.spacing The spacing (in pixels) between the reference element, and the popover.\nprops.align Alignment of Popover component relative to another element: `top`, `bottom`, `left`, `right`, `center-horizontal`, `center-vertical`.\nprops.justify Justification of Popover component relative to another element: `start`, `middle`, `end`, `fit`.\nprops.adjustOnMutation Should the Popover auto adjust its content when the DOM changes (using MutationObserver).\nprops.children Content to appear inside of Popover container.\nprops.className Classname applied to Popover container.\nprops.popoverZIndex Number that controls the z-index of the popover element directly.\nprops.refEl Reference element that Popover component should be positioned against.\nprops.usePortal Boolean to describe if content should be portaled to end of DOM, or appear in DOM tree.\nprops.portalClassName Classname applied to root element of the portal.\nprops.portalContainer HTML element that the popover is portaled within.\nprops.scrollContainer HTML ancestor element that's scrollable to position the popover accurately within scrolling containers."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/popover/src/Popover.tsx",
    "description": "# Popover\n\nReact Component that handles positioning of content relative to another element.\n\n```\n<button>\n<Popover active={true}>Hello world!</Popover>\n</button>\n```",
    "displayName": "Popover",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Content that will appear inside of the popover component.",
        "name": "children",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/src/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": { "name": "any" }
      },
      "active": {
        "defaultValue": { "value": false },
        "description": "Determines the active state of the popover component\n\ndefault: `false`",
        "name": "active",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/src/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "className": {
        "defaultValue": null,
        "description": "Class name applied to popover content container.",
        "name": "className",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/src/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "align": {
        "defaultValue": { "value": "bottom" },
        "description": "Determines the alignment of the popover content relative to the trigger element\n\ndefault: `bottom`",
        "name": "align",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/src/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Align" }
      },
      "justify": {
        "defaultValue": { "value": "start" },
        "description": "Determines the justification of the popover content relative to the trigger element\n\ndefault: `start`",
        "name": "justify",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/src/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Justify" }
      },
      "refEl": {
        "defaultValue": null,
        "description": "A reference to the element against which the popover component will be positioned.",
        "name": "refEl",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/src/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "React.RefObject<HTMLElement>" }
      },
      "spacing": {
        "defaultValue": { "value": 10 },
        "description": "Specifies the amount of spacing (in pixels) between the trigger element and the Popover content.\n\ndefault: `10`",
        "name": "spacing",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/src/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "adjustOnMutation": {
        "defaultValue": { "value": false },
        "description": "Should the Popover auto adjust its content when the DOM changes (using MutationObserver).\n\ndefault: false",
        "name": "adjustOnMutation",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/src/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "onClick": {
        "defaultValue": null,
        "description": "Click event handler passed to the root div element within the portal container.",
        "name": "onClick",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/src/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "React.MouseEventHandler" }
      },
      "popoverZIndex": {
        "defaultValue": null,
        "description": "Number that controls the z-index of the popover element directly.",
        "name": "popoverZIndex",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/src/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "usePortal": {
        "defaultValue": { "value": true },
        "description": "Specifies that the popover content should be rendered at the end of the DOM,\nrather than in the DOM tree.\n\ndefault: `true`",
        "name": "usePortal",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/src/types.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/src/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "portalClassName": {
        "defaultValue": null,
        "description": "When usePortal is `true`, specifies a class name to apply to the root element of the portal.",
        "name": "portalClassName",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/src/types.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/src/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "portalContainer": {
        "defaultValue": null,
        "description": "When usePortal is `true`, specifies an element to portal within. The default behavior is to generate a div at the end of the document to render within.",
        "name": "portalContainer",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/src/types.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/src/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "HTMLElement" }
      },
      "scrollContainer": {
        "defaultValue": null,
        "description": "When usePortal is `true`, specifies the scrollable element to position relative to.",
        "name": "scrollContainer",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/src/types.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/src/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "HTMLElement" }
      }
    }
  },
  {
    "tags": {
      "param": "props.active Boolean to describe whether or not Popover is active.\nprops.spacing The spacing (in pixels) between the reference element, and the popover.\nprops.align Alignment of Popover component relative to another element: `top`, `bottom`, `left`, `right`, `center-horizontal`, `center-vertical`.\nprops.justify Justification of Popover component relative to another element: `start`, `middle`, `end`, `fit`.\nprops.adjustOnMutation Should the Popover auto adjust its content when the DOM changes (using MutationObserver).\nprops.children Content to appear inside of Popover container.\nprops.className Classname applied to Popover container.\nprops.popoverZIndex Number that controls the z-index of the popover element directly.\nprops.refEl Reference element that Popover component should be positioned against.\nprops.usePortal Boolean to describe if content should be portaled to end of DOM, or appear in DOM tree.\nprops.portalClassName Classname applied to root element of the portal.\nprops.portalContainer HTML element that the popover is portaled within.\nprops.scrollContainer HTML ancestor element that's scrollable to position the popover accurately within scrolling containers."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/popover/src/index.ts",
    "description": "# Popover\n\nReact Component that handles positioning of content relative to another element.\n\n```\n<button>\n<Popover active={true}>Hello world!</Popover>\n</button>\n```",
    "displayName": "Popover",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Content that will appear inside of the popover component.",
        "name": "children",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/src/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": { "name": "any" }
      },
      "active": {
        "defaultValue": { "value": false },
        "description": "Determines the active state of the popover component\n\ndefault: `false`",
        "name": "active",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/src/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "className": {
        "defaultValue": null,
        "description": "Class name applied to popover content container.",
        "name": "className",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/src/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "align": {
        "defaultValue": { "value": "bottom" },
        "description": "Determines the alignment of the popover content relative to the trigger element\n\ndefault: `bottom`",
        "name": "align",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/src/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Align" }
      },
      "justify": {
        "defaultValue": { "value": "start" },
        "description": "Determines the justification of the popover content relative to the trigger element\n\ndefault: `start`",
        "name": "justify",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/src/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Justify" }
      },
      "refEl": {
        "defaultValue": null,
        "description": "A reference to the element against which the popover component will be positioned.",
        "name": "refEl",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/src/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "React.RefObject<HTMLElement>" }
      },
      "spacing": {
        "defaultValue": { "value": 10 },
        "description": "Specifies the amount of spacing (in pixels) between the trigger element and the Popover content.\n\ndefault: `10`",
        "name": "spacing",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/src/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "adjustOnMutation": {
        "defaultValue": { "value": false },
        "description": "Should the Popover auto adjust its content when the DOM changes (using MutationObserver).\n\ndefault: false",
        "name": "adjustOnMutation",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/src/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "onClick": {
        "defaultValue": null,
        "description": "Click event handler passed to the root div element within the portal container.",
        "name": "onClick",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/src/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "React.MouseEventHandler" }
      },
      "popoverZIndex": {
        "defaultValue": null,
        "description": "Number that controls the z-index of the popover element directly.",
        "name": "popoverZIndex",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/src/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "usePortal": {
        "defaultValue": { "value": true },
        "description": "Specifies that the popover content should be rendered at the end of the DOM,\nrather than in the DOM tree.\n\ndefault: `true`",
        "name": "usePortal",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/src/types.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/src/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "portalClassName": {
        "defaultValue": null,
        "description": "When usePortal is `true`, specifies a class name to apply to the root element of the portal.",
        "name": "portalClassName",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/src/types.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/src/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "portalContainer": {
        "defaultValue": null,
        "description": "When usePortal is `true`, specifies an element to portal within. The default behavior is to generate a div at the end of the document to render within.",
        "name": "portalContainer",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/src/types.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/src/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "HTMLElement" }
      },
      "scrollContainer": {
        "defaultValue": null,
        "description": "When usePortal is `true`, specifies the scrollable element to position relative to.",
        "name": "scrollContainer",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/src/types.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/src/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "HTMLElement" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/popover/src/positionUtils.ts",
    "description": "",
    "displayName": "calculatePosition",
    "methods": [],
    "props": {
      "useRelativePositioning": {
        "defaultValue": null,
        "description": "",
        "name": "useRelativePositioning",
        "parent": {
          "fileName": "leafygreen-ui/packages/popover/src/positionUtils.ts",
          "name": "CalculatePosition"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/src/positionUtils.ts",
            "name": "CalculatePosition"
          }
        ],
        "required": true,
        "type": { "name": "boolean" }
      },
      "align": {
        "defaultValue": null,
        "description": "",
        "name": "align",
        "parent": {
          "fileName": "leafygreen-ui/packages/popover/src/positionUtils.ts",
          "name": "CalculatePosition"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/src/positionUtils.ts",
            "name": "CalculatePosition"
          }
        ],
        "required": true,
        "type": { "name": "Align" }
      },
      "justify": {
        "defaultValue": null,
        "description": "",
        "name": "justify",
        "parent": {
          "fileName": "leafygreen-ui/packages/popover/src/positionUtils.ts",
          "name": "CalculatePosition"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/src/positionUtils.ts",
            "name": "CalculatePosition"
          }
        ],
        "required": true,
        "type": { "name": "Justify" }
      },
      "scrollContainer": {
        "defaultValue": null,
        "description": "",
        "name": "scrollContainer",
        "parent": {
          "fileName": "leafygreen-ui/packages/popover/src/positionUtils.ts",
          "name": "CalculatePosition"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/src/positionUtils.ts",
            "name": "CalculatePosition"
          }
        ],
        "required": true,
        "type": { "name": "HTMLElement" }
      },
      "referenceElViewportPos": {
        "defaultValue": {
          "value": "{\n  top: 0,\n  bottom: 0,\n  left: 0,\n  right: 0,\n  height: 0,\n  width: 0,\n}"
        },
        "description": "",
        "name": "referenceElViewportPos",
        "parent": {
          "fileName": "leafygreen-ui/packages/popover/src/positionUtils.ts",
          "name": "ElementViewportPositions"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/src/positionUtils.ts",
            "name": "ElementViewportPositions"
          }
        ],
        "required": false,
        "type": { "name": "ElementPosition" }
      },
      "contentElViewportPos": {
        "defaultValue": {
          "value": "{\n  top: 0,\n  bottom: 0,\n  left: 0,\n  right: 0,\n  height: 0,\n  width: 0,\n}"
        },
        "description": "",
        "name": "contentElViewportPos",
        "parent": {
          "fileName": "leafygreen-ui/packages/popover/src/positionUtils.ts",
          "name": "ElementViewportPositions"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/src/positionUtils.ts",
            "name": "ElementViewportPositions"
          }
        ],
        "required": false,
        "type": { "name": "ElementPosition" }
      },
      "spacing": {
        "defaultValue": null,
        "description": "",
        "name": "spacing",
        "parent": {
          "fileName": "leafygreen-ui/packages/popover/src/positionUtils.ts",
          "name": "ElementViewportPositions"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/src/positionUtils.ts",
            "name": "ElementViewportPositions"
          }
        ],
        "required": true,
        "type": { "name": "number" }
      },
      "referenceElDocumentPos": {
        "defaultValue": {
          "value": "{\n  top: 0,\n  bottom: 0,\n  left: 0,\n  right: 0,\n  height: 0,\n  width: 0,\n}"
        },
        "description": "",
        "name": "referenceElDocumentPos",
        "parent": {
          "fileName": "leafygreen-ui/packages/popover/src/positionUtils.ts",
          "name": "ElementDocumentPositions"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/src/positionUtils.ts",
            "name": "ElementDocumentPositions"
          }
        ],
        "required": false,
        "type": { "name": "ElementPosition" }
      },
      "contentElDocumentPos": {
        "defaultValue": {
          "value": "{\n  top: 0,\n  bottom: 0,\n  left: 0,\n  right: 0,\n  height: 0,\n  width: 0,\n}"
        },
        "description": "",
        "name": "contentElDocumentPos",
        "parent": {
          "fileName": "leafygreen-ui/packages/popover/src/positionUtils.ts",
          "name": "ElementDocumentPositions"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/src/positionUtils.ts",
            "name": "ElementDocumentPositions"
          }
        ],
        "required": false,
        "type": { "name": "ElementPosition" }
      },
      "windowWidth": {
        "defaultValue": { "value": "window.innerWidth" },
        "description": "",
        "name": "windowWidth",
        "parent": {
          "fileName": "leafygreen-ui/packages/popover/src/positionUtils.ts",
          "name": "WindowSize"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/src/positionUtils.ts",
            "name": "WindowSize"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "windowHeight": {
        "defaultValue": { "value": "window.innerHeight" },
        "description": "",
        "name": "windowHeight",
        "parent": {
          "fileName": "leafygreen-ui/packages/popover/src/positionUtils.ts",
          "name": "WindowSize"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/src/positionUtils.ts",
            "name": "WindowSize"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/portal/src/Portal.tsx",
    "description": "",
    "displayName": "Portal",
    "methods": [],
    "props": {
      "container": {
        "defaultValue": null,
        "description": "",
        "name": "container",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/portal/src/Portal.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/portal/src/Portal.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "HTMLElement" }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/portal/src/Portal.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/portal/src/Portal.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/portal/src/index.ts",
    "description": "",
    "displayName": "Portal",
    "methods": [],
    "props": {
      "container": {
        "defaultValue": null,
        "description": "",
        "name": "container",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/portal/src/Portal.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/portal/src/Portal.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "HTMLElement" }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/portal/src/Portal.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/portal/src/Portal.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {
      "param": "props.className className supplied to RadioBox container.\nprops.value Used to determine what RadioBox is active.\nprops.disabled Boolean that determines if the RadioBox is disabled.\nprops.id Id for RadioBox and respective label.\nprops.children Content that will appear inside of RadioBox.\nprops.default If RadioBoxGroup is uncontrolled, the default property makes this RadioBox checked on the initial render."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/radio-box-group/src/RadioBox.tsx",
    "description": "# RadioBox\n\nRadioBox component\n\n```\n<RadioBox value='radio-box-1'>RadioBox 1</RadioBox>\n```",
    "displayName": "RadioBox",
    "methods": [],
    "props": {
      "onChange": {
        "defaultValue": null,
        "description": "",
        "name": "onChange",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBox.tsx",
          "name": "RadioBoxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBox.tsx",
            "name": "RadioBoxProps"
          },
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "InputHTMLAttributes"
          }
        ],
        "required": false,
        "type": { "name": "any" }
      },
      "checked": {
        "defaultValue": null,
        "description": "",
        "name": "checked",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBox.tsx",
          "name": "RadioBoxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBox.tsx",
            "name": "RadioBoxProps"
          },
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "InputHTMLAttributes"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBox.tsx",
          "name": "RadioBoxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBox.tsx",
            "name": "RadioBoxProps"
          }
        ],
        "required": false,
        "type": { "name": "Size" }
      },
      "name": {
        "defaultValue": null,
        "description": "",
        "name": "name",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBox.tsx",
          "name": "RadioBoxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBox.tsx",
            "name": "RadioBoxProps"
          },
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "InputHTMLAttributes"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "className": {
        "defaultValue": { "value": "" },
        "description": "className supplied to RadioBox container.",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBox.tsx",
          "name": "RadioBoxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBox.tsx",
            "name": "RadioBoxProps"
          },
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "value": {
        "defaultValue": null,
        "description": "Used to determine what RadioBox is checked.",
        "name": "value",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBox.tsx",
          "name": "RadioBoxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBox.tsx",
            "name": "RadioBoxProps"
          },
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "InputHTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "(string | number) & (string | number | readonly string[])"
        }
      },
      "disabled": {
        "defaultValue": { "value": false },
        "description": "Boolean that determines if the RadioBox is disabled.",
        "name": "disabled",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBox.tsx",
          "name": "RadioBoxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBox.tsx",
            "name": "RadioBoxProps"
          },
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "InputHTMLAttributes"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "id": {
        "defaultValue": null,
        "description": "Id for RadioBox and respective label.",
        "name": "id",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBox.tsx",
          "name": "RadioBoxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBox.tsx",
            "name": "RadioBoxProps"
          },
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "children": {
        "defaultValue": null,
        "description": "Content that will appear inside of the RadioBox component's label.",
        "name": "children",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBox.tsx",
          "name": "RadioBoxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBox.tsx",
            "name": "RadioBoxProps"
          },
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": { "name": "any" }
      },
      "default": {
        "defaultValue": null,
        "description": "If RadioBoxGroup is uncontrolled, the default property makes this RadioBox checked on the initial render.",
        "name": "default",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBox.tsx",
          "name": "RadioBoxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBox.tsx",
            "name": "RadioBoxProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      },
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      }
    }
  },
  {
    "tags": {
      "param": "props.children Content to appear inside of RadioBoxGroup component.\nprops.onChange Callback to be executed when a RadioBox is selected.\nprops.name Name passed to each RadioBox belonging to the RadioBoxGroup.\nprops.value RadioBox that should appear checked. If value passed, component will be controlled by consumer.\nprops.className classname applied to RadioBoxGroup container.\nprops.size Determines size of RadioBox components ['default', 'compact', 'full']."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/radio-box-group/src/RadioBoxGroup.tsx",
    "description": "# RadioBoxGroup\n\nRadioBoxGroup component\n\n```\n<RadioBoxGroup onChange={() => execute callback onChange}>\n<RadioBox value='RadioBox-1'>RadioBox 1</RadioBox>\n<RadioBox value='RadioBox-2'>RadioBox 2</RadioBox>\n</RadioBoxGroup>\n```",
    "displayName": "RadioBoxGroup",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Content that will appear inside of RadioBoxGroup component.",
        "name": "children",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBoxGroup.tsx",
          "name": "RadioBoxGroupProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBoxGroup.tsx",
            "name": "RadioBoxGroupProps"
          }
        ],
        "required": false,
        "type": { "name": "React.ReactNode" }
      },
      "onChange": {
        "defaultValue": { "value": "() => {}" },
        "description": "Callback to be executed when a RadioBox is selected.",
        "name": "onChange",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBoxGroup.tsx",
          "name": "RadioBoxGroupProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBoxGroup.tsx",
            "name": "RadioBoxGroupProps"
          }
        ],
        "required": false,
        "type": { "name": "React.ChangeEventHandler<HTMLInputElement>" }
      },
      "name": {
        "defaultValue": null,
        "description": "Name passed to each RadioBox belonging to the RadioGroup.",
        "name": "name",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBoxGroup.tsx",
          "name": "RadioBoxGroupProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBoxGroup.tsx",
            "name": "RadioBoxGroupProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "value": {
        "defaultValue": null,
        "description": "Determines what RadioBox will be checked on default. Component will be controlled if this prop is used.",
        "name": "value",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBoxGroup.tsx",
          "name": "RadioBoxGroupProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBoxGroup.tsx",
            "name": "RadioBoxGroupProps"
          }
        ],
        "required": false,
        "type": { "name": "string | number" }
      },
      "size": {
        "defaultValue": { "value": "default" },
        "description": "Determines size of RadioBox components ['default', 'compact', 'full'].",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBoxGroup.tsx",
          "name": "RadioBoxGroupProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBoxGroup.tsx",
            "name": "RadioBoxGroupProps"
          }
        ],
        "required": false,
        "type": { "name": "Size" }
      },
      "className": {
        "defaultValue": null,
        "description": "className supplied to RadioBoxGroup container.",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBoxGroup.tsx",
          "name": "RadioBoxGroupProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBoxGroup.tsx",
            "name": "RadioBoxGroupProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/radio-box-group/src/context.ts",
    "description": "",
    "displayName": "Provider",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "param": "props.className className supplied to RadioBox container.\nprops.value Used to determine what RadioBox is active.\nprops.disabled Boolean that determines if the RadioBox is disabled.\nprops.id Id for RadioBox and respective label.\nprops.children Content that will appear inside of RadioBox.\nprops.default If RadioBoxGroup is uncontrolled, the default property makes this RadioBox checked on the initial render."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/radio-box-group/src/index.ts",
    "description": "# RadioBox\n\nRadioBox component\n\n```\n<RadioBox value='radio-box-1'>RadioBox 1</RadioBox>\n```",
    "displayName": "src",
    "methods": [],
    "props": {
      "onChange": {
        "defaultValue": null,
        "description": "",
        "name": "onChange",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBox.tsx",
          "name": "RadioBoxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBox.tsx",
            "name": "RadioBoxProps"
          },
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "InputHTMLAttributes"
          }
        ],
        "required": false,
        "type": { "name": "any" }
      },
      "checked": {
        "defaultValue": null,
        "description": "",
        "name": "checked",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBox.tsx",
          "name": "RadioBoxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBox.tsx",
            "name": "RadioBoxProps"
          },
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "InputHTMLAttributes"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBox.tsx",
          "name": "RadioBoxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBox.tsx",
            "name": "RadioBoxProps"
          }
        ],
        "required": false,
        "type": { "name": "Size" }
      },
      "name": {
        "defaultValue": null,
        "description": "",
        "name": "name",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBox.tsx",
          "name": "RadioBoxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBox.tsx",
            "name": "RadioBoxProps"
          },
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "InputHTMLAttributes"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "className": {
        "defaultValue": { "value": "" },
        "description": "className supplied to RadioBox container.",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBox.tsx",
          "name": "RadioBoxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBox.tsx",
            "name": "RadioBoxProps"
          },
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "value": {
        "defaultValue": null,
        "description": "Used to determine what RadioBox is checked.",
        "name": "value",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBox.tsx",
          "name": "RadioBoxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBox.tsx",
            "name": "RadioBoxProps"
          },
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "InputHTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "(string | number) & (string | number | readonly string[])"
        }
      },
      "disabled": {
        "defaultValue": { "value": false },
        "description": "Boolean that determines if the RadioBox is disabled.",
        "name": "disabled",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBox.tsx",
          "name": "RadioBoxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBox.tsx",
            "name": "RadioBoxProps"
          },
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "InputHTMLAttributes"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "id": {
        "defaultValue": null,
        "description": "Id for RadioBox and respective label.",
        "name": "id",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBox.tsx",
          "name": "RadioBoxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBox.tsx",
            "name": "RadioBoxProps"
          },
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "children": {
        "defaultValue": null,
        "description": "Content that will appear inside of the RadioBox component's label.",
        "name": "children",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBox.tsx",
          "name": "RadioBoxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBox.tsx",
            "name": "RadioBoxProps"
          },
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": { "name": "any" }
      },
      "default": {
        "defaultValue": null,
        "description": "If RadioBoxGroup is uncontrolled, the default property makes this RadioBox checked on the initial render.",
        "name": "default",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBox.tsx",
          "name": "RadioBoxProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBox.tsx",
            "name": "RadioBoxProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      },
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      }
    }
  },
  {
    "tags": {
      "param": "props.children Content to appear inside of RadioBoxGroup component.\nprops.onChange Callback to be executed when a RadioBox is selected.\nprops.name Name passed to each RadioBox belonging to the RadioBoxGroup.\nprops.value RadioBox that should appear checked. If value passed, component will be controlled by consumer.\nprops.className classname applied to RadioBoxGroup container.\nprops.size Determines size of RadioBox components ['default', 'compact', 'full']."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/radio-box-group/src/index.ts",
    "description": "# RadioBoxGroup\n\nRadioBoxGroup component\n\n```\n<RadioBoxGroup onChange={() => execute callback onChange}>\n<RadioBox value='RadioBox-1'>RadioBox 1</RadioBox>\n<RadioBox value='RadioBox-2'>RadioBox 2</RadioBox>\n</RadioBoxGroup>\n```",
    "displayName": "RadioBoxGroup",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Content that will appear inside of RadioBoxGroup component.",
        "name": "children",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBoxGroup.tsx",
          "name": "RadioBoxGroupProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBoxGroup.tsx",
            "name": "RadioBoxGroupProps"
          }
        ],
        "required": false,
        "type": { "name": "React.ReactNode" }
      },
      "onChange": {
        "defaultValue": { "value": "() => {}" },
        "description": "Callback to be executed when a RadioBox is selected.",
        "name": "onChange",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBoxGroup.tsx",
          "name": "RadioBoxGroupProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBoxGroup.tsx",
            "name": "RadioBoxGroupProps"
          }
        ],
        "required": false,
        "type": { "name": "React.ChangeEventHandler<HTMLInputElement>" }
      },
      "name": {
        "defaultValue": null,
        "description": "Name passed to each RadioBox belonging to the RadioGroup.",
        "name": "name",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBoxGroup.tsx",
          "name": "RadioBoxGroupProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBoxGroup.tsx",
            "name": "RadioBoxGroupProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "value": {
        "defaultValue": null,
        "description": "Determines what RadioBox will be checked on default. Component will be controlled if this prop is used.",
        "name": "value",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBoxGroup.tsx",
          "name": "RadioBoxGroupProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBoxGroup.tsx",
            "name": "RadioBoxGroupProps"
          }
        ],
        "required": false,
        "type": { "name": "string | number" }
      },
      "size": {
        "defaultValue": { "value": "default" },
        "description": "Determines size of RadioBox components ['default', 'compact', 'full'].",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBoxGroup.tsx",
          "name": "RadioBoxGroupProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBoxGroup.tsx",
            "name": "RadioBoxGroupProps"
          }
        ],
        "required": false,
        "type": { "name": "Size" }
      },
      "className": {
        "defaultValue": null,
        "description": "className supplied to RadioBoxGroup container.",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBoxGroup.tsx",
          "name": "RadioBoxGroupProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-box-group/src/RadioBoxGroup.tsx",
            "name": "RadioBoxGroupProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {
      "param": "props.disabled Boolean that determines if the Radio is disabled.\nprops.children Content that will appear inside of Radio.\nprops.value Used to determine what Radio is active.\nprops.id Id for Radio and respective label.\nprops.default If RadioGroup is uncontrolled, the default property makes this Radio checked on the initial render.\nprops.className className supplied to Radio container.\nprops.size Size of Radio buttons."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/radio-group/src/Radio.tsx",
    "description": "# Radio\n\nRadio component\n\n```\n<Radio value='radio-1'>Radio 1</Radio>\n```",
    "displayName": "Radio",
    "methods": [],
    "props": {
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      },
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "id": {
        "defaultValue": null,
        "description": "",
        "name": "id",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          },
          {
            "fileName": "leafygreen-ui/packages/radio-group/src/Radio.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "size": {
        "defaultValue": { "value": "default" },
        "description": "Determines the size of the Radio components Can be 'small' or 'default.",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-group/src/RadioGroup.tsx",
          "name": "RadioGroupProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-group/src/RadioGroup.tsx",
            "name": "RadioGroupProps"
          }
        ],
        "required": false,
        "type": { "name": "Size" }
      },
      "darkMode": {
        "defaultValue": { "value": false },
        "description": "Determines whether or not the RadioGroup will appear in dark mode.",
        "name": "darkMode",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-group/src/RadioGroup.tsx",
          "name": "RadioGroupProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-group/src/RadioGroup.tsx",
            "name": "RadioGroupProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "default": {
        "defaultValue": null,
        "description": "",
        "name": "default",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-group/src/Radio.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      }
    }
  },
  {
    "tags": {
      "param": "props.children Content to appear inside of RadioGroup component.\nprops.onChange Callback to be executed when a Radio is selected.\nprops.value Radio that should appear checked. If value passed, component will be controlled by consumer.\nprops.className classname applied to RadioGroup container.\nprops.name Name passed to each Radio belonging to the RadioGroup.\nprops.darkMode Determines whether or not the RadioGroup will appear in dark mode.\nprops.size Determines the size of the Radio components Can be 'small' or 'default."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/radio-group/src/RadioGroup.tsx",
    "description": "# RadioGroup\n\nRadioGroup component\n\n```\n<RadioGroup onChange={() => execute callback onChange}>\n<Radio value='Radio-1'>Radio 1</Radio>\n<Radio value='Radio-2'>Radio 2</Radio>\n</RadioGroup>\n```",
    "displayName": "RadioGroup",
    "methods": [],
    "props": {
      "darkMode": {
        "defaultValue": { "value": false },
        "description": "Determines whether or not the RadioGroup will appear in dark mode.",
        "name": "darkMode",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-group/src/RadioGroup.tsx",
          "name": "RadioGroupProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-group/src/RadioGroup.tsx",
            "name": "RadioGroupProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "className": {
        "defaultValue": null,
        "description": "className supplied to RadioGroup container.",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-group/src/RadioGroup.tsx",
          "name": "RadioGroupProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-group/src/RadioGroup.tsx",
            "name": "RadioGroupProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Callback to be executed when a Radio is selected.",
        "name": "onChange",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-group/src/RadioGroup.tsx",
          "name": "RadioGroupProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-group/src/RadioGroup.tsx",
            "name": "RadioGroupProps"
          }
        ],
        "required": false,
        "type": { "name": "React.ChangeEventHandler<HTMLInputElement>" }
      },
      "children": {
        "defaultValue": null,
        "description": "Content that will appear inside of RadioGroup component.",
        "name": "children",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-group/src/RadioGroup.tsx",
          "name": "RadioGroupProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-group/src/RadioGroup.tsx",
            "name": "RadioGroupProps"
          }
        ],
        "required": true,
        "type": { "name": "React.ReactNode" }
      },
      "name": {
        "defaultValue": null,
        "description": "Name passed to each Radio belonging to the RadioGroup.",
        "name": "name",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-group/src/RadioGroup.tsx",
          "name": "RadioGroupProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-group/src/RadioGroup.tsx",
            "name": "RadioGroupProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "value": {
        "defaultValue": null,
        "description": "Determines what radio will be checked on default. Component will be controlled if this prop is used.",
        "name": "value",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-group/src/RadioGroup.tsx",
          "name": "RadioGroupProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-group/src/RadioGroup.tsx",
            "name": "RadioGroupProps"
          }
        ],
        "required": false,
        "type": { "name": "string | number" }
      },
      "size": {
        "defaultValue": { "value": "default" },
        "description": "Determines the size of the Radio components Can be 'small' or 'default.",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-group/src/RadioGroup.tsx",
          "name": "RadioGroupProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-group/src/RadioGroup.tsx",
            "name": "RadioGroupProps"
          }
        ],
        "required": false,
        "type": { "name": "Size" }
      }
    }
  },
  {
    "tags": {
      "param": "props.disabled Boolean that determines if the Radio is disabled.\nprops.children Content that will appear inside of Radio.\nprops.value Used to determine what Radio is active.\nprops.id Id for Radio and respective label.\nprops.default If RadioGroup is uncontrolled, the default property makes this Radio checked on the initial render.\nprops.className className supplied to Radio container.\nprops.size Size of Radio buttons."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/radio-group/src/index.ts",
    "description": "# Radio\n\nRadio component\n\n```\n<Radio value='radio-1'>Radio 1</Radio>\n```",
    "displayName": "Radio",
    "methods": [],
    "props": {
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      },
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "id": {
        "defaultValue": null,
        "description": "",
        "name": "id",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          },
          {
            "fileName": "leafygreen-ui/packages/radio-group/src/Radio.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "size": {
        "defaultValue": { "value": "default" },
        "description": "Determines the size of the Radio components Can be 'small' or 'default.",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-group/src/RadioGroup.tsx",
          "name": "RadioGroupProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-group/src/RadioGroup.tsx",
            "name": "RadioGroupProps"
          }
        ],
        "required": false,
        "type": { "name": "Size" }
      },
      "darkMode": {
        "defaultValue": { "value": false },
        "description": "Determines whether or not the RadioGroup will appear in dark mode.",
        "name": "darkMode",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-group/src/RadioGroup.tsx",
          "name": "RadioGroupProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-group/src/RadioGroup.tsx",
            "name": "RadioGroupProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "default": {
        "defaultValue": null,
        "description": "",
        "name": "default",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-group/src/Radio.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      }
    }
  },
  {
    "tags": {
      "param": "props.children Content to appear inside of RadioGroup component.\nprops.onChange Callback to be executed when a Radio is selected.\nprops.value Radio that should appear checked. If value passed, component will be controlled by consumer.\nprops.className classname applied to RadioGroup container.\nprops.name Name passed to each Radio belonging to the RadioGroup.\nprops.darkMode Determines whether or not the RadioGroup will appear in dark mode.\nprops.size Determines the size of the Radio components Can be 'small' or 'default."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/radio-group/src/index.ts",
    "description": "# RadioGroup\n\nRadioGroup component\n\n```\n<RadioGroup onChange={() => execute callback onChange}>\n<Radio value='Radio-1'>Radio 1</Radio>\n<Radio value='Radio-2'>Radio 2</Radio>\n</RadioGroup>\n```",
    "displayName": "RadioGroup",
    "methods": [],
    "props": {
      "darkMode": {
        "defaultValue": { "value": false },
        "description": "Determines whether or not the RadioGroup will appear in dark mode.",
        "name": "darkMode",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-group/src/RadioGroup.tsx",
          "name": "RadioGroupProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-group/src/RadioGroup.tsx",
            "name": "RadioGroupProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "className": {
        "defaultValue": null,
        "description": "className supplied to RadioGroup container.",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-group/src/RadioGroup.tsx",
          "name": "RadioGroupProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-group/src/RadioGroup.tsx",
            "name": "RadioGroupProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Callback to be executed when a Radio is selected.",
        "name": "onChange",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-group/src/RadioGroup.tsx",
          "name": "RadioGroupProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-group/src/RadioGroup.tsx",
            "name": "RadioGroupProps"
          }
        ],
        "required": false,
        "type": { "name": "React.ChangeEventHandler<HTMLInputElement>" }
      },
      "children": {
        "defaultValue": null,
        "description": "Content that will appear inside of RadioGroup component.",
        "name": "children",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-group/src/RadioGroup.tsx",
          "name": "RadioGroupProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-group/src/RadioGroup.tsx",
            "name": "RadioGroupProps"
          }
        ],
        "required": true,
        "type": { "name": "React.ReactNode" }
      },
      "name": {
        "defaultValue": null,
        "description": "Name passed to each Radio belonging to the RadioGroup.",
        "name": "name",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-group/src/RadioGroup.tsx",
          "name": "RadioGroupProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-group/src/RadioGroup.tsx",
            "name": "RadioGroupProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "value": {
        "defaultValue": null,
        "description": "Determines what radio will be checked on default. Component will be controlled if this prop is used.",
        "name": "value",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-group/src/RadioGroup.tsx",
          "name": "RadioGroupProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-group/src/RadioGroup.tsx",
            "name": "RadioGroupProps"
          }
        ],
        "required": false,
        "type": { "name": "string | number" }
      },
      "size": {
        "defaultValue": { "value": "default" },
        "description": "Determines the size of the Radio components Can be 'small' or 'default.",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/radio-group/src/RadioGroup.tsx",
          "name": "RadioGroupProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/radio-group/src/RadioGroup.tsx",
            "name": "RadioGroupProps"
          }
        ],
        "required": false,
        "type": { "name": "Size" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/segmented-control/src/SegmentedControl.tsx",
    "description": "Component",
    "displayName": "SegmentedControl",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/segmented-control/src/SegmentedControlOption.tsx",
    "description": "Component",
    "displayName": "SegmentedControlOption",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/segmented-control/src/index.ts",
    "description": "Component",
    "displayName": "SegmentedControl",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/segmented-control/src/index.ts",
    "description": "Component",
    "displayName": "SegmentedControlOption",
    "methods": [],
    "props": {}
  },
  {
    "tags": { "param": "effect" },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/segmented-control/src/useEffectOnceOnMount.tsx",
    "description": "Runs an effect on the first render only",
    "displayName": "useEffectOnceOnMount",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/select/src/Option.tsx",
    "description": "",
    "displayName": "Option",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/select/src/Option.tsx",
          "name": "InternalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Option.tsx",
            "name": "InternalProps"
          }
        ],
        "required": true,
        "type": { "name": "string" }
      },
      "glyph": {
        "defaultValue": null,
        "description": "",
        "name": "glyph",
        "parent": {
          "fileName": "leafygreen-ui/packages/select/src/Option.tsx",
          "name": "InternalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Option.tsx",
            "name": "InternalProps"
          }
        ],
        "required": true,
        "type": { "name": "any" }
      },
      "selected": {
        "defaultValue": null,
        "description": "",
        "name": "selected",
        "parent": {
          "fileName": "leafygreen-ui/packages/select/src/Option.tsx",
          "name": "InternalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Option.tsx",
            "name": "InternalProps"
          }
        ],
        "required": true,
        "type": { "name": "boolean" }
      },
      "focused": {
        "defaultValue": null,
        "description": "",
        "name": "focused",
        "parent": {
          "fileName": "leafygreen-ui/packages/select/src/Option.tsx",
          "name": "InternalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Option.tsx",
            "name": "InternalProps"
          }
        ],
        "required": true,
        "type": { "name": "boolean" }
      },
      "disabled": {
        "defaultValue": null,
        "description": "",
        "name": "disabled",
        "parent": {
          "fileName": "leafygreen-ui/packages/select/src/Option.tsx",
          "name": "InternalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Option.tsx",
            "name": "InternalProps"
          }
        ],
        "required": true,
        "type": { "name": "boolean" }
      },
      "onClick": {
        "defaultValue": null,
        "description": "",
        "name": "onClick",
        "parent": {
          "fileName": "leafygreen-ui/packages/select/src/Option.tsx",
          "name": "InternalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Option.tsx",
            "name": "InternalProps"
          }
        ],
        "required": true,
        "type": { "name": "React.MouseEventHandler" }
      },
      "onFocus": {
        "defaultValue": null,
        "description": "",
        "name": "onFocus",
        "parent": {
          "fileName": "leafygreen-ui/packages/select/src/Option.tsx",
          "name": "InternalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Option.tsx",
            "name": "InternalProps"
          }
        ],
        "required": true,
        "type": { "name": "React.FocusEventHandler" }
      },
      "isDeselection": {
        "defaultValue": null,
        "description": "",
        "name": "isDeselection",
        "parent": {
          "fileName": "leafygreen-ui/packages/select/src/Option.tsx",
          "name": "InternalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Option.tsx",
            "name": "InternalProps"
          }
        ],
        "required": true,
        "type": { "name": "boolean" }
      },
      "hasGlyphs": {
        "defaultValue": null,
        "description": "",
        "name": "hasGlyphs",
        "parent": {
          "fileName": "leafygreen-ui/packages/select/src/Option.tsx",
          "name": "InternalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Option.tsx",
            "name": "InternalProps"
          }
        ],
        "required": true,
        "type": { "name": "boolean" }
      },
      "triggerScrollIntoView": {
        "defaultValue": null,
        "description": "",
        "name": "triggerScrollIntoView",
        "parent": {
          "fileName": "leafygreen-ui/packages/select/src/Option.tsx",
          "name": "InternalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Option.tsx",
            "name": "InternalProps"
          }
        ],
        "required": true,
        "type": { "name": "boolean" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/select/src/OptionGroup.tsx",
    "description": "",
    "displayName": "OptionGroup",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/select/src/OptionGroup.tsx",
          "name": "InternalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/OptionGroup.tsx",
            "name": "InternalProps"
          }
        ],
        "required": true,
        "type": { "name": "string" }
      },
      "label": {
        "defaultValue": null,
        "description": "",
        "name": "label",
        "parent": {
          "fileName": "leafygreen-ui/packages/select/src/OptionGroup.tsx",
          "name": "InternalProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/OptionGroup.tsx",
            "name": "InternalProps"
          }
        ],
        "required": true,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/select/src/Select.tsx",
    "description": "",
    "displayName": "Select",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Content that will appear inside of the popover component.",
        "name": "children",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": { "name": "any" }
      },
      "className": {
        "defaultValue": null,
        "description": "Class name applied to popover content container.",
        "name": "className",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "id": {
        "defaultValue": null,
        "description": "",
        "name": "id",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "darkMode": {
        "defaultValue": { "value": false },
        "description": "",
        "name": "darkMode",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "size": {
        "defaultValue": { "value": "default" },
        "description": "",
        "name": "size",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Size" }
      },
      "disabled": {
        "defaultValue": { "value": false },
        "description": "",
        "name": "disabled",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "description": {
        "defaultValue": null,
        "description": "",
        "name": "description",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "placeholder": {
        "defaultValue": { "value": "Select" },
        "description": "",
        "name": "placeholder",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "name": {
        "defaultValue": null,
        "description": "",
        "name": "name",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "allowDeselect": {
        "defaultValue": { "value": true },
        "description": "",
        "name": "allowDeselect",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "errorMessage": {
        "defaultValue": { "value": "error message right here" },
        "description": "",
        "name": "errorMessage",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "state": {
        "defaultValue": { "value": "none" },
        "description": "",
        "name": "state",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "State" }
      },
      "__INTERNAL__menuButtonSlot__": {
        "defaultValue": null,
        "description": "",
        "name": "__INTERNAL__menuButtonSlot__",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "React.ForwardRefExoticComponent<React.RefAttributes<unknown>>"
        }
      },
      "onClick": {
        "defaultValue": null,
        "description": "Click event handler passed to the root div element within the portal container.",
        "name": "onClick",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "React.MouseEventHandler" }
      },
      "usePortal": {
        "defaultValue": { "value": true },
        "description": "Specifies that the popover content should be rendered at the end of the DOM,\nrather than in the DOM tree.\n\ndefault: `true`",
        "name": "usePortal",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "portalClassName": {
        "defaultValue": null,
        "description": "When usePortal is `true`, specifies a class name to apply to the root element of the portal.",
        "name": "portalClassName",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "portalContainer": {
        "defaultValue": null,
        "description": "When usePortal is `true`, specifies an element to portal within. The default behavior is to generate a div at the end of the document to render within.",
        "name": "portalContainer",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "HTMLElement" }
      },
      "scrollContainer": {
        "defaultValue": null,
        "description": "When usePortal is `true`, specifies the scrollable element to position relative to.",
        "name": "scrollContainer",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "HTMLElement" }
      },
      "popoverZIndex": {
        "defaultValue": null,
        "description": "Number that controls the z-index of the popover element directly.",
        "name": "popoverZIndex",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "align": {
        "defaultValue": null,
        "description": "Determines the alignment of the popover content relative to the trigger element\n\ndefault: `bottom`",
        "name": "align",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Align" }
      },
      "justify": {
        "defaultValue": null,
        "description": "Determines the justification of the popover content relative to the trigger element\n\ndefault: `start`",
        "name": "justify",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Justify" }
      },
      "refEl": {
        "defaultValue": null,
        "description": "A reference to the element against which the popover component will be positioned.",
        "name": "refEl",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "React.RefObject<HTMLElement>" }
      },
      "adjustOnMutation": {
        "defaultValue": null,
        "description": "Should the Popover auto adjust its content when the DOM changes (using MutationObserver).\n\ndefault: false",
        "name": "adjustOnMutation",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "",
        "name": "defaultValue",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "value": {
        "defaultValue": null,
        "description": "",
        "name": "value",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "onChange": {
        "defaultValue": null,
        "description": "",
        "name": "onChange",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "((value: string, event: any) => void) | ((value: string, event: any) => void)"
        }
      },
      "readOnly": {
        "defaultValue": null,
        "description": "",
        "name": "readOnly",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "label": {
        "defaultValue": null,
        "description": "",
        "name": "label",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "aria-labelledby": {
        "defaultValue": null,
        "description": "",
        "name": "aria-labelledby",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/select/src/index.ts",
    "description": "",
    "displayName": "src",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Content that will appear inside of the popover component.",
        "name": "children",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": { "name": "any" }
      },
      "className": {
        "defaultValue": null,
        "description": "Class name applied to popover content container.",
        "name": "className",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "id": {
        "defaultValue": null,
        "description": "",
        "name": "id",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "darkMode": {
        "defaultValue": { "value": false },
        "description": "",
        "name": "darkMode",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "size": {
        "defaultValue": { "value": "default" },
        "description": "",
        "name": "size",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Size" }
      },
      "disabled": {
        "defaultValue": { "value": false },
        "description": "",
        "name": "disabled",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "description": {
        "defaultValue": null,
        "description": "",
        "name": "description",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "placeholder": {
        "defaultValue": { "value": "Select" },
        "description": "",
        "name": "placeholder",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "name": {
        "defaultValue": null,
        "description": "",
        "name": "name",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "allowDeselect": {
        "defaultValue": { "value": true },
        "description": "",
        "name": "allowDeselect",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "errorMessage": {
        "defaultValue": { "value": "error message right here" },
        "description": "",
        "name": "errorMessage",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "state": {
        "defaultValue": { "value": "none" },
        "description": "",
        "name": "state",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "State" }
      },
      "__INTERNAL__menuButtonSlot__": {
        "defaultValue": null,
        "description": "",
        "name": "__INTERNAL__menuButtonSlot__",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "React.ForwardRefExoticComponent<React.RefAttributes<unknown>>"
        }
      },
      "onClick": {
        "defaultValue": null,
        "description": "Click event handler passed to the root div element within the portal container.",
        "name": "onClick",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "React.MouseEventHandler" }
      },
      "usePortal": {
        "defaultValue": { "value": true },
        "description": "Specifies that the popover content should be rendered at the end of the DOM,\nrather than in the DOM tree.\n\ndefault: `true`",
        "name": "usePortal",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "portalClassName": {
        "defaultValue": null,
        "description": "When usePortal is `true`, specifies a class name to apply to the root element of the portal.",
        "name": "portalClassName",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "portalContainer": {
        "defaultValue": null,
        "description": "When usePortal is `true`, specifies an element to portal within. The default behavior is to generate a div at the end of the document to render within.",
        "name": "portalContainer",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "HTMLElement" }
      },
      "scrollContainer": {
        "defaultValue": null,
        "description": "When usePortal is `true`, specifies the scrollable element to position relative to.",
        "name": "scrollContainer",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "HTMLElement" }
      },
      "popoverZIndex": {
        "defaultValue": null,
        "description": "Number that controls the z-index of the popover element directly.",
        "name": "popoverZIndex",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "align": {
        "defaultValue": null,
        "description": "Determines the alignment of the popover content relative to the trigger element\n\ndefault: `bottom`",
        "name": "align",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Align" }
      },
      "justify": {
        "defaultValue": null,
        "description": "Determines the justification of the popover content relative to the trigger element\n\ndefault: `start`",
        "name": "justify",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Justify" }
      },
      "refEl": {
        "defaultValue": null,
        "description": "A reference to the element against which the popover component will be positioned.",
        "name": "refEl",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "React.RefObject<HTMLElement>" }
      },
      "adjustOnMutation": {
        "defaultValue": null,
        "description": "Should the Popover auto adjust its content when the DOM changes (using MutationObserver).\n\ndefault: false",
        "name": "adjustOnMutation",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "",
        "name": "defaultValue",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "value": {
        "defaultValue": null,
        "description": "",
        "name": "value",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "onChange": {
        "defaultValue": null,
        "description": "",
        "name": "onChange",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "((value: string, event: any) => void) | ((value: string, event: any) => void)"
        }
      },
      "readOnly": {
        "defaultValue": null,
        "description": "",
        "name": "readOnly",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "label": {
        "defaultValue": null,
        "description": "",
        "name": "label",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "aria-labelledby": {
        "defaultValue": null,
        "description": "",
        "name": "aria-labelledby",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Select.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/select/src/utils.tsx",
    "description": "",
    "displayName": "getOptionValue",
    "methods": [],
    "props": {
      "props": {
        "defaultValue": null,
        "description": "",
        "name": "props",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/select/src/Option.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": { "name": "Props" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/select/src/utils.tsx",
    "description": "Given the selected option from a previous render, attempts to find a\nmatch among the options of the next render to become the next selected\noption, so that the state of the component doesn't need to be lost.",
    "displayName": "reconcileOption",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/select/src/utils.tsx",
    "description": "TODO: Explore obsoleting `useElementNode` in favor of this",
    "displayName": "useStateRef",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/side-nav/src/CollapseToggle.tsx",
    "description": "",
    "displayName": "CollapseToggle",
    "methods": [],
    "props": {
      "collapsed": {
        "defaultValue": null,
        "description": "",
        "name": "collapsed",
        "parent": {
          "fileName": "leafygreen-ui/packages/side-nav/src/CollapseToggle.tsx",
          "name": "CollapseToggleProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/CollapseToggle.tsx",
            "name": "CollapseToggleProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "hideTooltip": {
        "defaultValue": null,
        "description": "",
        "name": "hideTooltip",
        "parent": {
          "fileName": "leafygreen-ui/packages/side-nav/src/CollapseToggle.tsx",
          "name": "CollapseToggleProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/CollapseToggle.tsx",
            "name": "CollapseToggleProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {
      "param": "props.className Class name that will be applied to the root-level element.\nprops.children Content that will be rendered inside the root-level element.\nprops.baseFontSize Determines the base font size for the menu items.\nprops.widthOverride Provides an override for the SideNav width.\nprops.collapsed Allows consuming applications to control the collapsed state of the navigation.\nprops.setCollapsed Consuming application's collapsed-state management controller"
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/side-nav/src/SideNav.tsx",
    "description": "# SideNav\n\n```\n<SideNav>\n<SideNavGroup headerText=\"Section Header\">\n <SideNavItem href=\"/\">\n   Back to Home\n </SideNavItem>\n</SideNavGroup>\n</SideNav>\n```",
    "displayName": "SideNav",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Class name that will be applied to the root-level element.",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/side-nav/src/types.ts",
          "name": "SideNavProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/types.ts",
            "name": "SideNavProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "children": {
        "defaultValue": null,
        "description": "Content that will be rendered inside the root-level element.",
        "name": "children",
        "parent": {
          "fileName": "leafygreen-ui/packages/side-nav/src/types.ts",
          "name": "SideNavProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/types.ts",
            "name": "SideNavProps"
          }
        ],
        "required": false,
        "type": { "name": "ReactNode" }
      },
      "id": {
        "defaultValue": null,
        "description": "",
        "name": "id",
        "parent": {
          "fileName": "leafygreen-ui/packages/side-nav/src/types.ts",
          "name": "SideNavProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/types.ts",
            "name": "SideNavProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "baseFontSize": {
        "defaultValue": null,
        "description": "Determines the base font size for the menu items.",
        "name": "baseFontSize",
        "parent": {
          "fileName": "leafygreen-ui/packages/side-nav/src/types.ts",
          "name": "SideNavProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/types.ts",
            "name": "SideNavProps"
          }
        ],
        "required": false,
        "type": { "name": "16 | 14" }
      },
      "widthOverride": {
        "defaultValue": null,
        "description": "Provides an override for the SideNav width.",
        "name": "widthOverride",
        "parent": {
          "fileName": "leafygreen-ui/packages/side-nav/src/types.ts",
          "name": "SideNavProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/types.ts",
            "name": "SideNavProps"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "collapsed": {
        "defaultValue": null,
        "description": "Allows consuming applications to control the collapsed state of the navigation.",
        "name": "collapsed",
        "parent": {
          "fileName": "leafygreen-ui/packages/side-nav/src/types.ts",
          "name": "SideNavProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/types.ts",
            "name": "SideNavProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "setCollapsed": {
        "defaultValue": null,
        "description": "Consuming application's collapsed-state management controller",
        "name": "setCollapsed",
        "parent": {
          "fileName": "leafygreen-ui/packages/side-nav/src/types.ts",
          "name": "SideNavProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/types.ts",
            "name": "SideNavProps"
          }
        ],
        "required": false,
        "type": { "name": "Dispatch<SetStateAction<boolean>>" }
      }
    }
  },
  {
    "tags": {
      "param": "props.className Class name that will be applied to the root-level element.\nprops.header Content that will be rendered as the component's header\nIf a string is provided, it will be rendered with default styling as a header tag.\nprops.children Class name that will be applied to the component's header.\nprops.collapsible Determines whether or not the Group can be collapsed.\nprops.initialCollapsed Determines whether or not the Group is open by default.",
      "defaultValue": "false\ntrue"
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/side-nav/src/SideNavGroup/SideNavGroup.tsx",
    "description": "# SideNavGroup\n\n```\n<SideNavGroup headerText=\"Section Header\">\n<SideNavItem href=\"/\">\n Back to Home\n</SideNavItem>\n</SideNavGroup>\n```",
    "displayName": "SideNavGroup",
    "methods": [],
    "props": {
      "collapsible": {
        "defaultValue": { "value": false },
        "description": "Determines whether or not the Group can be collapsed.\n@defaultValue `false`",
        "name": "collapsible",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/SideNavGroup/types.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/SideNavGroup/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "initialCollapsed": {
        "defaultValue": { "value": true },
        "description": "If collapsible, determines whether or not the group should be expanded or collapsed by default.\n@defaultValue `true`",
        "name": "initialCollapsed",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/SideNavGroup/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "className": {
        "defaultValue": null,
        "description": "Class name that will be applied to the root-level element.",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/side-nav/src/SideNavGroup/types.ts",
          "name": "SideNavGroupBaseProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/SideNavGroup/types.ts",
            "name": "SideNavGroupBaseProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "header": {
        "defaultValue": null,
        "description": "Content that will be rendered as the component's header. If a string is provided,\nit will be rendered with default styling as a header tag.",
        "name": "header",
        "parent": {
          "fileName": "leafygreen-ui/packages/side-nav/src/SideNavGroup/types.ts",
          "name": "SideNavGroupBaseProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/SideNavGroup/types.ts",
            "name": "SideNavGroupBaseProps"
          }
        ],
        "required": false,
        "type": { "name": "ReactNode" }
      },
      "children": {
        "defaultValue": null,
        "description": "Content that will be rendered inside the root-level element.",
        "name": "children",
        "parent": {
          "fileName": "leafygreen-ui/packages/side-nav/src/SideNavGroup/types.ts",
          "name": "SideNavGroupBaseProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/SideNavGroup/types.ts",
            "name": "SideNavGroupBaseProps"
          }
        ],
        "required": false,
        "type": { "name": "ReactNode" }
      },
      "glyph": {
        "defaultValue": null,
        "description": "Icon that's rendered in the group label.",
        "name": "glyph",
        "parent": {
          "fileName": "leafygreen-ui/packages/side-nav/src/SideNavGroup/types.ts",
          "name": "SideNavGroupBaseProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/SideNavGroup/types.ts",
            "name": "SideNavGroupBaseProps"
          }
        ],
        "required": false,
        "type": { "name": "ReactNode" }
      },
      "hasActiveItem": {
        "defaultValue": null,
        "description": "Manually overrides automatic detection of whether a group contains an active item.\nThis is useful for cases when an active item might be wrapped with another component like a Tooltip or routing component.",
        "name": "hasActiveItem",
        "parent": {
          "fileName": "leafygreen-ui/packages/side-nav/src/SideNavGroup/types.ts",
          "name": "SideNavGroupBaseProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/SideNavGroup/types.ts",
            "name": "SideNavGroupBaseProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "indentLevel": {
        "defaultValue": { "value": 0 },
        "description": "",
        "name": "indentLevel",
        "parent": {
          "fileName": "leafygreen-ui/packages/side-nav/src/SideNavGroup/types.ts",
          "name": "SideNavGroupBaseProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/SideNavGroup/types.ts",
            "name": "SideNavGroupBaseProps"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      }
    }
  },
  {
    "tags": {
      "param": "props.className Class name that will be applied to the root-level element.\nprops.header Content that will be rendered as the component's header\nIf a string is provided, it will be rendered with default styling as a header tag.\nprops.children Class name that will be applied to the component's header.\nprops.collapsible Determines whether or not the Group can be collapsed.\nprops.initialCollapsed Determines whether or not the Group is open by default.",
      "defaultValue": "false\ntrue"
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/side-nav/src/SideNavGroup/index.ts",
    "description": "# SideNavGroup\n\n```\n<SideNavGroup headerText=\"Section Header\">\n<SideNavItem href=\"/\">\n Back to Home\n</SideNavItem>\n</SideNavGroup>\n```",
    "displayName": "SideNavGroup",
    "methods": [],
    "props": {
      "collapsible": {
        "defaultValue": { "value": false },
        "description": "Determines whether or not the Group can be collapsed.\n@defaultValue `false`",
        "name": "collapsible",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/SideNavGroup/types.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/SideNavGroup/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "initialCollapsed": {
        "defaultValue": { "value": true },
        "description": "If collapsible, determines whether or not the group should be expanded or collapsed by default.\n@defaultValue `true`",
        "name": "initialCollapsed",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/SideNavGroup/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "className": {
        "defaultValue": null,
        "description": "Class name that will be applied to the root-level element.",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/side-nav/src/SideNavGroup/types.ts",
          "name": "SideNavGroupBaseProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/SideNavGroup/types.ts",
            "name": "SideNavGroupBaseProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "header": {
        "defaultValue": null,
        "description": "Content that will be rendered as the component's header. If a string is provided,\nit will be rendered with default styling as a header tag.",
        "name": "header",
        "parent": {
          "fileName": "leafygreen-ui/packages/side-nav/src/SideNavGroup/types.ts",
          "name": "SideNavGroupBaseProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/SideNavGroup/types.ts",
            "name": "SideNavGroupBaseProps"
          }
        ],
        "required": false,
        "type": { "name": "ReactNode" }
      },
      "children": {
        "defaultValue": null,
        "description": "Content that will be rendered inside the root-level element.",
        "name": "children",
        "parent": {
          "fileName": "leafygreen-ui/packages/side-nav/src/SideNavGroup/types.ts",
          "name": "SideNavGroupBaseProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/SideNavGroup/types.ts",
            "name": "SideNavGroupBaseProps"
          }
        ],
        "required": false,
        "type": { "name": "ReactNode" }
      },
      "glyph": {
        "defaultValue": null,
        "description": "Icon that's rendered in the group label.",
        "name": "glyph",
        "parent": {
          "fileName": "leafygreen-ui/packages/side-nav/src/SideNavGroup/types.ts",
          "name": "SideNavGroupBaseProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/SideNavGroup/types.ts",
            "name": "SideNavGroupBaseProps"
          }
        ],
        "required": false,
        "type": { "name": "ReactNode" }
      },
      "hasActiveItem": {
        "defaultValue": null,
        "description": "Manually overrides automatic detection of whether a group contains an active item.\nThis is useful for cases when an active item might be wrapped with another component like a Tooltip or routing component.",
        "name": "hasActiveItem",
        "parent": {
          "fileName": "leafygreen-ui/packages/side-nav/src/SideNavGroup/types.ts",
          "name": "SideNavGroupBaseProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/SideNavGroup/types.ts",
            "name": "SideNavGroupBaseProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "indentLevel": {
        "defaultValue": { "value": 0 },
        "description": "",
        "name": "indentLevel",
        "parent": {
          "fileName": "leafygreen-ui/packages/side-nav/src/SideNavGroup/types.ts",
          "name": "SideNavGroupBaseProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/SideNavGroup/types.ts",
            "name": "SideNavGroupBaseProps"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/side-nav/src/SideNavItem/CollapsedSideNavItem.tsx",
    "description": "",
    "displayName": "CollapsedSideNavItem",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "React Node rendered when the navigation is collapsed.",
        "name": "children",
        "parent": {
          "fileName": "leafygreen-ui/packages/side-nav/src/SideNavItem/CollapsedSideNavItem.tsx",
          "name": "CollapsedSideNavItemProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/SideNavItem/CollapsedSideNavItem.tsx",
            "name": "CollapsedSideNavItemProps"
          }
        ],
        "required": true,
        "type": { "name": "React.ReactNode" }
      },
      "active": {
        "defaultValue": { "value": false },
        "description": "Displays the collapsed item with an active state.",
        "name": "active",
        "parent": {
          "fileName": "leafygreen-ui/packages/side-nav/src/SideNavItem/CollapsedSideNavItem.tsx",
          "name": "CollapsedSideNavItemProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/SideNavItem/CollapsedSideNavItem.tsx",
            "name": "CollapsedSideNavItemProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "className": {
        "defaultValue": null,
        "description": "className applied to the root element rendered.",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/side-nav/src/SideNavItem/CollapsedSideNavItem.tsx",
          "name": "CollapsedSideNavItemProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/SideNavItem/CollapsedSideNavItem.tsx",
            "name": "CollapsedSideNavItemProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/side-nav/src/SideNavItem/index.ts",
    "description": "",
    "displayName": "CollapsedSideNavItem",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "React Node rendered when the navigation is collapsed.",
        "name": "children",
        "parent": {
          "fileName": "leafygreen-ui/packages/side-nav/src/SideNavItem/CollapsedSideNavItem.tsx",
          "name": "CollapsedSideNavItemProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/SideNavItem/CollapsedSideNavItem.tsx",
            "name": "CollapsedSideNavItemProps"
          }
        ],
        "required": true,
        "type": { "name": "React.ReactNode" }
      },
      "active": {
        "defaultValue": { "value": false },
        "description": "Displays the collapsed item with an active state.",
        "name": "active",
        "parent": {
          "fileName": "leafygreen-ui/packages/side-nav/src/SideNavItem/CollapsedSideNavItem.tsx",
          "name": "CollapsedSideNavItemProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/SideNavItem/CollapsedSideNavItem.tsx",
            "name": "CollapsedSideNavItemProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "className": {
        "defaultValue": null,
        "description": "className applied to the root element rendered.",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/side-nav/src/SideNavItem/CollapsedSideNavItem.tsx",
          "name": "CollapsedSideNavItemProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/SideNavItem/CollapsedSideNavItem.tsx",
            "name": "CollapsedSideNavItemProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {
      "param": "props.className Class name that will be applied to the root-level element.\nprops.children Content that will be rendered inside the root-level element.\nprops.baseFontSize Determines the base font size for the menu items.\nprops.widthOverride Provides an override for the SideNav width.\nprops.collapsed Allows consuming applications to control the collapsed state of the navigation.\nprops.setCollapsed Consuming application's collapsed-state management controller"
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/side-nav/src/index.ts",
    "description": "# SideNav\n\n```\n<SideNav>\n<SideNavGroup headerText=\"Section Header\">\n <SideNavItem href=\"/\">\n   Back to Home\n </SideNavItem>\n</SideNavGroup>\n</SideNav>\n```",
    "displayName": "SideNav",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Class name that will be applied to the root-level element.",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/side-nav/src/types.ts",
          "name": "SideNavProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/types.ts",
            "name": "SideNavProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "children": {
        "defaultValue": null,
        "description": "Content that will be rendered inside the root-level element.",
        "name": "children",
        "parent": {
          "fileName": "leafygreen-ui/packages/side-nav/src/types.ts",
          "name": "SideNavProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/types.ts",
            "name": "SideNavProps"
          }
        ],
        "required": false,
        "type": { "name": "ReactNode" }
      },
      "id": {
        "defaultValue": null,
        "description": "",
        "name": "id",
        "parent": {
          "fileName": "leafygreen-ui/packages/side-nav/src/types.ts",
          "name": "SideNavProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/types.ts",
            "name": "SideNavProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "baseFontSize": {
        "defaultValue": null,
        "description": "Determines the base font size for the menu items.",
        "name": "baseFontSize",
        "parent": {
          "fileName": "leafygreen-ui/packages/side-nav/src/types.ts",
          "name": "SideNavProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/types.ts",
            "name": "SideNavProps"
          }
        ],
        "required": false,
        "type": { "name": "16 | 14" }
      },
      "widthOverride": {
        "defaultValue": null,
        "description": "Provides an override for the SideNav width.",
        "name": "widthOverride",
        "parent": {
          "fileName": "leafygreen-ui/packages/side-nav/src/types.ts",
          "name": "SideNavProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/types.ts",
            "name": "SideNavProps"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "collapsed": {
        "defaultValue": null,
        "description": "Allows consuming applications to control the collapsed state of the navigation.",
        "name": "collapsed",
        "parent": {
          "fileName": "leafygreen-ui/packages/side-nav/src/types.ts",
          "name": "SideNavProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/types.ts",
            "name": "SideNavProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "setCollapsed": {
        "defaultValue": null,
        "description": "Consuming application's collapsed-state management controller",
        "name": "setCollapsed",
        "parent": {
          "fileName": "leafygreen-ui/packages/side-nav/src/types.ts",
          "name": "SideNavProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/types.ts",
            "name": "SideNavProps"
          }
        ],
        "required": false,
        "type": { "name": "Dispatch<SetStateAction<boolean>>" }
      }
    }
  },
  {
    "tags": {
      "param": "props.className Class name that will be applied to the root-level element.\nprops.header Content that will be rendered as the component's header\nIf a string is provided, it will be rendered with default styling as a header tag.\nprops.children Class name that will be applied to the component's header.\nprops.collapsible Determines whether or not the Group can be collapsed.\nprops.initialCollapsed Determines whether or not the Group is open by default.",
      "defaultValue": "false\ntrue"
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/side-nav/src/index.ts",
    "description": "# SideNavGroup\n\n```\n<SideNavGroup headerText=\"Section Header\">\n<SideNavItem href=\"/\">\n Back to Home\n</SideNavItem>\n</SideNavGroup>\n```",
    "displayName": "SideNavGroup",
    "methods": [],
    "props": {
      "collapsible": {
        "defaultValue": { "value": false },
        "description": "Determines whether or not the Group can be collapsed.\n@defaultValue `false`",
        "name": "collapsible",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/SideNavGroup/types.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/SideNavGroup/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "initialCollapsed": {
        "defaultValue": { "value": true },
        "description": "If collapsible, determines whether or not the group should be expanded or collapsed by default.\n@defaultValue `true`",
        "name": "initialCollapsed",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/SideNavGroup/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "className": {
        "defaultValue": null,
        "description": "Class name that will be applied to the root-level element.",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/side-nav/src/SideNavGroup/types.ts",
          "name": "SideNavGroupBaseProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/SideNavGroup/types.ts",
            "name": "SideNavGroupBaseProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "header": {
        "defaultValue": null,
        "description": "Content that will be rendered as the component's header. If a string is provided,\nit will be rendered with default styling as a header tag.",
        "name": "header",
        "parent": {
          "fileName": "leafygreen-ui/packages/side-nav/src/SideNavGroup/types.ts",
          "name": "SideNavGroupBaseProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/SideNavGroup/types.ts",
            "name": "SideNavGroupBaseProps"
          }
        ],
        "required": false,
        "type": { "name": "ReactNode" }
      },
      "children": {
        "defaultValue": null,
        "description": "Content that will be rendered inside the root-level element.",
        "name": "children",
        "parent": {
          "fileName": "leafygreen-ui/packages/side-nav/src/SideNavGroup/types.ts",
          "name": "SideNavGroupBaseProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/SideNavGroup/types.ts",
            "name": "SideNavGroupBaseProps"
          }
        ],
        "required": false,
        "type": { "name": "ReactNode" }
      },
      "glyph": {
        "defaultValue": null,
        "description": "Icon that's rendered in the group label.",
        "name": "glyph",
        "parent": {
          "fileName": "leafygreen-ui/packages/side-nav/src/SideNavGroup/types.ts",
          "name": "SideNavGroupBaseProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/SideNavGroup/types.ts",
            "name": "SideNavGroupBaseProps"
          }
        ],
        "required": false,
        "type": { "name": "ReactNode" }
      },
      "hasActiveItem": {
        "defaultValue": null,
        "description": "Manually overrides automatic detection of whether a group contains an active item.\nThis is useful for cases when an active item might be wrapped with another component like a Tooltip or routing component.",
        "name": "hasActiveItem",
        "parent": {
          "fileName": "leafygreen-ui/packages/side-nav/src/SideNavGroup/types.ts",
          "name": "SideNavGroupBaseProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/SideNavGroup/types.ts",
            "name": "SideNavGroupBaseProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "indentLevel": {
        "defaultValue": { "value": 0 },
        "description": "",
        "name": "indentLevel",
        "parent": {
          "fileName": "leafygreen-ui/packages/side-nav/src/SideNavGroup/types.ts",
          "name": "SideNavGroupBaseProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/SideNavGroup/types.ts",
            "name": "SideNavGroupBaseProps"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/side-nav/src/index.ts",
    "description": "",
    "displayName": "CollapsedSideNavItem",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "React Node rendered when the navigation is collapsed.",
        "name": "children",
        "parent": {
          "fileName": "leafygreen-ui/packages/side-nav/src/SideNavItem/CollapsedSideNavItem.tsx",
          "name": "CollapsedSideNavItemProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/SideNavItem/CollapsedSideNavItem.tsx",
            "name": "CollapsedSideNavItemProps"
          }
        ],
        "required": true,
        "type": { "name": "React.ReactNode" }
      },
      "active": {
        "defaultValue": { "value": false },
        "description": "Displays the collapsed item with an active state.",
        "name": "active",
        "parent": {
          "fileName": "leafygreen-ui/packages/side-nav/src/SideNavItem/CollapsedSideNavItem.tsx",
          "name": "CollapsedSideNavItemProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/SideNavItem/CollapsedSideNavItem.tsx",
            "name": "CollapsedSideNavItemProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "className": {
        "defaultValue": null,
        "description": "className applied to the root element rendered.",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/side-nav/src/SideNavItem/CollapsedSideNavItem.tsx",
          "name": "CollapsedSideNavItemProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/side-nav/src/SideNavItem/CollapsedSideNavItem.tsx",
            "name": "CollapsedSideNavItemProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/side-nav/src/styles.ts",
    "description": "",
    "displayName": "getIndentLevelStyle",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/stepper/src/EllipsesStep.tsx",
    "description": "",
    "displayName": "EllipsesStep",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/stepper/src/InternalStep.tsx",
    "description": "",
    "displayName": "InternalStep",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/stepper/src/StepIcon.tsx",
    "description": "",
    "displayName": "StepIcon",
    "methods": [],
    "props": {
      "state": {
        "defaultValue": null,
        "description": "",
        "name": "state",
        "parent": {
          "fileName": "leafygreen-ui/packages/stepper/src/types.ts",
          "name": "StepIconProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/stepper/src/types.ts",
            "name": "StepIconProps"
          }
        ],
        "required": true,
        "type": { "name": "StepStates" }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/stepper/src/types.ts",
          "name": "StepIconProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/stepper/src/types.ts",
            "name": "StepIconProps"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "content": {
        "defaultValue": null,
        "description": "",
        "name": "content",
        "parent": {
          "fileName": "leafygreen-ui/packages/stepper/src/types.ts",
          "name": "StepIconProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/stepper/src/types.ts",
            "name": "StepIconProps"
          }
        ],
        "required": false,
        "type": { "name": "string | number" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/stepper/src/StepLabel.tsx",
    "description": "",
    "displayName": "StepLabel",
    "methods": [],
    "props": {
      "state": {
        "defaultValue": null,
        "description": "",
        "name": "state",
        "parent": {
          "fileName": "leafygreen-ui/packages/stepper/src/types.ts",
          "name": "InternalStepProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/stepper/src/types.ts",
            "name": "InternalStepProps"
          }
        ],
        "required": true,
        "type": { "name": "StepStates" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/stepper/src/Stepper.tsx",
    "description": "",
    "displayName": "Stepper",
    "methods": [],
    "props": {
      "currentStep": {
        "defaultValue": null,
        "description": "",
        "name": "currentStep",
        "parent": {
          "fileName": "leafygreen-ui/packages/stepper/src/types.ts",
          "name": "StepperProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/stepper/src/types.ts",
            "name": "StepperProps"
          }
        ],
        "required": true,
        "type": { "name": "number" }
      },
      "maxDisplayedSteps": {
        "defaultValue": {
          "value": "Array.isArray(children) ? children.length : 1"
        },
        "description": "",
        "name": "maxDisplayedSteps",
        "parent": {
          "fileName": "leafygreen-ui/packages/stepper/src/types.ts",
          "name": "StepperProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/stepper/src/types.ts",
            "name": "StepperProps"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "completedStepsShown": {
        "defaultValue": { "value": 1 },
        "description": "",
        "name": "completedStepsShown",
        "parent": {
          "fileName": "leafygreen-ui/packages/stepper/src/types.ts",
          "name": "StepperProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/stepper/src/types.ts",
            "name": "StepperProps"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "darkMode": {
        "defaultValue": { "value": false },
        "description": "",
        "name": "darkMode",
        "parent": {
          "fileName": "leafygreen-ui/packages/stepper/src/types.ts",
          "name": "StepperProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/stepper/src/types.ts",
            "name": "StepperProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/stepper/src/types.ts",
          "name": "StepperProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/stepper/src/types.ts",
            "name": "StepperProps"
          },
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/stepper/src/StepperContext.tsx",
    "description": "",
    "displayName": "StepperContext",
    "methods": [],
    "props": {
      "darkMode": {
        "defaultValue": null,
        "description": "",
        "name": "darkMode",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/stepper/src/StepperContext.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": { "name": "boolean" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/stepper/src/index.ts",
    "description": "",
    "displayName": "src",
    "methods": [],
    "props": {
      "currentStep": {
        "defaultValue": null,
        "description": "",
        "name": "currentStep",
        "parent": {
          "fileName": "leafygreen-ui/packages/stepper/src/types.ts",
          "name": "StepperProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/stepper/src/types.ts",
            "name": "StepperProps"
          }
        ],
        "required": true,
        "type": { "name": "number" }
      },
      "maxDisplayedSteps": {
        "defaultValue": {
          "value": "Array.isArray(children) ? children.length : 1"
        },
        "description": "",
        "name": "maxDisplayedSteps",
        "parent": {
          "fileName": "leafygreen-ui/packages/stepper/src/types.ts",
          "name": "StepperProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/stepper/src/types.ts",
            "name": "StepperProps"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "completedStepsShown": {
        "defaultValue": { "value": 1 },
        "description": "",
        "name": "completedStepsShown",
        "parent": {
          "fileName": "leafygreen-ui/packages/stepper/src/types.ts",
          "name": "StepperProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/stepper/src/types.ts",
            "name": "StepperProps"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "darkMode": {
        "defaultValue": { "value": false },
        "description": "",
        "name": "darkMode",
        "parent": {
          "fileName": "leafygreen-ui/packages/stepper/src/types.ts",
          "name": "StepperProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/stepper/src/types.ts",
            "name": "StepperProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/stepper/src/types.ts",
          "name": "StepperProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/stepper/src/types.ts",
            "name": "StepperProps"
          },
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/table/src/DarkModeContext.tsx",
    "description": "",
    "displayName": "DarkModeProvider",
    "methods": [],
    "props": {
      "darkMode": {
        "defaultValue": null,
        "description": "",
        "name": "darkMode",
        "parent": {
          "fileName": "leafygreen-ui/packages/table/src/DarkModeContext.tsx",
          "name": "DarkModeProviderInterface"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/table/src/DarkModeContext.tsx",
            "name": "DarkModeProviderInterface"
          }
        ],
        "required": true,
        "type": { "name": "boolean" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/table/src/FontSizeContext.tsx",
    "description": "",
    "displayName": "FontSizeProvider",
    "methods": [],
    "props": {
      "baseFontSize": {
        "defaultValue": null,
        "description": "",
        "name": "baseFontSize",
        "parent": {
          "fileName": "leafygreen-ui/packages/table/src/FontSizeContext.tsx",
          "name": "FontSizeProviderInterface"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/table/src/FontSizeContext.tsx",
            "name": "FontSizeProviderInterface"
          }
        ],
        "required": true,
        "type": { "name": "BaseFontSize" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/table/src/HeaderRow.tsx",
    "description": "",
    "displayName": "HeaderRow",
    "methods": [],
    "props": {
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/table/src/SortContext.tsx",
    "description": "",
    "displayName": "SortProvider",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/table/src/SortContext.tsx",
    "description": "",
    "displayName": "getDataComparisonFunction",
    "methods": [],
    "props": {
      "direction": {
        "defaultValue": null,
        "description": "",
        "name": "direction",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/table/src/SortContext.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": { "name": "SortDirection" }
      },
      "accessorValue": {
        "defaultValue": null,
        "description": "",
        "name": "accessorValue",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/table/src/SortContext.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "(data: T) => string" }
      },
      "compareFn": {
        "defaultValue": null,
        "description": "",
        "name": "compareFn",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/table/src/SortContext.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "(a: T, b: T, dir: SortDirection) => number" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/table/src/Table.tsx",
    "description": "",
    "displayName": "Table",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "",
        "name": "data",
        "parent": {
          "fileName": "leafygreen-ui/packages/table/src/Table.tsx",
          "name": "TableProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/table/src/Table.tsx",
            "name": "TableProps"
          }
        ],
        "required": true,
        "type": { "name": "Shape[]" }
      },
      "columns": {
        "defaultValue": { "value": "[]" },
        "description": "",
        "name": "columns",
        "parent": {
          "fileName": "leafygreen-ui/packages/table/src/Table.tsx",
          "name": "TableProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/table/src/Table.tsx",
            "name": "TableProps"
          }
        ],
        "required": false,
        "type": { "name": "any" }
      },
      "baseFontSize": {
        "defaultValue": null,
        "description": "",
        "name": "baseFontSize",
        "parent": {
          "fileName": "leafygreen-ui/packages/table/src/Table.tsx",
          "name": "TableProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/table/src/Table.tsx",
            "name": "TableProps"
          }
        ],
        "required": false,
        "type": { "name": "16 | 14" }
      },
      "darkMode": {
        "defaultValue": { "value": false },
        "description": "",
        "name": "darkMode",
        "parent": {
          "fileName": "leafygreen-ui/packages/table/src/Table.tsx",
          "name": "TableProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/table/src/Table.tsx",
            "name": "TableProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/table/src/TableBody.tsx",
    "description": "",
    "displayName": "TableBody",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/table/src/TableContext.tsx",
    "description": "",
    "displayName": "TableProvider",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "",
        "name": "data",
        "parent": {
          "fileName": "leafygreen-ui/packages/table/src/TableContext.tsx",
          "name": "TableProviderInterface"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/table/src/TableContext.tsx",
            "name": "TableProviderInterface"
          }
        ],
        "required": true,
        "type": { "name": "any[]" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/table/src/TableHead.tsx",
    "description": "",
    "displayName": "TableHead",
    "methods": [],
    "props": {
      "columns": {
        "defaultValue": { "value": "[]" },
        "description": "",
        "name": "columns",
        "parent": {
          "fileName": "leafygreen-ui/packages/table/src/Table.tsx",
          "name": "TableProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/table/src/Table.tsx",
            "name": "TableProps"
          }
        ],
        "required": false,
        "type": { "name": "any" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/table/src/TableHeader.tsx",
    "description": "",
    "displayName": "TableHeader",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/table/src/index.ts",
    "description": "",
    "displayName": "src",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "",
        "name": "data",
        "parent": {
          "fileName": "leafygreen-ui/packages/table/src/Table.tsx",
          "name": "TableProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/table/src/Table.tsx",
            "name": "TableProps"
          }
        ],
        "required": true,
        "type": { "name": "Shape[]" }
      },
      "columns": {
        "defaultValue": { "value": "[]" },
        "description": "",
        "name": "columns",
        "parent": {
          "fileName": "leafygreen-ui/packages/table/src/Table.tsx",
          "name": "TableProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/table/src/Table.tsx",
            "name": "TableProps"
          }
        ],
        "required": false,
        "type": { "name": "any" }
      },
      "baseFontSize": {
        "defaultValue": null,
        "description": "",
        "name": "baseFontSize",
        "parent": {
          "fileName": "leafygreen-ui/packages/table/src/Table.tsx",
          "name": "TableProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/table/src/Table.tsx",
            "name": "TableProps"
          }
        ],
        "required": false,
        "type": { "name": "16 | 14" }
      },
      "darkMode": {
        "defaultValue": { "value": false },
        "description": "",
        "name": "darkMode",
        "parent": {
          "fileName": "leafygreen-ui/packages/table/src/Table.tsx",
          "name": "TableProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/table/src/Table.tsx",
            "name": "TableProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/table/src/index.ts",
    "description": "",
    "displayName": "TableHeader",
    "methods": [],
    "props": {
      "label": {
        "defaultValue": null,
        "description": "The label of the column",
        "name": "label",
        "parent": {
          "fileName": "leafygreen-ui/packages/table/src/TableHeader.tsx",
          "name": "TableHeaderInterface"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/table/src/TableHeader.tsx",
            "name": "TableHeaderInterface"
          }
        ],
        "required": true,
        "type": { "name": "any" }
      },
      "index": {
        "defaultValue": null,
        "description": "The index of the column",
        "name": "index",
        "parent": {
          "fileName": "leafygreen-ui/packages/table/src/TableHeader.tsx",
          "name": "TableHeaderInterface"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/table/src/TableHeader.tsx",
            "name": "TableHeaderInterface"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "onClick": {
        "defaultValue": null,
        "description": "Callback fired when the header is clicked",
        "name": "onClick",
        "parent": {
          "fileName": "leafygreen-ui/packages/table/src/TableHeader.tsx",
          "name": "TableHeaderInterface"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/table/src/TableHeader.tsx",
            "name": "TableHeaderInterface"
          }
        ],
        "required": false,
        "type": {
          "name": "(colId: number, accessorValue: string | ((data: any) => string)) => void"
        }
      },
      "sortBy": {
        "defaultValue": null,
        "description": "A callback to define which property of the data structure to sort on",
        "name": "sortBy",
        "parent": {
          "fileName": "leafygreen-ui/packages/table/src/TableHeader.tsx",
          "name": "TableHeaderInterface"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/table/src/TableHeader.tsx",
            "name": "TableHeaderInterface"
          }
        ],
        "required": false,
        "type": { "name": "string | ((data: Shape) => string)" }
      },
      "compareFn": {
        "defaultValue": null,
        "description": "A callback to provide more customization in column sorting.\nThis callback has a similar signature to the Array.sort method,\nwith the addition of a `direction` parameter, which has values `asc` or `desc`.\n\nPin a row to the top by returning -1 if `a` matches, and 1 if `b` matches the desired row",
        "name": "compareFn",
        "parent": {
          "fileName": "leafygreen-ui/packages/table/src/TableHeader.tsx",
          "name": "TableHeaderInterface"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/table/src/TableHeader.tsx",
            "name": "TableHeaderInterface"
          }
        ],
        "required": false,
        "type": {
          "name": "(a: Shape, b: Shape, direction: SortDirection) => number"
        }
      },
      "handleSort": {
        "defaultValue": null,
        "description": "A callback that gets called when a user initiates sort on the column.\nInternal sorting is disabled when this callback is provided.",
        "name": "handleSort",
        "parent": {
          "fileName": "leafygreen-ui/packages/table/src/TableHeader.tsx",
          "name": "TableHeaderInterface"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/table/src/TableHeader.tsx",
            "name": "TableHeaderInterface"
          }
        ],
        "required": false,
        "type": { "name": "(direction: SortDirection) => void" }
      },
      "dataType": {
        "defaultValue": null,
        "description": "The type of data as a `DataType`",
        "name": "dataType",
        "parent": {
          "fileName": "leafygreen-ui/packages/table/src/TableHeader.tsx",
          "name": "TableHeaderInterface"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/table/src/TableHeader.tsx",
            "name": "TableHeaderInterface"
          }
        ],
        "required": false,
        "type": { "name": "DataType" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/table/src/index.ts",
    "description": "",
    "displayName": "HeaderRow",
    "methods": [],
    "props": {
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/table/src/testUtils.tsx",
    "description": "",
    "displayName": "renderTable",
    "methods": [],
    "props": {
      "table": {
        "defaultValue": null,
        "description": "",
        "name": "table",
        "parent": {
          "fileName": "leafygreen-ui/packages/table/src/testUtils.tsx",
          "name": "Props"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/table/src/testUtils.tsx",
            "name": "Props"
          }
        ],
        "required": false,
        "type": { "name": "any" }
      },
      "row": {
        "defaultValue": null,
        "description": "",
        "name": "row",
        "parent": {
          "fileName": "leafygreen-ui/packages/table/src/testUtils.tsx",
          "name": "Props"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/table/src/testUtils.tsx",
            "name": "Props"
          }
        ],
        "required": false,
        "type": { "name": "any" }
      }
    }
  },
  {
    "tags": {
      "param": "props.children Content that will appear inside of Tab panel.\nprops.disabled Boolean that determines if the Tab is disabled.\nprops.name Name that will appear in Tab List.\nprops.className Adds a className to the root element.\nprops.default If Tabs component is uncontrolled, this determines what Tab will be selected on first render.\nprops.href Destination when name is rendered as `a` tag.\nprops.to Destination when name is rendered as `Link` tag."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/tabs/src/Tab.tsx",
    "description": "# Tab\n\nTab panel component\n\n```\n<Tab name='First Tab'>Tab 1</Tab>\n```",
    "displayName": "Tab",
    "methods": [],
    "props": {
      "name": {
        "defaultValue": null,
        "description": "Content that will appear as the title in the Tab list.",
        "name": "name",
        "parent": {
          "fileName": "leafygreen-ui/packages/tabs/src/Tab.tsx",
          "name": "TabProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tabs/src/Tab.tsx",
            "name": "TabProps"
          }
        ],
        "required": true,
        "type": { "name": "React.ReactNode" }
      },
      "children": {
        "defaultValue": null,
        "description": "Content that will appear inside of Tab panel.",
        "name": "children",
        "parent": {
          "fileName": "leafygreen-ui/packages/tabs/src/Tab.tsx",
          "name": "TabProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tabs/src/Tab.tsx",
            "name": "TabProps"
          }
        ],
        "required": false,
        "type": { "name": "React.ReactNode" }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Boolean that determines if the Tab is disabled.",
        "name": "disabled",
        "parent": {
          "fileName": "leafygreen-ui/packages/tabs/src/Tab.tsx",
          "name": "TabProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tabs/src/Tab.tsx",
            "name": "TabProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "default": {
        "defaultValue": null,
        "description": "If Tabs component is uncontrolled, this determines what Tab will be selected on first render.",
        "name": "default",
        "parent": {
          "fileName": "leafygreen-ui/packages/tabs/src/Tab.tsx",
          "name": "TabProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tabs/src/Tab.tsx",
            "name": "TabProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "className": {
        "defaultValue": null,
        "description": "Adds a className to the root element.",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/tabs/src/Tab.tsx",
          "name": "TabProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tabs/src/Tab.tsx",
            "name": "TabProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "href": {
        "defaultValue": null,
        "description": "Destination when name is rendered as `a` tag.",
        "name": "href",
        "parent": {
          "fileName": "leafygreen-ui/packages/tabs/src/Tab.tsx",
          "name": "TabProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tabs/src/Tab.tsx",
            "name": "TabProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "to": {
        "defaultValue": null,
        "description": "Destination when name is rendered as `Link` tag.",
        "name": "to",
        "parent": {
          "fileName": "leafygreen-ui/packages/tabs/src/Tab.tsx",
          "name": "TabProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tabs/src/Tab.tsx",
            "name": "TabProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "selected": {
        "defaultValue": null,
        "description": "",
        "name": "selected",
        "parent": {
          "fileName": "leafygreen-ui/packages/tabs/src/Tab.tsx",
          "name": "TabProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tabs/src/Tab.tsx",
            "name": "TabProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "ariaControl": {
        "defaultValue": null,
        "description": "",
        "name": "ariaControl",
        "parent": {
          "fileName": "leafygreen-ui/packages/tabs/src/Tab.tsx",
          "name": "TabProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tabs/src/Tab.tsx",
            "name": "TabProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {
      "param": "props.children Content to appear inside of Tabs component.\nprops.setSelected Callback to be executed when Tab is selected. Receives index of activated Tab as the first argument.\nprops.selected Index of the Tab that should appear active. If value passed, component will be controlled by consumer.\nprops.className className applied to Tabs container.\nprops.as HTML Element that wraps name in Tab List."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/tabs/src/Tabs.tsx",
    "description": "# Tabs\n\nTabs component\n\n```\n<Tabs selected={0} setSelected={() => execute callback when new Tab is selected}>\n<Tab name='First Tab'>Tab 1</Tab>\n<Tab name='Second Tab'>Tab 2</Tab>\n</Tabs>\n```",
    "displayName": "Tabs",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "className supplied to Tabs container.",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/tabs/src/Tabs.tsx",
          "name": "TabsProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tabs/src/Tabs.tsx",
            "name": "TabsProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "children": {
        "defaultValue": null,
        "description": "Content that will appear inside of Tabs component. Should be comprised of at least two Tabs.",
        "name": "children",
        "parent": {
          "fileName": "leafygreen-ui/packages/tabs/src/Tabs.tsx",
          "name": "TabsProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tabs/src/Tabs.tsx",
            "name": "TabsProps"
          }
        ],
        "required": true,
        "type": { "name": "any[]" }
      },
      "darkMode": {
        "defaultValue": { "value": "false" },
        "description": "determines if component will appear for Dark Mode",
        "name": "darkMode",
        "parent": {
          "fileName": "leafygreen-ui/packages/tabs/src/Tabs.tsx",
          "name": "TabsProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tabs/src/Tabs.tsx",
            "name": "TabsProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "as": {
        "defaultValue": null,
        "description": "HTML Element that wraps title in Tab List.",
        "name": "as",
        "parent": {
          "fileName": "leafygreen-ui/packages/tabs/src/Tabs.tsx",
          "name": "TabsProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tabs/src/Tabs.tsx",
            "name": "TabsProps"
          }
        ],
        "required": false,
        "type": { "name": "React.ElementType<any>" }
      },
      "setSelected": {
        "defaultValue": null,
        "description": "Callback to be executed when Tab is selected. Receives index of activated Tab as the first argument.",
        "name": "setSelected",
        "parent": {
          "fileName": "leafygreen-ui/packages/tabs/src/Tabs.tsx",
          "name": "TabsProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tabs/src/Tabs.tsx",
            "name": "TabsProps"
          }
        ],
        "required": false,
        "type": { "name": "any" }
      },
      "selected": {
        "defaultValue": null,
        "description": "Index of the Tab that should appear active. If value passed to selected prop, component will be controlled by consumer.",
        "name": "selected",
        "parent": {
          "fileName": "leafygreen-ui/packages/tabs/src/Tabs.tsx",
          "name": "TabsProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tabs/src/Tabs.tsx",
            "name": "TabsProps"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "aria-label": {
        "defaultValue": null,
        "description": "Accessible label that describes the set of tabs",
        "name": "aria-label",
        "parent": {
          "fileName": "leafygreen-ui/packages/tabs/src/Tabs.tsx",
          "name": "TabsProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tabs/src/Tabs.tsx",
            "name": "TabsProps"
          },
          {
            "fileName": "leafygreen-ui/packages/tabs/src/Tabs.tsx",
            "name": "TabsProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "aria-labelledby": {
        "defaultValue": null,
        "description": "References id of label external to the component that describes the set of tabs",
        "name": "aria-labelledby",
        "parent": {
          "fileName": "leafygreen-ui/packages/tabs/src/Tabs.tsx",
          "name": "TabsProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tabs/src/Tabs.tsx",
            "name": "TabsProps"
          },
          {
            "fileName": "leafygreen-ui/packages/tabs/src/Tabs.tsx",
            "name": "TabsProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {
      "param": "props.children Content to appear inside of Tabs component.\nprops.setSelected Callback to be executed when Tab is selected. Receives index of activated Tab as the first argument.\nprops.selected Index of the Tab that should appear active. If value passed, component will be controlled by consumer.\nprops.className className applied to Tabs container.\nprops.as HTML Element that wraps name in Tab List."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/tabs/src/index.ts",
    "description": "# Tabs\n\nTabs component\n\n```\n<Tabs selected={0} setSelected={() => execute callback when new Tab is selected}>\n<Tab name='First Tab'>Tab 1</Tab>\n<Tab name='Second Tab'>Tab 2</Tab>\n</Tabs>\n```",
    "displayName": "Tabs",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "className supplied to Tabs container.",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/tabs/src/Tabs.tsx",
          "name": "TabsProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tabs/src/Tabs.tsx",
            "name": "TabsProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "children": {
        "defaultValue": null,
        "description": "Content that will appear inside of Tabs component. Should be comprised of at least two Tabs.",
        "name": "children",
        "parent": {
          "fileName": "leafygreen-ui/packages/tabs/src/Tabs.tsx",
          "name": "TabsProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tabs/src/Tabs.tsx",
            "name": "TabsProps"
          }
        ],
        "required": true,
        "type": { "name": "any[]" }
      },
      "darkMode": {
        "defaultValue": { "value": "false" },
        "description": "determines if component will appear for Dark Mode",
        "name": "darkMode",
        "parent": {
          "fileName": "leafygreen-ui/packages/tabs/src/Tabs.tsx",
          "name": "TabsProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tabs/src/Tabs.tsx",
            "name": "TabsProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "as": {
        "defaultValue": null,
        "description": "HTML Element that wraps title in Tab List.",
        "name": "as",
        "parent": {
          "fileName": "leafygreen-ui/packages/tabs/src/Tabs.tsx",
          "name": "TabsProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tabs/src/Tabs.tsx",
            "name": "TabsProps"
          }
        ],
        "required": false,
        "type": { "name": "React.ElementType<any>" }
      },
      "setSelected": {
        "defaultValue": null,
        "description": "Callback to be executed when Tab is selected. Receives index of activated Tab as the first argument.",
        "name": "setSelected",
        "parent": {
          "fileName": "leafygreen-ui/packages/tabs/src/Tabs.tsx",
          "name": "TabsProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tabs/src/Tabs.tsx",
            "name": "TabsProps"
          }
        ],
        "required": false,
        "type": { "name": "any" }
      },
      "selected": {
        "defaultValue": null,
        "description": "Index of the Tab that should appear active. If value passed to selected prop, component will be controlled by consumer.",
        "name": "selected",
        "parent": {
          "fileName": "leafygreen-ui/packages/tabs/src/Tabs.tsx",
          "name": "TabsProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tabs/src/Tabs.tsx",
            "name": "TabsProps"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "aria-label": {
        "defaultValue": null,
        "description": "Accessible label that describes the set of tabs",
        "name": "aria-label",
        "parent": {
          "fileName": "leafygreen-ui/packages/tabs/src/Tabs.tsx",
          "name": "TabsProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tabs/src/Tabs.tsx",
            "name": "TabsProps"
          },
          {
            "fileName": "leafygreen-ui/packages/tabs/src/Tabs.tsx",
            "name": "TabsProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "aria-labelledby": {
        "defaultValue": null,
        "description": "References id of label external to the component that describes the set of tabs",
        "name": "aria-labelledby",
        "parent": {
          "fileName": "leafygreen-ui/packages/tabs/src/Tabs.tsx",
          "name": "TabsProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tabs/src/Tabs.tsx",
            "name": "TabsProps"
          },
          {
            "fileName": "leafygreen-ui/packages/tabs/src/Tabs.tsx",
            "name": "TabsProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {
      "param": "props.children Content that will appear inside of Tab panel.\nprops.disabled Boolean that determines if the Tab is disabled.\nprops.name Name that will appear in Tab List.\nprops.className Adds a className to the root element.\nprops.default If Tabs component is uncontrolled, this determines what Tab will be selected on first render.\nprops.href Destination when name is rendered as `a` tag.\nprops.to Destination when name is rendered as `Link` tag."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/tabs/src/index.ts",
    "description": "# Tab\n\nTab panel component\n\n```\n<Tab name='First Tab'>Tab 1</Tab>\n```",
    "displayName": "Tab",
    "methods": [],
    "props": {
      "name": {
        "defaultValue": null,
        "description": "Content that will appear as the title in the Tab list.",
        "name": "name",
        "parent": {
          "fileName": "leafygreen-ui/packages/tabs/src/Tab.tsx",
          "name": "TabProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tabs/src/Tab.tsx",
            "name": "TabProps"
          }
        ],
        "required": true,
        "type": { "name": "React.ReactNode" }
      },
      "children": {
        "defaultValue": null,
        "description": "Content that will appear inside of Tab panel.",
        "name": "children",
        "parent": {
          "fileName": "leafygreen-ui/packages/tabs/src/Tab.tsx",
          "name": "TabProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tabs/src/Tab.tsx",
            "name": "TabProps"
          }
        ],
        "required": false,
        "type": { "name": "React.ReactNode" }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Boolean that determines if the Tab is disabled.",
        "name": "disabled",
        "parent": {
          "fileName": "leafygreen-ui/packages/tabs/src/Tab.tsx",
          "name": "TabProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tabs/src/Tab.tsx",
            "name": "TabProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "default": {
        "defaultValue": null,
        "description": "If Tabs component is uncontrolled, this determines what Tab will be selected on first render.",
        "name": "default",
        "parent": {
          "fileName": "leafygreen-ui/packages/tabs/src/Tab.tsx",
          "name": "TabProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tabs/src/Tab.tsx",
            "name": "TabProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "className": {
        "defaultValue": null,
        "description": "Adds a className to the root element.",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/tabs/src/Tab.tsx",
          "name": "TabProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tabs/src/Tab.tsx",
            "name": "TabProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "href": {
        "defaultValue": null,
        "description": "Destination when name is rendered as `a` tag.",
        "name": "href",
        "parent": {
          "fileName": "leafygreen-ui/packages/tabs/src/Tab.tsx",
          "name": "TabProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tabs/src/Tab.tsx",
            "name": "TabProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "to": {
        "defaultValue": null,
        "description": "Destination when name is rendered as `Link` tag.",
        "name": "to",
        "parent": {
          "fileName": "leafygreen-ui/packages/tabs/src/Tab.tsx",
          "name": "TabProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tabs/src/Tab.tsx",
            "name": "TabProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "selected": {
        "defaultValue": null,
        "description": "",
        "name": "selected",
        "parent": {
          "fileName": "leafygreen-ui/packages/tabs/src/Tab.tsx",
          "name": "TabProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tabs/src/Tab.tsx",
            "name": "TabProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "ariaControl": {
        "defaultValue": null,
        "description": "",
        "name": "ariaControl",
        "parent": {
          "fileName": "leafygreen-ui/packages/tabs/src/Tab.tsx",
          "name": "TabProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tabs/src/Tab.tsx",
            "name": "TabProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/testing-lib/src/jest-dom.ts",
    "description": "",
    "displayName": "silenceNavigationErrors",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/text-input/src/style.ts",
    "description": "Input indicator",
    "displayName": "inputIndicatorStyle",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/toast/node_modules/@leafygreen-ui/typography/src/FormElements.tsx",
    "description": "",
    "displayName": "Label",
    "methods": [],
    "props": {
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/toast/node_modules/@leafygreen-ui/typography/src/Typography.tsx",
    "description": "",
    "displayName": "H1",
    "methods": [],
    "props": {
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string | number" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/toast/node_modules/@leafygreen-ui/typography/src/index.ts",
    "description": "",
    "displayName": "Body",
    "methods": [],
    "props": {
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string | number" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/toast/node_modules/@leafygreen-ui/typography/src/index.ts",
    "description": "",
    "displayName": "InlineCode",
    "methods": [],
    "props": {
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/toast/node_modules/@leafygreen-ui/typography/src/index.ts",
    "description": "",
    "displayName": "InlineKeyCode",
    "methods": [],
    "props": {
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/toast/node_modules/@leafygreen-ui/typography/src/index.ts",
    "description": "",
    "displayName": "Disclaimer",
    "methods": [],
    "props": {
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/toast/node_modules/@leafygreen-ui/typography/src/index.ts",
    "description": "",
    "displayName": "Label",
    "methods": [],
    "props": {
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/toast/node_modules/@leafygreen-ui/typography/src/index.ts",
    "description": "",
    "displayName": "Description",
    "methods": [],
    "props": {
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/toast/src/Toast.tsx",
    "description": "",
    "displayName": "Toast",
    "methods": [],
    "props": {
      "title": {
        "defaultValue": null,
        "description": "Optional text shown in bold above the body text.",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/toast/src/Toast.tsx",
          "name": "ToastProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/toast/src/Toast.tsx",
            "name": "ToastProps"
          }
        ],
        "required": false,
        "type": { "name": "React.ReactNode" }
      },
      "body": {
        "defaultValue": null,
        "description": "Required main text for the Toast.",
        "name": "body",
        "parent": {
          "fileName": "leafygreen-ui/packages/toast/src/Toast.tsx",
          "name": "ToastProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/toast/src/Toast.tsx",
            "name": "ToastProps"
          }
        ],
        "required": true,
        "type": { "name": "React.ReactNode" }
      },
      "className": {
        "defaultValue": null,
        "description": "Optional className passed to the wrapping <div /> for the toast.",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/toast/src/Toast.tsx",
          "name": "ToastProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/toast/src/Toast.tsx",
            "name": "ToastProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "variant": {
        "defaultValue": null,
        "description": "Required style variant to render the Toast as.",
        "name": "variant",
        "parent": {
          "fileName": "leafygreen-ui/packages/toast/src/Toast.tsx",
          "name": "ToastProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/toast/src/Toast.tsx",
            "name": "ToastProps"
          }
        ],
        "required": true,
        "type": { "name": "Variant" }
      },
      "progress": {
        "defaultValue": { "value": 1 },
        "description": "Optional number between 0 and 1 that sets the progress bar's progress. Note that the progress bar is only rendered when the Toast variant is set to `'progress'`.\n\n**Default:** `1`",
        "name": "progress",
        "parent": {
          "fileName": "leafygreen-ui/packages/toast/src/Toast.tsx",
          "name": "ToastProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/toast/src/Toast.tsx",
            "name": "ToastProps"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "open": {
        "defaultValue": { "value": false },
        "description": "Optional boolean that renders the Toast and makes it visible when true.\n\n**Default:** `false`",
        "name": "open",
        "parent": {
          "fileName": "leafygreen-ui/packages/toast/src/Toast.tsx",
          "name": "ToastProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/toast/src/Toast.tsx",
            "name": "ToastProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "close": {
        "defaultValue": null,
        "description": "Optional click event handler that, when set, renders a close button that receives the passed handler.",
        "name": "close",
        "parent": {
          "fileName": "leafygreen-ui/packages/toast/src/Toast.tsx",
          "name": "ToastProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/toast/src/Toast.tsx",
            "name": "ToastProps"
          }
        ],
        "required": false,
        "type": { "name": "React.MouseEventHandler" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/toast/src/ToastProgressBar.tsx",
    "description": "",
    "displayName": "ToastProgressBar",
    "methods": [],
    "props": {
      "progress": {
        "defaultValue": null,
        "description": "",
        "name": "progress",
        "parent": {
          "fileName": "leafygreen-ui/packages/toast/src/ToastProgressBar.tsx",
          "name": "ProgressBarProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/toast/src/ToastProgressBar.tsx",
            "name": "ProgressBarProps"
          }
        ],
        "required": true,
        "type": { "name": "number" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/toast/src/index.ts",
    "description": "",
    "displayName": "Toast",
    "methods": [],
    "props": {
      "title": {
        "defaultValue": null,
        "description": "Optional text shown in bold above the body text.",
        "name": "title",
        "parent": {
          "fileName": "leafygreen-ui/packages/toast/src/Toast.tsx",
          "name": "ToastProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/toast/src/Toast.tsx",
            "name": "ToastProps"
          }
        ],
        "required": false,
        "type": { "name": "React.ReactNode" }
      },
      "body": {
        "defaultValue": null,
        "description": "Required main text for the Toast.",
        "name": "body",
        "parent": {
          "fileName": "leafygreen-ui/packages/toast/src/Toast.tsx",
          "name": "ToastProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/toast/src/Toast.tsx",
            "name": "ToastProps"
          }
        ],
        "required": true,
        "type": { "name": "React.ReactNode" }
      },
      "className": {
        "defaultValue": null,
        "description": "Optional className passed to the wrapping <div /> for the toast.",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/toast/src/Toast.tsx",
          "name": "ToastProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/toast/src/Toast.tsx",
            "name": "ToastProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "variant": {
        "defaultValue": null,
        "description": "Required style variant to render the Toast as.",
        "name": "variant",
        "parent": {
          "fileName": "leafygreen-ui/packages/toast/src/Toast.tsx",
          "name": "ToastProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/toast/src/Toast.tsx",
            "name": "ToastProps"
          }
        ],
        "required": true,
        "type": { "name": "Variant" }
      },
      "progress": {
        "defaultValue": { "value": 1 },
        "description": "Optional number between 0 and 1 that sets the progress bar's progress. Note that the progress bar is only rendered when the Toast variant is set to `'progress'`.\n\n**Default:** `1`",
        "name": "progress",
        "parent": {
          "fileName": "leafygreen-ui/packages/toast/src/Toast.tsx",
          "name": "ToastProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/toast/src/Toast.tsx",
            "name": "ToastProps"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "open": {
        "defaultValue": { "value": false },
        "description": "Optional boolean that renders the Toast and makes it visible when true.\n\n**Default:** `false`",
        "name": "open",
        "parent": {
          "fileName": "leafygreen-ui/packages/toast/src/Toast.tsx",
          "name": "ToastProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/toast/src/Toast.tsx",
            "name": "ToastProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "close": {
        "defaultValue": null,
        "description": "Optional click event handler that, when set, renders a close button that receives the passed handler.",
        "name": "close",
        "parent": {
          "fileName": "leafygreen-ui/packages/toast/src/Toast.tsx",
          "name": "ToastProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/toast/src/Toast.tsx",
            "name": "ToastProps"
          }
        ],
        "required": false,
        "type": { "name": "React.MouseEventHandler" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/toggle/src/Toggle.tsx",
    "description": "",
    "displayName": "Toggle",
    "methods": [],
    "props": {
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      },
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "className": {
        "defaultValue": null,
        "description": "Adds a className to the outermost element.",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/toggle/src/Toggle.tsx",
          "name": "BaseToggleProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/toggle/src/Toggle.tsx",
            "name": "BaseToggleProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "onChange": {
        "defaultValue": null,
        "description": "`onChange` fires when the internally-managed `checked` state of the component is updated. Receives the updated checked state of the toggle as its first argument, and the associated mouse event as the second.",
        "name": "onChange",
        "parent": {
          "fileName": "leafygreen-ui/packages/toggle/src/Toggle.tsx",
          "name": "BaseToggleProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/toggle/src/Toggle.tsx",
            "name": "BaseToggleProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(checked: boolean, mouseEvent: React.MouseEvent<HTMLButtonElement>) => void"
        }
      },
      "disabled": {
        "defaultValue": { "value": false },
        "description": "Disables the Toggle.\n\ndefault: `false`",
        "name": "disabled",
        "parent": {
          "fileName": "leafygreen-ui/packages/toggle/src/Toggle.tsx",
          "name": "BaseToggleProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/toggle/src/Toggle.tsx",
            "name": "BaseToggleProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "size": {
        "defaultValue": { "value": "default" },
        "description": "Sets the size of the toggle.\n\ndefault: `'default'`",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/toggle/src/Toggle.tsx",
          "name": "BaseToggleProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/toggle/src/Toggle.tsx",
            "name": "BaseToggleProps"
          }
        ],
        "required": false,
        "type": { "name": "Size" }
      },
      "darkMode": {
        "defaultValue": { "value": false },
        "description": "Determines if the Toggle will render the dark mode styles.\n\ndefault: `false`",
        "name": "darkMode",
        "parent": {
          "fileName": "leafygreen-ui/packages/toggle/src/Toggle.tsx",
          "name": "BaseToggleProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/toggle/src/Toggle.tsx",
            "name": "BaseToggleProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "checked": {
        "defaultValue": null,
        "description": "Sets the checked state of the Toggle.",
        "name": "checked",
        "parent": {
          "fileName": "leafygreen-ui/packages/toggle/src/Toggle.tsx",
          "name": "BaseToggleProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/toggle/src/Toggle.tsx",
            "name": "BaseToggleProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/toggle/src/index.ts",
    "description": "",
    "displayName": "Toggle",
    "methods": [],
    "props": {
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      },
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "className": {
        "defaultValue": null,
        "description": "Adds a className to the outermost element.",
        "name": "className",
        "parent": {
          "fileName": "leafygreen-ui/packages/toggle/src/Toggle.tsx",
          "name": "BaseToggleProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/toggle/src/Toggle.tsx",
            "name": "BaseToggleProps"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "onChange": {
        "defaultValue": null,
        "description": "`onChange` fires when the internally-managed `checked` state of the component is updated. Receives the updated checked state of the toggle as its first argument, and the associated mouse event as the second.",
        "name": "onChange",
        "parent": {
          "fileName": "leafygreen-ui/packages/toggle/src/Toggle.tsx",
          "name": "BaseToggleProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/toggle/src/Toggle.tsx",
            "name": "BaseToggleProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(checked: boolean, mouseEvent: React.MouseEvent<HTMLButtonElement>) => void"
        }
      },
      "disabled": {
        "defaultValue": { "value": false },
        "description": "Disables the Toggle.\n\ndefault: `false`",
        "name": "disabled",
        "parent": {
          "fileName": "leafygreen-ui/packages/toggle/src/Toggle.tsx",
          "name": "BaseToggleProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/toggle/src/Toggle.tsx",
            "name": "BaseToggleProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "size": {
        "defaultValue": { "value": "default" },
        "description": "Sets the size of the toggle.\n\ndefault: `'default'`",
        "name": "size",
        "parent": {
          "fileName": "leafygreen-ui/packages/toggle/src/Toggle.tsx",
          "name": "BaseToggleProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/toggle/src/Toggle.tsx",
            "name": "BaseToggleProps"
          }
        ],
        "required": false,
        "type": { "name": "Size" }
      },
      "darkMode": {
        "defaultValue": { "value": false },
        "description": "Determines if the Toggle will render the dark mode styles.\n\ndefault: `false`",
        "name": "darkMode",
        "parent": {
          "fileName": "leafygreen-ui/packages/toggle/src/Toggle.tsx",
          "name": "BaseToggleProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/toggle/src/Toggle.tsx",
            "name": "BaseToggleProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "checked": {
        "defaultValue": null,
        "description": "Sets the checked state of the Toggle.",
        "name": "checked",
        "parent": {
          "fileName": "leafygreen-ui/packages/toggle/src/Toggle.tsx",
          "name": "BaseToggleProps"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/toggle/src/Toggle.tsx",
            "name": "BaseToggleProps"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/tooltip/src/Notch.tsx",
    "description": "",
    "displayName": "SvgNotch",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "param": "Start will justify content against the start of other element\nMiddle will justify content against the middle of other element\nBottom will justify content against the end of other element\nFit will justify content against both the start and the end of the other element"
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/tooltip/src/Tooltip.tsx",
    "description": "Options to determine the justification of the popover relative to\nthe other component",
    "displayName": "Tooltip",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "param": "Start will justify content against the start of other element\nMiddle will justify content against the middle of other element\nBottom will justify content against the end of other element\nFit will justify content against both the start and the end of the other element"
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/tooltip/src/index.ts",
    "description": "Options to determine the justification of the popover relative to\nthe other component",
    "displayName": "__type",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "param": "props.children Content to appear inside of Tooltip.\nprops.open Boolean to describe whether or not Tooltip is open.\nprops.setOpen Callback to change the open state of the Tooltip.\nprops.darkMode Whether the Tooltip will apepar in dark mode.\nprops.className Classname applied to Tooltip.\nprops.align Alignment of Tooltip relative to trigger: `top`, `bottom`, `left`, `right`.\nprops.justify Justification of Tooltip relative to trigger: `start`, `middle`, `end`.\nprops.trigger Trigger element can be ReactNode or function.\nprops.triggerEvent Whether the Tooltip should be triggered by a `click` or `hover`.\nprops.id id given to Tooltip content.\nprops.usePortal Determines whether or not Tooltip will be Portaled\nprops.portalClassName Classname applied to root element of the portal."
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/tooltip/src/index.ts",
    "description": "# Tooltip\n\nTooltip component\n\n```\n<Tooltip\nalign='top'\njustify='start'\ntrigger={<button>trigger</button>}\ntriggerEvent='hover'\n>\nI am an uncontrolled Tooltip!\n</Tooltip>\n```",
    "displayName": "Tooltip",
    "methods": [],
    "props": {
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      },
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "id": {
        "defaultValue": null,
        "description": "id given to `Tooltip` content.",
        "name": "id",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          },
          {
            "fileName": "leafygreen-ui/packages/tooltip/src/Tooltip.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "className": {
        "defaultValue": null,
        "description": "Class name applied to popover content container.",
        "name": "className",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "children": {
        "defaultValue": null,
        "description": "Content that will appear inside of the popover component.",
        "name": "children",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": { "name": "any" }
      },
      "onClick": {
        "defaultValue": null,
        "description": "Click event handler passed to the root div element within the portal container.",
        "name": "onClick",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "React.MouseEventHandler" }
      },
      "usePortal": {
        "defaultValue": { "value": true },
        "description": "Specifies that the popover content should be rendered at the end of the DOM,\nrather than in the DOM tree.\n\ndefault: `true`",
        "name": "usePortal",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "portalClassName": {
        "defaultValue": null,
        "description": "When usePortal is `true`, specifies a class name to apply to the root element of the portal.",
        "name": "portalClassName",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "portalContainer": {
        "defaultValue": null,
        "description": "When usePortal is `true`, specifies an element to portal within. The default behavior is to generate a div at the end of the document to render within.",
        "name": "portalContainer",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "HTMLElement" }
      },
      "scrollContainer": {
        "defaultValue": null,
        "description": "When usePortal is `true`, specifies the scrollable element to position relative to.",
        "name": "scrollContainer",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "HTMLElement" }
      },
      "popoverZIndex": {
        "defaultValue": null,
        "description": "Number that controls the z-index of the popover element directly.",
        "name": "popoverZIndex",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "align": {
        "defaultValue": { "value": "top" },
        "description": "Determines the alignment of the popover content relative to the trigger element\n\ndefault: `bottom`",
        "name": "align",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Align" }
      },
      "justify": {
        "defaultValue": { "value": "start" },
        "description": "Determines the justification of the popover content relative to the trigger element\n\ndefault: `start`",
        "name": "justify",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Justify" }
      },
      "refEl": {
        "defaultValue": null,
        "description": "A reference to the element against which the popover component will be positioned.",
        "name": "refEl",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "React.RefObject<HTMLElement>" }
      },
      "spacing": {
        "defaultValue": { "value": 12 },
        "description": "Specifies the amount of spacing (in pixels) between the trigger element and the Popover content.\n\ndefault: `10`",
        "name": "spacing",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "number" }
      },
      "adjustOnMutation": {
        "defaultValue": null,
        "description": "Should the Popover auto adjust its content when the DOM changes (using MutationObserver).\n\ndefault: false",
        "name": "adjustOnMutation",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/popover/dist/types.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "trigger": {
        "defaultValue": null,
        "description": "A slot for the element used to trigger the `Tooltip`.",
        "name": "trigger",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tooltip/src/Tooltip.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "any" }
      },
      "triggerEvent": {
        "defaultValue": { "value": "hover" },
        "description": "Determines if a `hover` or `click` event will trigger the opening of a `Tooltip`.",
        "name": "triggerEvent",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tooltip/src/Tooltip.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "TriggerEvent" }
      },
      "open": {
        "defaultValue": { "value": ": `false`" },
        "description": "Controls component and determines the open state of the `Tooltip`",
        "name": "open",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tooltip/src/Tooltip.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "setOpen": {
        "defaultValue": null,
        "description": "Callback to change the open state of the `Tooltip`.",
        "name": "setOpen",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tooltip/src/Tooltip.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "React.Dispatch<React.SetStateAction<boolean>>" }
      },
      "darkMode": {
        "defaultValue": { "value": false },
        "description": "Whether the `Tooltip` will appear in dark mode.",
        "name": "darkMode",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tooltip/src/Tooltip.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "shouldClose": {
        "defaultValue": null,
        "description": "Callback to determine whether or not `Tooltip` should close when user tries to close it.",
        "name": "shouldClose",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tooltip/src/Tooltip.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "() => boolean" }
      },
      "enabled": {
        "defaultValue": { "value": true },
        "description": "Enables Tooltip to trigger based on the event specified by `triggerEvent`.",
        "name": "enabled",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tooltip/src/Tooltip.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/tooltip/src/tooltipUtils.tsx",
    "description": "",
    "displayName": "notchPositionStyles",
    "methods": [],
    "props": {
      "align": {
        "defaultValue": null,
        "description": "",
        "name": "align",
        "parent": {
          "fileName": "leafygreen-ui/packages/tooltip/src/tooltipUtils.tsx",
          "name": "NotchPositionStylesArgs"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tooltip/src/tooltipUtils.tsx",
            "name": "NotchPositionStylesArgs"
          }
        ],
        "required": true,
        "type": { "name": "Align" }
      },
      "justify": {
        "defaultValue": null,
        "description": "",
        "name": "justify",
        "parent": {
          "fileName": "leafygreen-ui/packages/tooltip/src/tooltipUtils.tsx",
          "name": "NotchPositionStylesArgs"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tooltip/src/tooltipUtils.tsx",
            "name": "NotchPositionStylesArgs"
          }
        ],
        "required": true,
        "type": { "name": "Justify" }
      },
      "triggerRect": {
        "defaultValue": null,
        "description": "",
        "name": "triggerRect",
        "parent": {
          "fileName": "leafygreen-ui/packages/tooltip/src/tooltipUtils.tsx",
          "name": "NotchPositionStylesArgs"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/tooltip/src/tooltipUtils.tsx",
            "name": "NotchPositionStylesArgs"
          }
        ],
        "required": true,
        "type": { "name": "DOMRect | ElementPosition | ClientRect" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/typography/src/Body.tsx",
    "description": "",
    "displayName": "Body",
    "methods": [],
    "props": {
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string | number" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      },
      "weight": {
        "defaultValue": { "value": "regular" },
        "description": "font-weight applied to typography element\ndefault: `regular`",
        "name": "weight",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/typography/src/Body.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "BodyFontWeight" }
      },
      "as": {
        "defaultValue": { "value": "'p' as T" },
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/typography/src/Body.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "keyof IntrinsicElements" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/typography/src/Description.tsx",
    "description": "",
    "displayName": "Description",
    "methods": [],
    "props": {
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      },
      "darkMode": {
        "defaultValue": { "value": false },
        "description": "",
        "name": "darkMode",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/typography/src/Description.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "disabled": {
        "defaultValue": { "value": false },
        "description": "",
        "name": "disabled",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/typography/src/Description.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/typography/src/Disclaimer.tsx",
    "description": "",
    "displayName": "Disclaimer",
    "methods": [],
    "props": {
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/typography/src/InlineCode.tsx",
    "description": "",
    "displayName": "InlineCode",
    "methods": [],
    "props": {
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      },
      "darkMode": {
        "defaultValue": null,
        "description": "",
        "name": "darkMode",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/typography/src/InlineCode.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/typography/src/InlineKeyCode.tsx",
    "description": "",
    "displayName": "InlineKeyCode",
    "methods": [],
    "props": {
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      },
      "darkMode": {
        "defaultValue": null,
        "description": "",
        "name": "darkMode",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/typography/src/InlineCode.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/typography/src/Label.tsx",
    "description": "",
    "displayName": "Label",
    "methods": [],
    "props": {
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "htmlFor": {
        "defaultValue": null,
        "description": "",
        "name": "htmlFor",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "LabelHTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "LabelHTMLAttributes"
          },
          {
            "fileName": "leafygreen-ui/packages/typography/src/Label.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      },
      "darkMode": {
        "defaultValue": { "value": false },
        "description": "",
        "name": "darkMode",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/typography/src/Label.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "disabled": {
        "defaultValue": { "value": false },
        "description": "",
        "name": "disabled",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/typography/src/Label.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      }
    }
  },
  {
    "tags": {
      "param": "override : If the calling component accepts a `baseFontSize` prop, pass that prop into this hook to respect it",
      "deprecated": "",
      "returns": "- {@link BaseFontSize }"
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/typography/src/index.ts",
    "description": "A temporary wrapper around {@link useBaseFontSize}\n\nReturns a font size token consistent with the visual brand refresh.\n\nOnce all components have been updated for the refresh,\nthis hook will be removed, and {@link useBaseFontSize} updated\nto return the updated tokens.",
    "displayName": "useUpdatedBaseFontSize",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/typography/src/index.ts",
    "description": "",
    "displayName": "Body",
    "methods": [],
    "props": {
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string | number" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      },
      "weight": {
        "defaultValue": { "value": "regular" },
        "description": "font-weight applied to typography element\ndefault: `regular`",
        "name": "weight",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/typography/src/Body.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "BodyFontWeight" }
      },
      "as": {
        "defaultValue": { "value": "'p' as T" },
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/typography/src/Body.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "keyof IntrinsicElements" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/typography/src/index.ts",
    "description": "",
    "displayName": "InlineCode",
    "methods": [],
    "props": {
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      },
      "darkMode": {
        "defaultValue": null,
        "description": "",
        "name": "darkMode",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/typography/src/InlineCode.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/typography/src/index.ts",
    "description": "",
    "displayName": "InlineKeyCode",
    "methods": [],
    "props": {
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      },
      "darkMode": {
        "defaultValue": null,
        "description": "",
        "name": "darkMode",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/typography/src/InlineCode.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/typography/src/index.ts",
    "description": "",
    "displayName": "Description",
    "methods": [],
    "props": {
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      },
      "darkMode": {
        "defaultValue": { "value": false },
        "description": "",
        "name": "darkMode",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/typography/src/Description.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "disabled": {
        "defaultValue": { "value": false },
        "description": "",
        "name": "disabled",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/typography/src/Description.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/typography/src/index.ts",
    "description": "",
    "displayName": "Disclaimer",
    "methods": [],
    "props": {
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/typography/src/index.ts",
    "description": "",
    "displayName": "Label",
    "methods": [],
    "props": {
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "Attributes"
          },
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "Key" }
      },
      "htmlFor": {
        "defaultValue": null,
        "description": "",
        "name": "htmlFor",
        "parent": {
          "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
          "name": "LabelHTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "leafygreen-ui/node_modules/@types/react/index.d.ts",
            "name": "LabelHTMLAttributes"
          },
          {
            "fileName": "leafygreen-ui/packages/typography/src/Label.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "string" }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/lib/dist/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "never" }
      },
      "darkMode": {
        "defaultValue": { "value": false },
        "description": "",
        "name": "darkMode",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/typography/src/Label.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      },
      "disabled": {
        "defaultValue": { "value": false },
        "description": "",
        "name": "disabled",
        "declarations": [
          {
            "fileName": "leafygreen-ui/packages/typography/src/Label.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": { "name": "boolean" }
      }
    }
  },
  {
    "tags": {
      "param": "override : If the calling component accepts a `baseFontSize` prop, pass that prop into this hook to respect it",
      "deprecated": "",
      "returns": "- {@link BaseFontSize }"
    },
    "filePath": "/Users/sean/Documents/leafygreen-ui/packages/typography/src/useUpdatedBaseFontSize.ts",
    "description": "A temporary wrapper around {@link useBaseFontSize}\n\nReturns a font size token consistent with the visual brand refresh.\n\nOnce all components have been updated for the refresh,\nthis hook will be removed, and {@link useBaseFontSize} updated\nto return the updated tokens.",
    "displayName": "useUpdatedBaseFontSize",
    "methods": [],
    "props": {}
  }
]
